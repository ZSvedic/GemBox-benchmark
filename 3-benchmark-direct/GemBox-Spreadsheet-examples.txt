--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/DataGridView in WindowsForms/Form1.cs:
using System;
using System.Windows.Forms;
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.WinFormsUtilities;

public partial class Form1 : Form
{
    public Form1()
    {
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        InitializeComponent();
    }

    private void btnLoadFile_Click(object sender, EventArgs e)
    {
        var openFileDialog = new OpenFileDialog();
        openFileDialog.Filter =
            "XLS files (*.xls, *.xlt)|*.xls;*.xlt|" +
            "XLSX files (*.xlsx, *.xlsm, *.xltx, *.xltm)|*.xlsx;*.xlsm;*.xltx;*.xltm|" +
            "ODS files (*.ods, *.ots)|*.ods;*.ots|" +
            "CSV files (*.csv, *.tsv)|*.csv;*.tsv|" +
            "HTML files (*.html, *.htm)|*.html;*.htm";

        openFileDialog.FilterIndex = 2;

        if (openFileDialog.ShowDialog() == DialogResult.OK)
        {
            var workbook = ExcelFile.Load(openFileDialog.FileName);
            var worksheet = workbook.Worksheets.ActiveWorksheet;

            // From ExcelFile to DataGridView.
            DataGridViewConverter.ExportToDataGridView(
                worksheet,
                this.dataGridView1,
                new ExportToDataGridViewOptions() { ColumnHeaders = true });
        }
    }

    private void btnSave_Click(object sender, EventArgs e)
    {
        var saveFileDialog = new SaveFileDialog();
        saveFileDialog.Filter =
            "XLS (*.xls)|*.xls|" +
            "XLT (*.xlt)|*.xlt|" +
            "XLSX (*.xlsx)|*.xlsx|" +
            "XLSM (*.xlsm)|*.xlsm|" +
            "XLTX (*.xltx)|*.xltx|" +
            "XLTM (*.xltm)|*.xltm|" +
            "ODS (*.ods)|*.ods|" +
            "OTS (*.ots)|*.ots|" +
            "CSV (*.csv)|*.csv|" +
            "TSV (*.tsv)|*.tsv|" +
            "HTML (*.html)|*.html|" +
            "MHTML (.mhtml)|*.mhtml|" +
            "PDF (*.pdf)|*.pdf|" +
            "XPS (*.xps)|*.xps|" +
            "BMP (*.bmp)|*.bmp|" +
            "GIF (*.gif)|*.gif|" +
            "JPEG (*.jpg)|*.jpg|" +
            "PNG (*.png)|*.png|" +
            "TIFF (*.tif)|*.tif|" +
            "WMP (*.wdp)|*.wdp";

        saveFileDialog.FilterIndex = 3;

        if (saveFileDialog.ShowDialog() == DialogResult.OK)
        {
            var workbook = new ExcelFile();
            var worksheet = workbook.Worksheets.Add("Sheet1");

            // From DataGridView to ExcelFile.
            DataGridViewConverter.ImportFromDataGridView(
                worksheet,
                this.dataGridView1,
                new ImportFromDataGridViewOptions() { ColumnHeaders = true });

            workbook.Save(saveFileDialog.FileName);
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/DataGridView in WindowsForms/Form1.Designer.cs:
partial class Form1
{
    /// <summary>
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary>
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
        if (disposing && (components != null))
        {
            components.Dispose();
        }
        base.Dispose(disposing);
    }

    #region Windows Form Designer generated code

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
        this.dataGridView1 = new System.Windows.Forms.DataGridView();
        this.btnLoadFile = new System.Windows.Forms.Button();
        this.btnSave = new System.Windows.Forms.Button();
        ((System.ComponentModel.ISupportInitialize)(this.dataGridView1)).BeginInit();
        this.SuspendLayout();
        // 
        // dataGridView1
        // 
        this.dataGridView1.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
        this.dataGridView1.Location = new System.Drawing.Point(12, 42);
        this.dataGridView1.Name = "dataGridView1";
        this.dataGridView1.Size = new System.Drawing.Size(607, 308);
        this.dataGridView1.TabIndex = 0;
        // 
        // btnLoadFile
        // 
        this.btnLoadFile.Location = new System.Drawing.Point(12, 12);
        this.btnLoadFile.Name = "btnLoadFile";
        this.btnLoadFile.Size = new System.Drawing.Size(100, 23);
        this.btnLoadFile.TabIndex = 1;
        this.btnLoadFile.Text = "Load File";
        this.btnLoadFile.UseVisualStyleBackColor = true;
        this.btnLoadFile.Click += new System.EventHandler(this.btnLoadFile_Click);
        // 
        // btnSave
        // 
        this.btnSave.Location = new System.Drawing.Point(118, 12);
        this.btnSave.Name = "btnSave";
        this.btnSave.Size = new System.Drawing.Size(100, 23);
        this.btnSave.TabIndex = 2;
        this.btnSave.Text = "Save File";
        this.btnSave.UseVisualStyleBackColor = true;
        this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
        // 
        // Form1
        // 
        this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
        this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
        this.ClientSize = new System.Drawing.Size(631, 362);
        this.Controls.Add(this.btnSave);
        this.Controls.Add(this.btnLoadFile);
        this.Controls.Add(this.dataGridView1);
        this.Name = "Form1";
        this.Text = "Import/Export to Windows.Forms DataGridView";
        ((System.ComponentModel.ISupportInitialize)(this.dataGridView1)).EndInit();
        this.ResumeLayout(false);

    }

    #endregion

    private System.Windows.Forms.DataGridView dataGridView1;
    private System.Windows.Forms.Button btnLoadFile;
    private System.Windows.Forms.Button btnSave;
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/DataGridView in WindowsForms/Program.cs:
using System;
using System.Collections.Generic;
using System.Windows.Forms;

namespace WinFormsUtilities
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/DataGridView in WindowsForms/Properties/AssemblyInfo.cs:
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("WinFormsUtilities")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("GemBox Ltd.")]
[assembly: AssemblyProduct("WinFormsUtilities")]
[assembly: AssemblyCopyright("Copyright © GemBox Ltd.")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("ac402c92-9ab4-4d22-bfc0-00316af495af")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Docker/Program.cs:
﻿using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Charts;

class Program
{
    static void Main()
    {
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // Create new workbook.
        var workbook = new ExcelFile();

        // Create new worksheet.
        var worksheet = workbook.Worksheets.Add("Sheet1");
        worksheet.PrintOptions.PrintHeadings = true;
        worksheet.PrintOptions.PrintGridlines = true;
        worksheet.PrintOptions.FitWorksheetWidthToPages = 1;

        // Add sample formatting.
        worksheet.Rows[0].Style = workbook.Styles[BuiltInCellStyleName.Heading1];
        worksheet.Columns[0].SetWidth(80, LengthUnit.Pixel);
        worksheet.Columns[1].SetWidth(80, LengthUnit.Pixel);

        // Add sample data.
        worksheet.Cells["A1"].Value = "Name";
        worksheet.Cells["A2"].Value = "John Doe";
        worksheet.Cells["A3"].Value = "Fred Nurk";
        worksheet.Cells["A4"].Value = "Hans Meier";
        worksheet.Cells["A5"].Value = "Ivan Horvat";
        worksheet.Cells["B1"].Value = "Salary";
        worksheet.Cells["B2"].Value = 3600;
        worksheet.Cells["B3"].Value = 2580;
        worksheet.Cells["B4"].Value = 3200;
        worksheet.Cells["B5"].Value = 4100;

        // Add sample chart.
        var chart = worksheet.Charts.Add(ChartType.Bar, "B7", "J20");
        chart.SelectData(worksheet.Cells.GetSubrange("A1:B5"), true);

        // Save spreadsheet in XLSX and PDF format.
        workbook.Save("output.xlsx");
        workbook.Save("output.pdf");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Azure/GemBoxFunction.cs:
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using GemBox.Spreadsheet;

public static class GemBoxFunction
{
    [FunctionName("GemBoxFunction")]
#pragma warning disable CS1998 // Async method lacks 'await' operators.
    public static async Task<IActionResult> Run([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = null)] HttpRequest req, ILogger log)
#pragma warning restore CS1998
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Hello World");

        worksheet.Cells[0, 0].Value = "Hello";
        worksheet.Cells[0, 1].Value = "World";

        var fileName = "Output.xlsx";
        var options = SaveOptions.XlsxDefault;

        using (var stream = new MemoryStream())
        {
            workbook.Save(stream, options);
            return new FileContentResult(stream.ToArray(), options.ContentType) { FileDownloadName = fileName };
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/MVC/Startup.cs:
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SpreadsheetCoreMvc
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;

            // Add compatibility switch.
            AppContext.SetSwitch("Switch.System.Windows.Media.ShouldRenderEvenWhenNoDisplayDevicesAreAvailable", true);
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }

            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/MVC/Program.cs:
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SpreadsheetCoreMvc
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/MVC/Models/ErrorViewModel.cs:
﻿namespace SpreadsheetCoreMvc.Models
{
    public class ErrorViewModel
    {
        public string RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/MVC/Controllers/HomeController.cs:
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using Microsoft.AspNetCore.Mvc;
using SpreadsheetCoreMvc.Models;
using GemBox.Spreadsheet;

namespace SpreadsheetCoreMvc.Controllers
{
    public class HomeController : Controller
    {
        static HomeController()
        {
            // If using the Professional version, put your serial key below.
            SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        }

        public IActionResult Index()
        {
            return View(new ReportModel());
        }

        public FileStreamResult Download(ReportModel model)
        {
            // Create new spreadsheet.
            var workbook = new ExcelFile();
            var worksheet = workbook.Worksheets.Add("Report");

            // Set styles on rows and columns.
            worksheet.Rows[0].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;
            worksheet.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
            worksheet.Columns[0].SetWidth(40, LengthUnit.Pixel);
            worksheet.Columns[1].SetWidth(100, LengthUnit.Pixel);
            worksheet.Columns[2].SetWidth(100, LengthUnit.Pixel);
            worksheet.Columns[2].Style.NumberFormat = @"\$\ #,##0";

            // Create header row.
            worksheet.Cells["A1"].Value = nameof(ReportItemModel.Id);
            worksheet.Cells["B1"].Value = nameof(ReportItemModel.Name);
            worksheet.Cells["C1"].Value = nameof(ReportItemModel.Salary);

            // Create data rows.
            for (int r = 1; r <= model.Items.Count; r++)
            {
                ReportItemModel item = model.Items[r - 1];
                worksheet.Cells[r, 0].Value = item.Id;
                worksheet.Cells[r, 1].Value = item.Name;
                worksheet.Cells[r, 2].Value = item.Salary;
            }

            // Save spreadsheet in specified file format.
            var stream = new MemoryStream();
            workbook.Save(stream, model.Options);

            // Download file.
            return File(stream, model.Options.ContentType, $"OutputFromView.{model.Format.ToLower()}");
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel() { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}

namespace SpreadsheetCoreMvc.Models
{
    public class ReportModel
    {
        public IList<ReportItemModel> Items { get; set; } = new List<ReportItemModel>()
        {
            new ReportItemModel() { Id = 100, Name = "John Doe", Salary = 3600 },
            new ReportItemModel() { Id = 101, Name = "Jane Doe", Salary = 7200 },
            new ReportItemModel() { Id = 102, Name = "Fred Nurk", Salary = 2580 },
            new ReportItemModel() { Id = 103, Name = "Hans Meier", Salary = 3200 },
            new ReportItemModel() { Id = 104, Name = "Ivan Horvat", Salary = 4100 },
            new ReportItemModel() { Id = 105, Name = "Jean Dupont", Salary = 6850 },
            new ReportItemModel() { Id = 106, Name = "Mario Rossi", Salary = 4400 }
        };
        public string Format { get; set; } = "XLSX";
        public SaveOptions Options => this.FormatMappingDictionary[this.Format];
        public IDictionary<string, SaveOptions> FormatMappingDictionary => new Dictionary<string, SaveOptions>()
        {
            ["XLSX"] = new XlsxSaveOptions(),
            ["XLS"] = new XlsSaveOptions(),
            ["ODS"] = new OdsSaveOptions(),
            ["CSV"] = new CsvSaveOptions(CsvType.CommaDelimited),
            ["PDF"] = new PdfSaveOptions(),
            ["HTML"] = new HtmlSaveOptions() { EmbedImages = true },
            ["XPS"] = new XpsSaveOptions(),
            ["BMP"] = new ImageSaveOptions(ImageSaveFormat.Bmp),
            ["PNG"] = new ImageSaveOptions(ImageSaveFormat.Png),
            ["JPG"] = new ImageSaveOptions(ImageSaveFormat.Jpeg),
            ["GIF"] = new ImageSaveOptions(ImageSaveFormat.Gif),
            ["TIF"] = new ImageSaveOptions(ImageSaveFormat.Tiff)
        };
    }

    public class ReportItemModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Salary { get; set; }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/Razor Pages/Startup.cs:
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SpreadsheetCorePages
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;

            // Add compatibility switch.
            AppContext.SetSwitch("Switch.System.Windows.Media.ShouldRenderEvenWhenNoDisplayDevicesAreAvailable", true);
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddRazorPages();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
            }

            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapRazorPages();
            });
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/Razor Pages/Program.cs:
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SpreadsheetCorePages
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/Razor Pages/Pages/Error.cshtml.cs:
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace SpreadsheetCorePages.Pages
{
    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    [IgnoreAntiforgeryToken]
    public class ErrorModel : PageModel
    {
        public string RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

        private readonly ILogger<ErrorModel> _logger;

        public ErrorModel(ILogger<ErrorModel> logger)
        {
            _logger = logger;
        }

        public void OnGet()
        {
            RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/Razor Pages/Pages/Index.cshtml.cs:
using System.Collections.Generic;
using System.IO;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using SpreadsheetCorePages.Models;
using GemBox.Spreadsheet;

namespace SpreadsheetCorePages.Pages
{
    public class IndexModel : PageModel
    {
        [BindProperty]
        public ReportModel Report { get; set; }

        public IndexModel()
        {
            this.Report = new ReportModel();

            // If using the Professional version, put your serial key below.
            SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        }

        public void OnGet() { }

        public FileContentResult OnPost()
        {
            // Create new spreadsheet.
            var workbook = new ExcelFile();
            var worksheet = workbook.Worksheets.Add("Report");

            // Set styles on rows and columns.
            worksheet.Rows[0].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;
            worksheet.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
            worksheet.Columns[0].SetWidth(40, LengthUnit.Pixel);
            worksheet.Columns[1].SetWidth(100, LengthUnit.Pixel);
            worksheet.Columns[2].SetWidth(100, LengthUnit.Pixel);
            worksheet.Columns[2].Style.NumberFormat = @"\$\ #,##0";

            // Create header row.
            worksheet.Cells["A1"].Value = nameof(ReportItemModel.Id);
            worksheet.Cells["B1"].Value = nameof(ReportItemModel.Name);
            worksheet.Cells["C1"].Value = nameof(ReportItemModel.Salary);

            // Create data rows.
            for (int r = 1; r <= this.Report.Items.Count; r++)
            {
                ReportItemModel item = this.Report.Items[r - 1];
                worksheet.Cells[r, 0].Value = item.Id;
                worksheet.Cells[r, 1].Value = item.Name;
                worksheet.Cells[r, 2].Value = item.Salary;
            }

            // Save spreadsheet in specified file format.
            var stream = new MemoryStream();
            workbook.Save(stream, this.Report.Options);

            // Download file.
            return File(stream.ToArray(), this.Report.Options.ContentType, $"OutputFromPage.{this.Report.Format.ToLower()}");
        }
    }
}

namespace SpreadsheetCorePages.Models
{
    public class ReportModel
    {
        public IList<ReportItemModel> Items { get; set; } = new List<ReportItemModel>()
        {
            new ReportItemModel() { Id = 100, Name = "John Doe", Salary = 3600 },
            new ReportItemModel() { Id = 101, Name = "Jane Doe", Salary = 7200 },
            new ReportItemModel() { Id = 102, Name = "Fred Nurk", Salary = 2580 },
            new ReportItemModel() { Id = 103, Name = "Hans Meier", Salary = 3200 },
            new ReportItemModel() { Id = 104, Name = "Ivan Horvat", Salary = 4100 },
            new ReportItemModel() { Id = 105, Name = "Jean Dupont", Salary = 6850 },
            new ReportItemModel() { Id = 106, Name = "Mario Rossi", Salary = 4400 }
        };
        public string Format { get; set; } = "PDF";
        public SaveOptions Options => this.FormatMappingDictionary[this.Format];
        public IDictionary<string, SaveOptions> FormatMappingDictionary => new Dictionary<string, SaveOptions>()
        {
            ["XLSX"] = new XlsxSaveOptions(),
            ["XLS"] = new XlsSaveOptions(),
            ["ODS"] = new OdsSaveOptions(),
            ["CSV"] = new CsvSaveOptions(CsvType.CommaDelimited),
            ["PDF"] = new PdfSaveOptions(),
            ["HTML"] = new HtmlSaveOptions() { EmbedImages = true },
            ["XPS"] = new XpsSaveOptions(),
            ["BMP"] = new ImageSaveOptions(ImageSaveFormat.Bmp),
            ["PNG"] = new ImageSaveOptions(ImageSaveFormat.Png),
            ["JPG"] = new ImageSaveOptions(ImageSaveFormat.Jpeg),
            ["GIF"] = new ImageSaveOptions(ImageSaveFormat.Gif),
            ["TIF"] = new ImageSaveOptions(ImageSaveFormat.Tiff)
        };
    }

    public class ReportItemModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Salary { get; set; }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/App.xaml.cs:
﻿namespace SpreadsheetMaui
{
    public partial class App : Application
    {
        public App()
        {
            InitializeComponent();

            MainPage = new AppShell();
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/MauiProgram.cs:
﻿namespace SpreadsheetMaui
{
    public static class MauiProgram
    {
        public static MauiApp CreateMauiApp()
        {
            var builder = MauiApp.CreateBuilder();
            builder
                .UseMauiApp<App>()
                .ConfigureFonts(fonts =>
                {
                    fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                    fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
                });

            return builder.Build();
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/AppShell.xaml.cs:
﻿namespace SpreadsheetMaui
{
    public partial class AppShell : Shell
    {
        public AppShell()
        {
            InitializeComponent();
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/MainPage.xaml.cs:
﻿using GemBox.Spreadsheet;

namespace SpreadsheetMaui
{
    public partial class MainPage : ContentPage
    {
        static MainPage()
        {
            SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        }

        public MainPage()
        {
            InitializeComponent();
        }

        private async Task<string> CreateWorkbookAsync()
        {
            var workbook = new ExcelFile();
            var worksheet = workbook.Worksheets.Add("Sheet1");

            foreach (var cell in table.Root[0].Cast<EntryCell>())
                worksheet.Cells[cell.Label].Value = cell.Text;

            worksheet.Columns["A"].AutoFit();

            using var stream = new MemoryStream();
            using (var imageStream = await FileSystem.OpenAppPackageFileAsync("dices.png"))
                await imageStream.CopyToAsync(stream);
            worksheet.Pictures.Add(stream, ExcelPictureFormat.Png, "C1", "E5");

            var filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Example.pdf");

            await Task.Run(() => workbook.Save(filePath));

            return filePath;
        }

        private async void Button_Clicked(object sender, EventArgs e)
        {
            button.IsEnabled = false;
            activity.IsRunning = true;

            try
            {
                var filePath = await CreateWorkbookAsync();
                await Launcher.OpenAsync(new OpenFileRequest(Path.GetFileName(filePath), new ReadOnlyFile(filePath)));
            }
            catch (Exception ex)
            {
                await DisplayAlert("Error", ex.Message, "Close");
            }

            activity.IsRunning = false;
            button.IsEnabled = true;
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/iOS/AppDelegate.cs:
﻿using Foundation;

namespace SpreadsheetMaui
{
    [Register("AppDelegate")]
    public class AppDelegate : MauiUIApplicationDelegate
    {
        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/iOS/Program.cs:
﻿using ObjCRuntime;
using UIKit;

namespace SpreadsheetMaui
{
    public class Program
    {
        // This is the main entry point of the application.
        static void Main(string[] args)
        {
            // if you want to use a different Application Delegate class from "AppDelegate"
            // you can specify it here.
            UIApplication.Main(args, null, typeof(AppDelegate));
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/MacCatalyst/AppDelegate.cs:
﻿using Foundation;

namespace SpreadsheetMaui
{
    [Register("AppDelegate")]
    public class AppDelegate : MauiUIApplicationDelegate
    {
        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/MacCatalyst/Program.cs:
﻿using ObjCRuntime;
using UIKit;

namespace SpreadsheetMaui
{
    public class Program
    {
        // This is the main entry point of the application.
        static void Main(string[] args)
        {
            // if you want to use a different Application Delegate class from "AppDelegate"
            // you can specify it here.
            UIApplication.Main(args, null, typeof(AppDelegate));
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/Tizen/Main.cs:
using Microsoft.Maui;
using Microsoft.Maui.Hosting;
using System;

namespace SpreadsheetMaui
{
    internal class Program : MauiApplication
    {
        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();

        static void Main(string[] args)
        {
            var app = new Program();
            app.Run(args);
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/Android/MainApplication.cs:
﻿using Android.App;
using Android.Runtime;

[assembly: UsesPermission(Android.Manifest.Permission.ReadExternalStorage)]
namespace SpreadsheetMaui
{
    [Application]
    public class MainApplication : MauiApplication
    {
        public MainApplication(IntPtr handle, JniHandleOwnership ownership)
            : base(handle, ownership)
        {
        }

        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/Android/MainActivity.cs:
﻿using Android.App;
using Android.Content.PM;
using Android.OS;

namespace SpreadsheetMaui
{
    [Activity(Theme = "@style/Maui.SplashTheme", MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation | ConfigChanges.UiMode | ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize | ConfigChanges.Density)]
    public class MainActivity : MauiAppCompatActivity
    {
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/Windows/App.xaml.cs:
﻿using Microsoft.UI.Xaml;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace SpreadsheetMaui.WinUI
{
    /// <summary>
    /// Provides application-specific behavior to supplement the default Application class.
    /// </summary>
    public partial class App : MauiWinUIApplication
    {
        /// <summary>
        /// Initializes the singleton application object.  This is the first line of authored code
        /// executed, and as such is the logical equivalent of main() or WinMain().
        /// </summary>
        public App()
        {
            this.InitializeComponent();
        }

        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Linux_macOS/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        ExcelFile workbook = new ExcelFile();
        ExcelWorksheet worksheet = workbook.Worksheets.Add("Sheet1");
        ExcelCell cell = worksheet.Cells["A1"];

        cell.Value = "Hello World!";

        workbook.Save("HelloWorld.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Blazor/Server App/Program.cs:
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();

app.UseStaticFiles();

app.UseRouting();

app.MapBlazorHub();

app.MapFallbackToPage("/_Host");

app.Run();

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Blazor/Server App/Data/ReportModel.cs:
using System.Collections.Generic;
using GemBox.Spreadsheet;

namespace BlazorServerApp.Data
{
    public class ReportModel
    {
        public IList<ReportItemModel> Items { get; } = new List<ReportItemModel>()
        {
            new ReportItemModel() { Id = 100, Name = "John Doe", Salary = 3600 },
            new ReportItemModel() { Id = 101, Name = "Jane Doe", Salary = 7200 },
            new ReportItemModel() { Id = 102, Name = "Fred Nurk", Salary = 2580 },
            new ReportItemModel() { Id = 103, Name = "Hans Meier", Salary = 3200 },
            new ReportItemModel() { Id = 104, Name = "Ivan Horvat", Salary = 4100 },
            new ReportItemModel() { Id = 105, Name = "Jean Dupont", Salary = 6850 },
            new ReportItemModel() { Id = 106, Name = "Mario Rossi", Salary = 4400 }
        };
        public string Format { get; set; } = "XLSX";
        public SaveOptions Options => this.FormatMappingDictionary[this.Format];
        public IDictionary<string, SaveOptions> FormatMappingDictionary => new Dictionary<string, SaveOptions>()
        {
            ["XLSX"] = new XlsxSaveOptions(),
            ["XLS"] = new XlsSaveOptions(),
            ["ODS"] = new OdsSaveOptions(),
            ["PDF"] = new PdfSaveOptions(),
            ["HTML"] = new HtmlSaveOptions() { EmbedImages = true },
            ["MHTML"] = new HtmlSaveOptions() { HtmlType = HtmlType.Mhtml },
            ["CSV"] = new CsvSaveOptions(CsvType.CommaDelimited),
            ["TXT"] = new CsvSaveOptions(CsvType.TabDelimited),
            ["XPS"] = new XpsSaveOptions(),
            ["PNG"] = new ImageSaveOptions(ImageSaveFormat.Png),
            ["JPG"] = new ImageSaveOptions(ImageSaveFormat.Jpeg),
            ["BMP"] = new ImageSaveOptions(ImageSaveFormat.Bmp),
            ["GIF"] = new ImageSaveOptions(ImageSaveFormat.Gif),
            ["TIF"] = new ImageSaveOptions(ImageSaveFormat.Tiff)
        };
    }

    public class ReportItemModel
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public int Salary { get; set; }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Blazor/Server App/Pages/Error.cshtml.cs:
﻿using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using System.Diagnostics;

namespace BlazorServerApp.Pages
{
    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    [IgnoreAntiforgeryToken]
    public class ErrorModel : PageModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

        private readonly ILogger<ErrorModel> _logger;

        public ErrorModel(ILogger<ErrorModel> logger)
        {
            _logger = logger;
        }

        public void OnGet()
        {
            RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Blazor/WebAssembly App/Program.cs:
using BlazorWebAssemblyApp;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Net.Http;

var builder = WebAssemblyHostBuilder.CreateDefault(args);
builder.RootComponents.Add<App>("#app");
builder.RootComponents.Add<HeadOutlet>("head::after");

builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });

await builder.Build().RunAsync();

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Blazor/WebAssembly App/Data/ReportModel.cs:
using System.Collections.Generic;
using GemBox.Spreadsheet;

namespace BlazorWebAssemblyApp.Data
{
    public class ReportModel
    {
        public IList<ReportItemModel> Items { get; } = new List<ReportItemModel>()
        {
            new ReportItemModel() { Id = 100, Name = "John Doe", Salary = 3600 },
            new ReportItemModel() { Id = 101, Name = "Jane Doe", Salary = 7200 },
            new ReportItemModel() { Id = 102, Name = "Fred Nurk", Salary = 2580 },
            new ReportItemModel() { Id = 103, Name = "Hans Meier", Salary = 3200 },
            new ReportItemModel() { Id = 104, Name = "Ivan Horvat", Salary = 4100 },
            new ReportItemModel() { Id = 105, Name = "Jean Dupont", Salary = 6850 },
            new ReportItemModel() { Id = 106, Name = "Mario Rossi", Salary = 4400 }
        };
        public string Format { get; set; } = "PDF";
        public SaveOptions Options => this.FormatMappingDictionary[this.Format];
        public IDictionary<string, SaveOptions> FormatMappingDictionary => new Dictionary<string, SaveOptions>()
        {
            ["XLSX"] = new XlsxSaveOptions(),
            ["XLS"] = new XlsSaveOptions(),
            ["ODS"] = new OdsSaveOptions(),
            ["PDF"] = new PdfSaveOptions(),
            ["HTML"] = new HtmlSaveOptions() { EmbedImages = true },
            ["MHTML"] = new HtmlSaveOptions() { HtmlType = HtmlType.Mhtml },
            ["CSV"] = new CsvSaveOptions(CsvType.CommaDelimited),
            ["TXT"] = new CsvSaveOptions(CsvType.TabDelimited)
        };
    }

    public class ReportItemModel
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public int Salary { get; set; }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/GridView in ASP.NET Web Forms/Default.aspx.cs:
using System;
using System.Data;
using System.IO;
using System.Web.UI;
using System.Web.UI.WebControls;
using GemBox.Spreadsheet;

namespace MediumTrust
{
    public partial class _Default : Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

            // To be able to save ExcelFile to PDF format in Medium Trust environment,
            // you need to specify a font files location that is under your ASP.NET application's control.
            FontSettings.FontsBaseDirectory = Server.MapPath("Fonts/");

            if (!Page.IsPostBack)
            {
                var people = new DataTable();
                people.Columns.Add("ID", typeof(int));
                people.Columns.Add("FirstName", typeof(string));
                people.Columns.Add("LastName", typeof(string));

                Session["people"] = people;

                this.LoadDataFromFile(Request.PhysicalApplicationPath + "InputData.xlsx");
                this.SetDataBinding();
            }
        }

        /// <summary>
        /// Export GridView data to Excel file.
        /// </summary>
        protected void ExportData_Click(object sender, EventArgs e)
        {
            var people = (DataTable)Session["people"];

            // Create Excel file.
            var workbook = new ExcelFile();
            var worksheet = workbook.Worksheets.Add("DataSheet");

            // Export DataTable that's used as GridView data source into Excel sheet.
            worksheet.InsertDataTable(people, new InsertDataTableOptions("A1") { ColumnHeaders = true });

            // Stream Excel file to client's browser.
            workbook.Save(this.Response, "Report." + this.RadioButtonList1.SelectedValue);
        }

        /// <summary>
        /// Export GridView data and formatting to Excel file.
        /// </summary>
        protected void ExportDataAndFormatting_Click(object sender, EventArgs e)
        {
            var stringWriter = new StringWriter();
            var htmlWriter = new HtmlTextWriter(stringWriter);
            
            // Export GridView control as HTML content.
            this.GridView1.RenderControl(htmlWriter);

            var htmlOptions = LoadOptions.HtmlDefault;
            var htmlData = htmlOptions.Encoding.GetBytes(stringWriter.ToString());

            using (var htmlStream = new MemoryStream(htmlData))
            {
                // Load HTML into Excel file.
                var workbook = ExcelFile.Load(htmlStream, htmlOptions);

                // Rename Excel sheet.
                var worksheet = workbook.Worksheets[0];
                worksheet.Name = "StyledDataSheet";

                // Delete Excel column that has Delete and Edit buttons.
                worksheet.Columns.Remove(0);

                // Stream Excel file to client's browser.
                workbook.Save(this.Response, "Styled Report." + this.RadioButtonList1.SelectedValue);
            }
        }

        // Override verification to successfully call GridView1.RenderControl method.
        public override void VerifyRenderingInServerForm(Control control)
        { }

        private void LoadDataFromFile(string fileName)
        {
            var people = (DataTable)Session["people"];

            // Load Excel file.
            var workbook = ExcelFile.Load(fileName);
            var worksheet = workbook.Worksheets[0];

            // Import Excel data into DataTable that's used as GridView data source.
            worksheet.ExtractToDataTable(people, new ExtractToDataTableOptions("A1", worksheet.Rows.Count));
        }

        private void SetDataBinding()
        {
            var people = (DataTable)Session["people"];
            var peopleDataView = people.DefaultView;
            peopleDataView.AllowDelete = true;

            this.GridView1.DataSource = peopleDataView;
            this.GridView1.DataBind();
        }

        protected void GridView1_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            var people = (DataTable)Session["people"];
            people.Rows[e.RowIndex].Delete();
            this.SetDataBinding();
        }

        protected void GridView1_RowUpdating(object sender, GridViewUpdateEventArgs e)
        {
            var people = (DataTable)Session["people"];

            for (int i = 1; i <= people.Columns.Count; i++)
            {
                var editTextBox = this.GridView1.Rows[e.RowIndex].Cells[i].Controls[0] as TextBox;
                if (editTextBox != null)
                    people.Rows[e.RowIndex][i - 1] = editTextBox.Text;
            }

            this.GridView1.EditIndex = -1;
            this.SetDataBinding();
        }

        protected void GridView1_RowEditing(object sender, GridViewEditEventArgs e)
        {
            this.GridView1.EditIndex = e.NewEditIndex;
            this.SetDataBinding();
        }

        protected void GridView1_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        {
            this.GridView1.EditIndex = -1;
            this.SetDataBinding();
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/GridView in ASP.NET Web Forms/Default.aspx.designer.cs:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediumTrust
{


    public partial class _Default
    {

        /// <summary>
        /// form1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm form1;

        /// <summary>
        /// GridView1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.GridView GridView1;

        /// <summary>
        /// RadioButtonList1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RadioButtonList RadioButtonList1;

        /// <summary>
        /// ExportData control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button ExportData;

        /// <summary>
        /// ExportDataAndFormatting control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button ExportDataAndFormatting;
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/GridView in ASP.NET Web Forms/Properties/AssemblyInfo.cs:
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("MediumTrust")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("GemBox Ltd.")]
[assembly: AssemblyProduct("MediumTrust")]
[assembly: AssemblyCopyright("Copyright © GemBox Ltd.")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("46ddde6e-a2a6-4769-bc35-36fab66ffdd7")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Export in WPF/App.xaml.cs:
using System.Windows;

partial class App : Application
{
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Export in WPF/MainWindow.xaml.cs:
using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Xps.Packaging;
using GemBox.Spreadsheet;
using Microsoft.Win32;

partial class MainWindow : Window
{
    private ExcelFile workbook;
    private XpsDocument xpsDocument;
    private ImageSource imageSource;

    private Action updateSourceAction;

    public MainWindow()
    {
        this.InitializeComponent();

        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        this.updateSourceAction = this.SetImageSource;

        this.InitExcelFile();
        this.updateSourceAction();
    }

    private void InitExcelFile()
    {
        this.workbook = new ExcelFile();
        var worksheet = this.workbook.Worksheets.Add("Sheet1");

        worksheet.Cells[0, 0].Value = "English:";
        worksheet.Cells[0, 1].Value = "Hello";

        worksheet.Cells[1, 0].Value = "Russian:";
        worksheet.Cells[1, 1].Value = new string(new char[] { '\u0417', '\u0434', '\u0440', '\u0430', '\u0432', '\u0441', '\u0442', '\u0432', '\u0443', '\u0439', '\u0442', '\u0435' });

        worksheet.Cells[2, 0].Value = "Chinese:";
        worksheet.Cells[2, 1].Value = new string(new char[] { '\u4f60', '\u597d' });

        worksheet.Cells[4, 0].Value = "In order to see Russian and Chinese characters you need to have appropriate fonts on your PC.";
        worksheet.Cells.GetSubrangeAbsolute(4, 0, 4, 7).Merged = true;

        worksheet.HeadersFooters.DefaultPage.Header.CenterSection.Content = "Export To ImageSource / Image Control Example";

        worksheet.PrintOptions.PrintGridlines = true;
    }

    private void SetImageSource()
    {
        if (this.imageSource == null)
            this.imageSource = this.workbook.ConvertToImageSource(SaveOptions.ImageDefault);

        this.DocumentViewer.Document = null;
        this.ImageControl.Source = this.imageSource;

        this.DocumentViewer.Visibility = Visibility.Collapsed;
        this.ImageScrollViewer.Visibility = Visibility.Visible;
    }

    private void SetDocumentViewerSource()
    {
        // XpsDocument needs to stay referenced so that DocumentViewer can access additional required resources.
        // Otherwise, GC will collect/dispose XpsDocument and DocumentViewer will not work.
        if (this.xpsDocument == null)
            this.xpsDocument = this.workbook.ConvertToXpsDocument(SaveOptions.XpsDefault);

        this.ImageControl.Source = null;
        this.DocumentViewer.Document = this.xpsDocument.GetFixedDocumentSequence();

        this.ImageScrollViewer.Visibility = Visibility.Collapsed;
        this.DocumentViewer.Visibility = Visibility.Visible;
    }

    private void BtnOpenFile_Click(object sender, RoutedEventArgs e)
    {
        var openFileDialog = new OpenFileDialog
        {
            Filter = "Excel Files|*.xls;*.xlsx;*.xlsm"
        };
        if (openFileDialog.ShowDialog() != true)
            return;

        this.workbook = ExcelFile.Load(openFileDialog.FileName);
        this.xpsDocument = null;
        this.imageSource = null;
        this.updateSourceAction();
    }

    private void BtnShowAsImage_Click(object sender, RoutedEventArgs e)
    {
        this.updateSourceAction = this.SetImageSource;
        this.updateSourceAction();
    }

    private void BtnShowAsDocument_Click(object sender, RoutedEventArgs e)
    {
        this.updateSourceAction = this.SetDocumentViewerSource;
        this.updateSourceAction();
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Export in WPF/Properties/AssemblyInfo.cs:
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("WpfExport")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("GemBox Ltd.")]
[assembly: AssemblyProduct("WpfExport")]
[assembly: AssemblyCopyright("Copyright © GemBox Ltd.")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

//In order to begin building localizable applications, set 
//<UICulture>CultureYouAreCodingWith</UICulture> in your .csproj file
//inside a <PropertyGroup>.  For example, if you are using US english
//in your source files, set the <UICulture> to en-US.  Then uncomment
//the NeutralResourceLanguage attribute below.  Update the "en-US" in
//the line below to match the UICulture setting in the project file.

//[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.Satellite)]


[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
    //(used if a resource is not found in the page, 
    // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
    //(used if a resource is not found in the page, 
    // app, or any theme specific resource dictionaries)
)]


// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Reading/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
        Example3();
    }

    static void Example1()
    {
        // Load Excel workbook from file's path.
        ExcelFile workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        // Iterate through all worksheets in a workbook.
        foreach (ExcelWorksheet worksheet in workbook.Worksheets)
        {
            // Display sheet's name.
            Console.WriteLine("{1} {0} {1}\n", worksheet.Name, new string('#', 30));

            // Iterate through all rows in a worksheet.
            foreach (ExcelRow row in worksheet.Rows)
            {
                // Iterate through all allocated cells in a row.
                foreach (ExcelCell cell in row.AllocatedCells)
                {
                    // Read cell's data.
                    string value = cell.Value?.ToString() ?? "EMPTY";

                    // For merged cells, read only the first cell's data.
                    if (cell.MergedRange != null && cell.MergedRange[0] != cell)
                        value = "MERGED";

                    // Display cell's value and type.
                    value = value.Length > 15 ? value.Remove(15) + "…" : value;
                    Console.Write($"{value} [{cell.ValueType}]".PadRight(30));
                }

                Console.WriteLine();
            }
        }
    }

    static void Example2()
    {
        ExcelFile workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        for (int sheetIndex = 0; sheetIndex < workbook.Worksheets.Count; sheetIndex++)
        {
            // Get Excel worksheet using zero-based index.
            ExcelWorksheet worksheet = workbook.Worksheets[sheetIndex];
            Console.WriteLine($"Sheet name: \"{worksheet.Name}\"");
            Console.WriteLine($"Sheet index: {worksheet.Index}\n");

            for (int rowIndex = 0; rowIndex < worksheet.Rows.Count; rowIndex++)
            {
                // Get Excel row using zero-based index.
                ExcelRow row = worksheet.Rows[rowIndex];
                Console.WriteLine($"Row name: \"{row.Name}\"");
                Console.WriteLine($"Row index: {row.Index}");

                Console.Write("Cell names:");
                for (int columnIndex = 0; columnIndex < row.AllocatedCells.Count; columnIndex++)
                {
                    // Get Excel cell using zero-based index.
                    ExcelCell cell = row.Cells[columnIndex];
                    Console.Write($" \"{cell.Name}\",");
                }
                Console.WriteLine("\n");
            }
        }
    }

    static void Example3()
    {
        ExcelFile workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        foreach (ExcelWorksheet worksheet in workbook.Worksheets)
        {
            CellRangeEnumerator enumerator = worksheet.Cells.GetReadEnumerator();
            while (enumerator.MoveNext())
            {
                ExcelCell cell = enumerator.Current;
                Console.WriteLine($"Cell \"{cell.Name}\" [{cell.Row.Index}, {cell.Column.Index}]: {cell.Value}");
            }
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Getting Started/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        ExcelFile workbook = new ExcelFile();
        ExcelWorksheet worksheet = workbook.Worksheets.Add("Sheet1");
        ExcelCell cell = worksheet.Cells["A1"];

        cell.Value = "Hello World!";

        workbook.Save("HelloWorld.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Preservation/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // Load Excel workbook, preservation feature is enabled by default.
        var workbook = ExcelFile.Load("Preservation.xlsx");
        var worksheet = workbook.Worksheets[0];

        // Modify the worksheet.
        worksheet.Cells["C6"].Value = 8500;
        worksheet.Cells["C7"].Value = 10000;

        // Save Excel worksheet to an output file of the same format together with
        // preserved information (unsupported features) from the input file.
        workbook.Save("PreservedOutput.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Printing/Print in Console/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // Load Excel workbook from file's path.
        ExcelFile workbook = ExcelFile.Load("CombinedTemplate.xlsx");

        // Set sheets print options.
        foreach (ExcelWorksheet worksheet in workbook.Worksheets)
        {
            ExcelPrintOptions sheetPrintOptions = worksheet.PrintOptions;

            sheetPrintOptions.Portrait = false;
            sheetPrintOptions.HorizontalCentered = true;
            sheetPrintOptions.VerticalCentered = true;

            sheetPrintOptions.PrintHeadings = true;
            sheetPrintOptions.PrintGridlines = true;
        }

        // Create spreadsheet's print options. 
        PrintOptions printOptions = new PrintOptions();
        printOptions.SelectionType = SelectionType.EntireFile;

        // Print Excel workbook to default printer (e.g. 'Microsoft Print to Pdf').
        string printerName = null;
        workbook.Print(printerName, printOptions);
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Printing/Print in WinForms/Form1.cs:
﻿using System;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;
using System.Windows.Forms;
using GemBox.Spreadsheet;

public partial class Form1 : Form
{
    private ExcelFile workbook;

    public Form1()
    {
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        InitializeComponent();
    }

    private void LoadFileMenuItem_Click(object sender, EventArgs e)
    {
        OpenFileDialog openFileDialog = new OpenFileDialog();
        openFileDialog.Filter =
            "XLSX files (*.xlsx, *.xltx, *.xlsm, *.xltm)|*.xlsx;*.xltx;*.xlsm;*.xltm" +
            "|XLS files (*.xls, *.xlt)|*.xls;*.xlt" +
            "|ODS files (*.ods, *.ots)|*.ods;*.ots" +
            "|CSV files (*.csv, *.tsv)|*.csv;*.tsv" +
            "|HTML files (*.html, *.htm)|*.html;*.htm";

        if (openFileDialog.ShowDialog() == DialogResult.OK)
        {
            this.workbook = ExcelFile.Load(openFileDialog.FileName);
            this.ShowPrintPreview();
        }
    }

    private void PrintFileMenuItem_Click(object sender, EventArgs e)
    {
        if (this.workbook == null)
            return;

        PrintDialog printDialog = new PrintDialog() { AllowSomePages = true };
        if (printDialog.ShowDialog() == DialogResult.OK)
        {
            PrinterSettings printerSettings = printDialog.PrinterSettings;
            PrintOptions printOptions = new PrintOptions() { SelectionType = SelectionType.EntireFile };

            // Set PrintOptions properties based on PrinterSettings properties.
            printOptions.CopyCount = printerSettings.Copies;
            printOptions.FromPage = printerSettings.FromPage == 0 ? 0 : printerSettings.FromPage - 1;
            printOptions.ToPage = printerSettings.ToPage == 0 ? int.MaxValue : printerSettings.ToPage - 1;

            this.workbook.Print(printerSettings.PrinterName, printOptions);
        }
    }

    private void ShowPrintPreview()
    {
        // Create image for each Excel workbook's page.
        Image[] images = this.CreatePrintPreviewImages();
        int imageIndex = 0;

        // Draw each page's image on PrintDocument for print preview.
        var printDocument = new PrintDocument();
        printDocument.PrintPage += (sender, e) =>
        {
            using (Image image = images[imageIndex])
            {
                var graphics = e.Graphics;
                var region = graphics.VisibleClipBounds;

                // Rotate image if it has landscape orientation.
                if (image.Width > image.Height)
                    image.RotateFlip(RotateFlipType.Rotate270FlipNone);

                graphics.DrawImage(image, 0, 0, region.Width, region.Height);
            }

            ++imageIndex;
            e.HasMorePages = imageIndex < images.Length;
        };

        this.PageUpDown.Value = 1;
        this.PageUpDown.Maximum = images.Length;
        this.PrintPreviewControl.Document = printDocument;
    }

    private Image[] CreatePrintPreviewImages()
    {
        var paginatorOptions = new PaginatorOptions { SelectionType = SelectionType.EntireFile };
        var pages = this.workbook.GetPaginator(paginatorOptions).Pages;

        var images = new Image[pages.Count];
        var imageOptions = new ImageSaveOptions();

        for (int pageIndex = 0; pageIndex < pages.Count; ++pageIndex)
        {
            var imageStream = new MemoryStream();
            pages[pageIndex].Save(imageStream, imageOptions);
            images[pageIndex] = Image.FromStream(imageStream);
        }

        return images;
    }

    private void PageUpDown_ValueChanged(object sender, EventArgs e)
    {
        this.PrintPreviewControl.StartPage = (int)this.PageUpDown.Value - 1;
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Printing/Print in WinForms/Form1.Designer.cs:
﻿partial class Form1
{
    /// <summary>
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary>
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
        if (disposing && (components != null))
        {
            components.Dispose();
        }
        base.Dispose(disposing);
    }

    #region Windows Form Designer generated code

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
            this.MenuStrip = new System.Windows.Forms.MenuStrip();
            this.LoadFileMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.PrintFileMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.PrintPreviewControl = new System.Windows.Forms.PrintPreviewControl();
            this.PageLb = new System.Windows.Forms.Label();
            this.PageUpDown = new System.Windows.Forms.NumericUpDown();
            this.MenuStrip.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.PageUpDown)).BeginInit();
            this.SuspendLayout();
            // 
            // MenuStrip
            // 
            this.MenuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.LoadFileMenuItem,
            this.PrintFileMenuItem});
            this.MenuStrip.Location = new System.Drawing.Point(0, 0);
            this.MenuStrip.Name = "MenuStrip";
            this.MenuStrip.RenderMode = System.Windows.Forms.ToolStripRenderMode.System;
            this.MenuStrip.Size = new System.Drawing.Size(784, 24);
            this.MenuStrip.TabIndex = 0;
            this.MenuStrip.Text = "MenuStrip";
            // 
            // LoadFileMenuItem
            // 
            this.LoadFileMenuItem.Name = "LoadFileMenuItem";
            this.LoadFileMenuItem.Size = new System.Drawing.Size(45, 20);
            this.LoadFileMenuItem.Text = "Load";
            this.LoadFileMenuItem.Click += new System.EventHandler(this.LoadFileMenuItem_Click);
            // 
            // PrintFileMenuItem
            // 
            this.PrintFileMenuItem.Name = "PrintFileMenuItem";
            this.PrintFileMenuItem.Size = new System.Drawing.Size(44, 20);
            this.PrintFileMenuItem.Text = "Print";
            this.PrintFileMenuItem.Click += new System.EventHandler(this.PrintFileMenuItem_Click);
            // 
            // PrintPreviewControl
            // 
            this.PrintPreviewControl.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.PrintPreviewControl.Location = new System.Drawing.Point(0, 53);
            this.PrintPreviewControl.Name = "PrintPreviewControl";
            this.PrintPreviewControl.Size = new System.Drawing.Size(784, 358);
            this.PrintPreviewControl.TabIndex = 1;
            // 
            // PageLb
            // 
            this.PageLb.AutoSize = true;
            this.PageLb.Location = new System.Drawing.Point(12, 33);
            this.PageLb.Name = "PageLb";
            this.PageLb.Size = new System.Drawing.Size(35, 13);
            this.PageLb.TabIndex = 2;
            this.PageLb.Text = "Page:";
            // 
            // PageUpDown
            // 
            this.PageUpDown.Location = new System.Drawing.Point(53, 29);
            this.PageUpDown.Minimum = new decimal(new int[] {
            1,
            0,
            0,
            0});
            this.PageUpDown.Name = "PageUpDown";
            this.PageUpDown.Size = new System.Drawing.Size(40, 20);
            this.PageUpDown.TabIndex = 3;
            this.PageUpDown.Value = new decimal(new int[] {
            1,
            0,
            0,
            0});
            this.PageUpDown.ValueChanged += new System.EventHandler(this.PageUpDown_ValueChanged);
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(784, 411);
            this.Controls.Add(this.PageUpDown);
            this.Controls.Add(this.PageLb);
            this.Controls.Add(this.PrintPreviewControl);
            this.Controls.Add(this.MenuStrip);
            this.Name = "Form1";
            this.Text = "Printing in Windows Forms application";
            this.MenuStrip.ResumeLayout(false);
            this.MenuStrip.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.PageUpDown)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

    }

    #endregion

    private System.Windows.Forms.MenuStrip MenuStrip;
    private System.Windows.Forms.ToolStripMenuItem LoadFileMenuItem;
    private System.Windows.Forms.ToolStripMenuItem PrintFileMenuItem;
    private System.Windows.Forms.PrintPreviewControl PrintPreviewControl;
    private System.Windows.Forms.Label PageLb;
    private System.Windows.Forms.NumericUpDown PageUpDown;
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Printing/Print in WinForms/Program.cs:
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace PrintInWinForms
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Printing/Print in WPF/App.xaml.cs:
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Windows;

namespace PrintInWpfCs
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Printing/Print in WPF/MainWindow.xaml.cs:
﻿using System.Windows;
using System.Windows.Controls;
using System.Windows.Xps.Packaging;
using Microsoft.Win32;
using GemBox.Spreadsheet;

public partial class MainWindow : Window
{
    private ExcelFile workbook;

    public MainWindow()
    {
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        InitializeComponent();
    }

    private void LoadFileBtn_Click(object sender, RoutedEventArgs e)
    {
        OpenFileDialog openFileDialog = new OpenFileDialog();
        openFileDialog.Filter =
            "XLSX files (*.xlsx, *.xltx, *.xlsm, *.xltm)|*.xlsx;*.xltx;*.xlsm;*.xltm" +
            "|XLS files (*.xls, *.xlt)|*.xls;*.xlt" +
            "|ODS files (*.ods, *.ots)|*.ods;*.ots" +
            "|CSV files (*.csv, *.tsv)|*.csv;*.tsv" +
            "|HTML files (*.html, *.htm)|*.html;*.htm";

        if (openFileDialog.ShowDialog() == true)
        {
            this.workbook = ExcelFile.Load(openFileDialog.FileName);
            this.ShowPrintPreview();
        }
    }

    private void PrintFileBtn_Click(object sender, RoutedEventArgs e)
    {
        if (this.workbook == null)
            return;

        PrintDialog printDialog = new PrintDialog() { UserPageRangeEnabled = true };
        if (printDialog.ShowDialog() == true)
        {
            PrintOptions printOptions = new PrintOptions(printDialog.PrintTicket.GetXmlStream())
            {
                SelectionType = SelectionType.EntireFile
            };

            printOptions.FromPage = printDialog.PageRange.PageFrom - 1;
            printOptions.ToPage = printDialog.PageRange.PageTo == 0 ? int.MaxValue : printDialog.PageRange.PageTo - 1;

            this.workbook.Print(printDialog.PrintQueue.FullName, printOptions);
        }
    }

    private void ShowPrintPreview()
    {
        XpsDocument xpsDocument = this.workbook.ConvertToXpsDocument(
            new XpsSaveOptions() { SelectionType = SelectionType.EntireFile });

        // Note, XpsDocument must stay referenced so that DocumentViewer can access additional resources from it.
        // Otherwise, GC will collect/dispose XpsDocument and DocumentViewer will no longer work.
        this.DocViewer.Tag = xpsDocument;
        this.DocViewer.Document = xpsDocument.GetFixedDocumentSequence();
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Printing/Print in WPF/AssemblyInfo.cs:
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
                                     //(used if a resource is not found in the page,
                                     // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
                                              //(used if a resource is not found in the page,
                                              // app, or any theme specific resource dictionaries)
)]

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Data Types/Program.cs:
using System;
using System.IO;
using System.Text;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Types");

        worksheet.Rows[0].Style = workbook.Styles[BuiltInCellStyleName.Heading1];
        worksheet.Columns[0].Width = 25 * 256;
        worksheet.Columns[1].Width = 25 * 256;
        worksheet.Columns[2].Width = 25 * 256;

        worksheet.Cells[0, 0].Value = "Value";
        worksheet.Cells[0, 1].Value = ".NET Value Type";
        worksheet.Cells[0, 2].Value = "Cell Value Type";

        // Sample data values.
        object[] values =
        {
            DBNull.Value,
            byte.MaxValue,
            sbyte.MinValue,
            short.MinValue,
            ushort.MaxValue,
            1000,
            (uint)2000,
            long.MinValue,
            ulong.MaxValue,
            float.MaxValue,
            double.MaxValue,
            3000.45m,
            true,
            DateTime.Now,
            'a',
            "Sample text.",
            new StringBuilder("Sample text."),
        };

        // Write data and data type to Excel cells.
        for (int i = 0; i < values.Length; i++)
        {
            object value = values[i];

            worksheet.Cells[i + 1, 0].Value = value;
            worksheet.Cells[i + 1, 1].Value = value.GetType().ToString();
        }

        // Save to Excel file and load it back as ExcelFile object.
        using (var stream = new MemoryStream())
        {
            workbook.Save(stream, SaveOptions.XlsxDefault);
            workbook = ExcelFile.Load(stream, LoadOptions.XlsxDefault);
            worksheet = workbook.Worksheets[0];
        }

        // Write cell type to Excel cells.
        for (int i = 0; i < values.Length; i++)
            worksheet.Cells[i + 1, 2].Value = worksheet.Cells[i + 1, 0].ValueType.ToString();

        workbook.Save("Data Types.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Merged Cells/Program.cs:
using System.Linq;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Sheet1");

        // Get the cell range.
        var range = worksheet.Cells.GetSubrange("B2:E5");

        // Merge cells in the current range.
        range.Merged = true;

        // Set the value of the merged range.
        range.Value = "Merged";

        // Set the style of the merged range.
        range.Style.VerticalAlignment = VerticalAlignmentStyle.Center;

        // Set the style of the merged range using a cell within.
        worksheet.Cells["C3"].Style.Borders
            .SetBorders(MultipleBorders.All, SpreadsheetColor.FromName(ColorName.Red), LineStyle.Double);

        workbook.Save("Merged Cells.xlsx");
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("Merged Cells.xlsx");
        var worksheet = workbook.Worksheets[0];

        // Get the first merged range.
        var mergedRange = worksheet.Rows
            .SelectMany(row => row.AllocatedCells)
            .Select(cell => cell.MergedRange)
            .FirstOrDefault(range => range != null);

        if (mergedRange != null)
        {
            // Important, you cannot unmerge the ExcelCell.MergedRange property.
            // In other words, the following is not allowed:  mergedRange.Merged = false;

            // Instead, you need to retrieve the same CellRange from the ExcelWorksheet and then unmerge it.
            // This kind of implementation was chosen for performance reasons.
            worksheet.Cells.GetSubrange(mergedRange.Name).Merged = false;

            worksheet.Cells[mergedRange.StartPosition].Value = "Unmerged";
        }

        workbook.Save("Unmerged Cells.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Cell Referencing/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Referencing");

        // Referencing cells from sheet using cell names and indexes.
        worksheet.Cells["A1"].Value = "Cell A1.";
        worksheet.Cells[1, 0].Value = "Cell in 2nd row and 1st column [A2].";

        // Referencing cells from row using cell names and indexes.
        worksheet.Rows["4"].Cells["B"].Value = "Cell in row 4 and column B [B4].";
        worksheet.Rows[4].Cells[1].Value = "Cell in 5th row and 2nd column [B5].";

        // Referencing cells from column using cell names and indexes.
        worksheet.Columns["C"].Cells["7"].Value = "Cell in column C and row 7 [C7].";
        worksheet.Columns[2].Cells[7].Value = "Cell in 3rd column and 8th row [C8].";

        // Referencing cell range using A1 notation [G2:N12].
        var range = worksheet.Cells.GetSubrange("G2:N12");
        range[0].Value = $"From {range.StartPosition} to {range.EndPosition}";
        range[1, 0].Value = $"From ({range.FirstRowIndex},{range.FirstColumnIndex}) to ({range.LastRowIndex},{range.LastColumnIndex})";
        range.Style.Borders.SetBorders(MultipleBorders.Outside,
            SpreadsheetColor.FromName(ColorName.Red),
            LineStyle.Thick);

        // Referencing cell range using absolute position [I5:M11].
        range = range.GetSubrangeAbsolute(4, 8, 10, 12);
        range[0].Value = $"From {range.StartPosition} to {range.EndPosition}";
        range[1, 0].Value = $"From ({range.FirstRowIndex},{range.FirstColumnIndex}) to ({range.LastRowIndex},{range.LastColumnIndex})";
        range.Style.Borders.SetBorders(MultipleBorders.Outside,
            SpreadsheetColor.FromName(ColorName.Green),
            LineStyle.Medium);

        // Referencing cell range using relative position [K8:L10].
        range = range.GetSubrangeRelative(3, 2, 2, 2);
        range[0].Value = $"From {range.StartPosition} to {range.EndPosition}";
        range[1, 0].Value = $"From ({range.FirstRowIndex},{range.FirstColumnIndex}) to ({range.LastRowIndex},{range.LastColumnIndex})";
        range.Style.Borders.SetBorders(MultipleBorders.Outside,
            SpreadsheetColor.FromName(ColorName.Blue),
            LineStyle.Thin);

        workbook.Save("Cell Referencing.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Templates/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        int numberOfItems = 10;
        var startDate = DateTime.Today.AddDays(-numberOfItems);
        var endDate = DateTime.Today;

        // Load an Excel template.
        var workbook = ExcelFile.Load("Template.xlsx");

        // Get template sheet.
        var worksheet = workbook.Worksheets[0];

        // Find cells with placeholder text and set their values.
        int row, column;
        if (worksheet.Cells.FindText("[Company Name]", out row, out column))
            worksheet.Cells[row, column].Value = "ACME Corp";
        if (worksheet.Cells.FindText("[Company Address]", out row, out column))
            worksheet.Cells[row, column].Value = "240 Old Country Road, Springfield, IL";
        if (worksheet.Cells.FindText("[Start Date]", out row, out column))
            worksheet.Cells[row, column].Value = startDate;
        if (worksheet.Cells.FindText("[End Date]", out row, out column))
            worksheet.Cells[row, column].Value = endDate;

        // Copy template row.
        row = 17;
        worksheet.Rows.InsertCopy(row + 1, numberOfItems - 1, worksheet.Rows[row]);

        // Fill copied rows with sample data.
        var random = new Random();
        for (int i = 0; i < numberOfItems; i++)
        {
            var currentRow = worksheet.Rows[row + i];
            currentRow.Cells[1].SetValue(startDate.AddDays(i));
            currentRow.Cells[2].SetValue(random.Next(1, 12));
        }

        // Calculate formulas in a sheet.
        worksheet.Calculate();

        // Save the modified Excel template to output file.
        workbook.Save("Output.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Performance/Program.cs:
using System.Collections.Generic;
using System.IO;
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Engines;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Running;
using GemBox.Spreadsheet;

[SimpleJob(RuntimeMoniker.Net70)]
[SimpleJob(RuntimeMoniker.Net48)]
public class Program
{
    private ExcelFile workbook;
    private readonly Consumer consumer = new Consumer();

    public static void Main()
    {
        BenchmarkRunner.Run<Program>();
    }

    [GlobalSetup]
    public void SetLicense()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // If using Free version and example exceeds its limitations, use Trial or Time Limited version:
        // https://www.gemboxsoftware.com/spreadsheet/examples/free-trial-professional-modes/1001

        this.workbook = ExcelFile.Load("RandomSheets.xlsx");
    }

    [Benchmark]
    public ExcelFile Reading()
    {
        return ExcelFile.Load("RandomSheets.xlsx");
    }

    [Benchmark]
    public void Writing()
    {
        using (var stream = new MemoryStream())
            this.workbook.Save(stream, new XlsxSaveOptions());
    }

    [Benchmark]
    public void Iterating()
    {
        this.LoopThroughAllCells().Consume(this.consumer);
    }

    public IEnumerable<object> LoopThroughAllCells()
    {
        foreach (var worksheet in this.workbook.Worksheets)
            foreach (var row in worksheet.Rows)
                foreach (var cell in row.AllocatedCells)
                    yield return cell.Value;
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Formulas/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Formulas");

        worksheet.Rows[0].Style = workbook.Styles[BuiltInCellStyleName.Heading1];
        worksheet.Columns[0].Width = 9 * 256;
        worksheet.Columns[1].Width = 36 * 256;
        worksheet.Columns[2].Width = 18 * 256;

        worksheet.Cells[0, 0].Value = "Data";
        worksheet.Cells[0, 1].Value = "Formula";
        worksheet.Cells[0, 2].Value = "Result";

        // Add sample data values.
        worksheet.Cells["A2"].Value = 3;
        worksheet.Cells["A3"].Value = 4.1;
        worksheet.Cells["A4"].Value = 5.2;
        worksheet.Cells["A5"].Value = 6;
        worksheet.Cells["A6"].Value = 7;

        // Add named range.
        worksheet.NamedRanges.Add("MyRange1", worksheet.Cells.GetSubrange("A2:A6"));

        // Sample formulas.
        string[] formulas =
        {
            "=NOW()+123",
            "=MINUTE(0.5)-1343/35",
            "=HOUR(56)-23/35",
            "=YEAR(DATE(2020,1,1)) + 12",
            "=MONTH(3)-2342/235345",
            "=RAND()",
            "=TEXT(\"text\", \"$d\")",
            "=VAR(1,2)",
            "=MOD(1,2)",
            "=NOT(FALSE)",
            "=AND(TRUE)",
            "=TRUE()",
            "=VALUE(3)",
            "=LEN(\"hello\")",
            "=MID(\"hello\",1,1)",
            "=ROUND(1,2)",
            "=SIGN(-2)",
            "=INT(3)",
            "=ABS(-3)",
            "=LN(2)",
            "=EXP(4)",
            "=SQRT(2)",
            "=PI()",
            "=COS(4)",
            "=MAX(1,2)",
            "=MIN(1,2)",
            "=AVERAGE(1,2)",
            "=SUM(1,3)",
            "=IF(1,2,3)",
            "=COUNT(1,2,3)",
            "=SUBTOTAL(1,A2:A4)",                           // Function with cells range.
            "=SUM(MyRange1)",                               // Function with named range.
            "=COUNT(1,  ,  ,,,2, 23,,,,,, 34,,,54,,,,  ,)", // Function with miss argument.
            "=cOs( 1 )",                                    // Functions with different letters case.
            "=+++5",                                        // Unary operators.
            "=(1)-(2)+(3/2+34)/2+12232-32-4",               // Binary operators.
            "=TRUE",                                        // Operand tokens, bool.
            "=20",                                          // Operand tokens, int.
            "=2235.5132",                                   // Operand tokens, num.
            "=\"hello world!\"",                            // Operand tokens, str.
            "=#NULL!"                                       // Operand tokens, error.
        };

        // Write formulas to Excel cells.
        for (int i = 0; i < formulas.Length; i++)
        {
            string formula = formulas[i];
            worksheet.Cells[i + 1, 1].Value = formula;
            worksheet.Cells[i + 1, 2].Formula = formula;
        }

        workbook.Save("Formulas.xlsx");
    }

    static void Example2()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Formulas");

        worksheet.Cells["A1"].Value = 4;
        worksheet.Cells["A2"].Value = 9;
        worksheet.Cells["A3"].Value = 16;
        worksheet.Cells["A4"].Value = 25;
        worksheet.Cells["A5"].Value = 36;
            
        // Set dynamic array formula
        worksheet.Cells["B1"].SetDynamicArrayFormula("=SQRT(A1:A5)");
            
        // Set legacy array formula to C1:C5 range
        worksheet.Cells.GetSubrange("C1:C5").SetArrayFormula("=SQRT(A1:A5)");
            
        // Set dynamic array formula with a single result
        worksheet.Cells["D1"].SetDynamicArrayFormula("=SUM(SQRT(A1:A5))");
            
        // Set normal formula which will use intersection operator
        worksheet.Cells["E1"].Formula = "=SUM(SQRT(A1:A5))";
            
        worksheet.Calculate();
            
        workbook.Save("ArrayFormulas.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Writing/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        // Create new empty workbook.
        var workbook = new ExcelFile();

        // Add new sheet.
        var worksheet = workbook.Worksheets.Add("Skyscrapers");

        // Write title to Excel cell.
        worksheet.Cells["A1"].Value = "List of tallest buildings (2021):";

        // Tabular sample data for writing into an Excel file.
        var skyscrapers = new object[,]
        {
             { "Rank", "Building", "City", "Country", "Metric", "Imperial", "Floors", "Built (Year)" },
             { 1, "Burj Khalifa", "Dubai", "United Arab Emirates", 828, 2717, 163, 2010 },
             { 2, "Shanghai Tower", "Shanghai", "China", 632, 2073, 128, 2015 },
             { 3, "Abraj Al-Bait Clock Tower", "Mecca", "Saudi Arabia", 601, 1971, 120, 2012 },
             { 4, "Ping An Finance Centre", "Shenzhen", "China", 599, 1965, 115, 2017 },
             { 5, "Lotte World Tower", "Seoul", "South Korea", 554.5, 1819, 123, 2016 },
             { 6, "One World Trade Center", "New York City", "United States", 541.3, 1776, 104, 2014 },
             { 7, "Guangzhou CTF Finance Centre", "Guangzhou", "China", 530, 1739, 111, 2016 },
             { 7, "Tianjin CTF Finance Centre", "Tianjin", "China", 530, 1739, 98, 2019 },
             { 9, "China Zun", "Beijing", "China", 528, 1732, 108, 2018 },
             { 10, "Taipei 101", "Taipei", "Taiwan", 508, 1667, 101, 2004 },
             { 11, "Shanghai World Financial Center", "Shanghai", "China", 492, 1614, 101, 2008 },
             { 12, "International Commerce Centre", "Hong Kong", "China", 484, 1588, 118, 2010 },
             { 13, "Central Park Tower", "New York City", "United States", 472, 1550, 98, 2020 },
             { 14, "Lakhta Center", "St. Petersburg", "Russia", 462, 1516, 86, 2019 },
             { 15, "Landmark 81", "Ho Chi Minh City", "Vietnam", 461.2, 1513, 81, 2018 },
             { 16, "Changsha IFS Tower T1", "Changsha", "China", 452.1, 1483, 88, 2018 },
             { 17, "Petronas Tower 1", "Kuala Lumpur", "Malaysia", 451.9, 1483, 88, 1998 },
             { 17, "Petronas Tower 2", "Kuala Lumpur", "Malaysia", 451.9, 1483, 88, 1998 },
             { 19, "Zifeng Tower", "Nanjing", "China", 450, 1476, 89, 2010 },
             { 19, "Suzhou IFS", "Suzhou", "China", 450, 1476, 98, 2019 }
        };

        // Set row formatting.
        worksheet.Rows["1"].Style = workbook.Styles[BuiltInCellStyleName.Heading1];

        // Set columns width.
        worksheet.Columns["A"].SetWidth(8, LengthUnit.CharacterWidth);  // Rank
        worksheet.Columns["B"].SetWidth(30, LengthUnit.CharacterWidth); // Building
        worksheet.Columns["C"].SetWidth(16, LengthUnit.CharacterWidth); // City
        worksheet.Columns["D"].SetWidth(20, LengthUnit.CharacterWidth); // Country
        worksheet.Columns["E"].SetWidth(9, LengthUnit.CharacterWidth);  // Metric
        worksheet.Columns["F"].SetWidth(11, LengthUnit.CharacterWidth); // Imperial
        worksheet.Columns["G"].SetWidth(9, LengthUnit.CharacterWidth);  // Floors
        worksheet.Columns["H"].SetWidth(9, LengthUnit.CharacterWidth);  // Built (Year)
        worksheet.Columns["I"].SetWidth(4, LengthUnit.CharacterWidth);  // Top 10
        worksheet.Columns["J"].SetWidth(5, LengthUnit.CharacterWidth);  // Top 20

        // Write header data to Excel cells.
        for (int col = 0; col < skyscrapers.GetLength(1); col++)
            worksheet.Cells[3, col].Value = skyscrapers[0, col];
        worksheet.Cells["E3"].Value = "Height";

        worksheet.Cells.GetSubrange("A3:A4").Merged = true;  // Rank
        worksheet.Cells.GetSubrange("B3:B4").Merged = true;  // Building
        worksheet.Cells.GetSubrange("C3:C4").Merged = true;  // City
        worksheet.Cells.GetSubrange("D3:D4").Merged = true;  // Country
        worksheet.Cells.GetSubrange("E3:F3").Merged = true;  // Height
        worksheet.Cells.GetSubrange("G3:G4").Merged = true;  // Floors
        worksheet.Cells.GetSubrange("H3:H4").Merged = true;  // Built (Year)

        // Set header cells formatting.
        var style = new CellStyle();
        style.HorizontalAlignment = HorizontalAlignmentStyle.Center;
        style.VerticalAlignment = VerticalAlignmentStyle.Center;
        style.FillPattern.SetSolid(SpreadsheetColor.FromArgb(237, 125, 49));
        style.Font.Weight = ExcelFont.BoldWeight;
        style.Font.Color = SpreadsheetColor.FromName(ColorName.White);
        style.WrapText = true;
        style.Borders.SetBorders(MultipleBorders.Right | MultipleBorders.Top, SpreadsheetColor.FromName(ColorName.Black), LineStyle.Thin);
        worksheet.Cells.GetSubrange("A3:H4").Style = style;

        // Write "Top 10" cells.
        style = new CellStyle();
        style.HorizontalAlignment = HorizontalAlignmentStyle.Center;
        style.VerticalAlignment = VerticalAlignmentStyle.Center;
        style.Font.Weight = ExcelFont.BoldWeight;
        var mergedRange = worksheet.Cells.GetSubrange("I5:I14");
        mergedRange.Merged = true;
        mergedRange.Value = "T o p   1 0";
        style.Rotation = -90;
        style.FillPattern.SetSolid(SpreadsheetColor.FromArgb(198, 239, 206));
        mergedRange.Style = style;

        // Write "Top 20" cells.
        mergedRange = worksheet.Cells.GetSubrange("J5:J24");
        mergedRange.Merged = true;
        mergedRange.Value = "T o p   2 0";
        style.IsTextVertical = true;
        style.FillPattern.SetSolid(SpreadsheetColor.FromArgb(255, 235, 156));
        mergedRange.Style = style;
        mergedRange = worksheet.Cells.GetSubrange("I15:I24");
        mergedRange.Merged = true;
        mergedRange.Style = style;

        // Write sample data and formatting to Excel cells.
        for (int row = 0; row < skyscrapers.GetLength(0) - 1; row++)
        {
            for (int col = 0; col < skyscrapers.GetLength(1); col++)
            {
                var cell = worksheet.Cells[row + 4, col];
                cell.Value = skyscrapers[row + 1, col];

                cell.Style.Borders[IndividualBorder.Right].LineStyle = LineStyle.Thin;

                if (row % 2 == 0)
                    cell.Style.FillPattern.SetSolid(SpreadsheetColor.FromArgb(221, 235, 247));

                if (col == 0)
                    cell.Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;
                if (col > 3)
                    cell.Style.Font.Name = "Courier New";
                if (col == 4)
                    cell.Style.NumberFormat = "#\" m\"";
                if (col == 5)
                    cell.Style.NumberFormat = "#\" ft\"";
            }
        }

        worksheet.Cells.GetSubrange("A5", "J24").Style.Borders.SetBorders(
            MultipleBorders.Outside, SpreadsheetColor.FromName(ColorName.Black), LineStyle.Medium);
        worksheet.Cells.GetSubrange("A3", "H4").Style.Borders.SetBorders(
            MultipleBorders.Vertical | MultipleBorders.Top, SpreadsheetColor.FromName(ColorName.Black), LineStyle.Medium);
        worksheet.Cells.GetSubrange("A5", "I14").Style.Borders.SetBorders(
            MultipleBorders.Bottom | MultipleBorders.Right, SpreadsheetColor.FromName(ColorName.Black), LineStyle.Medium);

        worksheet.PrintOptions.FitWorksheetWidthToPages = 1;

        // Save workbook as an Excel file.
        workbook.Save("Writing1.xlsx");
    }

    static void Example2()
    {
        // Create new empty workbook.
        var workbook = new ExcelFile();

        // Add new sheet.
        var worksheet = workbook.Worksheets.Add("Sheet1");

        worksheet.Columns["B"].SetWidth(400, LengthUnit.Pixel);

        // Add plain text to cell.
        worksheet.Cells["B2"].Value = "This is a plain text.";

        // Add rich formatted text to cell.
        worksheet.Cells["B4"].Value = "This is a rich formatted text.";
        worksheet.Cells["B4"].Style.Font.Color = SpreadsheetColor.FromArgb(255, 128, 64);
        worksheet.Cells["B4"].GetCharacters(10, 19).Font.Name = "Arial Black";
        worksheet.Cells["B4"].GetCharacters(15, 9).Font.Size = 14 * 20;
        worksheet.Cells["B4"].GetCharacters(25, 5).Font.Size = 18 * 20;

        // Add HTML formatted text to cell.
        string html = @"<td style='
            font-family: Arial Narrow;
            color: royalblue;
            border: solid black;
            background: #FFF2CC'>This is another rich formatted text.</p>";
        worksheet.Cells["B6"].SetValue(html, LoadOptions.HtmlDefault);

        // Save workbook as an Excel file.
        workbook.Save("Writing2.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WindowsForms/Form1.cs:
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using GemBox.Spreadsheet;

public partial class MainForm : Form
{
    public MainForm()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        // Use Trial Mode
        SpreadsheetInfo.FreeLimitReached += (eventSender, args) => args.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;
        InitializeComponent();
    }

    private async void loadButton_Click(object sender, EventArgs e)
    {
        // Capture the current context on UI thread
        var context = SynchronizationContext.Current;

        // Create load options
        var loadOptions = new XlsxLoadOptions();
        loadOptions.ProgressChanged += (eventSender, args) =>
        {
            var percentage = args.ProgressPercentage;
            // Invoke on UI thread
            context.Post(progressPercentage =>
            {
                // Update UI
                this.progressBar.Value = (int)progressPercentage;
                this.percentageLabel.Text = progressPercentage.ToString() + "%";
            }, percentage);
        };

        this.percentageLabel.Text = "0%";
        // Use tasks to run the load operation in a new thread.
        var file = await Task.Run(() => ExcelFile.Load("LargeFile.xlsx", loadOptions));
    }
}


--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WindowsForms/Form1.Designer.cs:
﻿partial class MainForm
{
    /// <summary>
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary>
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
        if (disposing && (components != null))
        {
            components.Dispose();
        }
        base.Dispose(disposing);
    }

    #region Windows Form Designer generated code

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
            this.progressBar = new System.Windows.Forms.ProgressBar();
            this.loadButton = new System.Windows.Forms.Button();
            this.percentageLabel = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // 
            // progressBar
            // 
            this.progressBar.Location = new System.Drawing.Point(49, 105);
            this.progressBar.Name = "progressBar";
            this.progressBar.Size = new System.Drawing.Size(279, 30);
            this.progressBar.TabIndex = 0;
            // 
            // loadButton
            // 
            this.loadButton.Location = new System.Drawing.Point(49, 31);
            this.loadButton.Name = "loadButton";
            this.loadButton.Size = new System.Drawing.Size(321, 47);
            this.loadButton.TabIndex = 1;
            this.loadButton.Text = "Load";
            this.loadButton.UseVisualStyleBackColor = true;
            this.loadButton.Click += new System.EventHandler(this.loadButton_Click);
            // 
            // percentageLabel
            // 
            this.percentageLabel.AutoSize = true;
            this.percentageLabel.Location = new System.Drawing.Point(341, 110);
            this.percentageLabel.Name = "percentageLabel";
            this.percentageLabel.Size = new System.Drawing.Size(21, 20);
            this.percentageLabel.TabIndex = 2;
            // 
            // MainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(9F, 20F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(417, 164);
            this.Controls.Add(this.percentageLabel);
            this.Controls.Add(this.loadButton);
            this.Controls.Add(this.progressBar);
            this.Name = "MainForm";
            this.Text = "Progress reporting in Windows Forms";
            this.ResumeLayout(false);
            this.PerformLayout();

    }

    #endregion

    private System.Windows.Forms.ProgressBar progressBar;
    private System.Windows.Forms.Button loadButton;
    private System.Windows.Forms.Label percentageLabel;
}


--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WindowsForms/Program.cs:
﻿using System;
using System.Windows.Forms;

static class Program
{
    /// <summary>
    /// The main entry point for the application.
    /// </summary>
    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);
        Application.Run(new MainForm());
    }
}


--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WindowsForms/Properties/AssemblyInfo.cs:
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("ProgressReportingInWindowsForms")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("GemBox Ltd.")]
[assembly: AssemblyProduct("ProgressReportingInWindowsForms")]
[assembly: AssemblyCopyright("Copyright © GemBox Ltd.")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("fe6e9a0a-da26-4ba5-b64d-325a96aa55e1")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WindowsForms/Properties/Settings.Designer.cs:
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProgressReportingInWindowsForms.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WindowsForms/Properties/Resources.Designer.cs:
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProgressReportingInWindowsForms.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ProgressReportingInWindowsForms.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in Console/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        // Use Trial Mode
        SpreadsheetInfo.FreeLimitReached += (eventSender, args) => args.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;

        Console.WriteLine("Creating file");

        // Create large workbook
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("sheet");
        for (int i = 0; i < 1000000; i++)
            worksheet.Cells[i, 0].Value = i;

        // Create save options
        var saveOptions = new XlsxSaveOptions();
        saveOptions.ProgressChanged += (eventSender, args) =>
        {
            Console.WriteLine($"Progress changed - {args.ProgressPercentage}%");
        };

        // Save file
        workbook.Save("file.xlsx", saveOptions);
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WPF/App.xaml.cs:
﻿using System.Windows;

public partial class App : Application
{
}


--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WPF/MainWindow.xaml.cs:
using System.Windows;
using System.Threading;
using System.Threading.Tasks;
using GemBox.Spreadsheet;

public partial class MainWindow : Window
{
    public MainWindow()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        // Use Trial Mode
        SpreadsheetInfo.FreeLimitReached += (eventSender, args) => args.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;
        InitializeComponent();
    }

    private async void loadButton_Click(object sender, RoutedEventArgs e)
    {
        // Capture the current context on UI thread
        var context = SynchronizationContext.Current;

        // Create load options
        var loadOptions = new XlsxLoadOptions();
        loadOptions.ProgressChanged += (eventSender, args) =>
        {
            var percentage = args.ProgressPercentage;
            // Invoke on UI thread
            context.Post(progressPercentage =>
            {
                // Update UI
                this.progressBar.Value = (int)progressPercentage;
                this.percentageLabel.Content = progressPercentage.ToString() + "%";
            }, percentage);
        };

        this.percentageLabel.Content = "0%";
        // Use tasks to run the load operation in a new thread.
        var file = await Task.Run(() => ExcelFile.Load("LargeFile.xlsx", loadOptions));
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WPF/Properties/AssemblyInfo.cs:
﻿using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("ProgressReportingInWpf")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("GemBox Ltd.")]
[assembly: AssemblyProduct("ProgressReportingInWpf")]
[assembly: AssemblyCopyright("Copyright © GemBox Ltd.")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

//In order to begin building localizable applications, set
//<UICulture>CultureYouAreCodingWith</UICulture> in your .csproj file
//inside a <PropertyGroup>.  For example, if you are using US english
//in your source files, set the <UICulture> to en-US.  Then uncomment
//the NeutralResourceLanguage attribute below.  Update the "en-US" in
//the line below to match the UICulture setting in the project file.

//[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.Satellite)]


[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
                                     //(used if a resource is not found in the page,
                                     // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
                                              //(used if a resource is not found in the page,
                                              // app, or any theme specific resource dictionaries)
)]


// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WPF/Properties/Settings.Designer.cs:
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProgressReportingInWpf.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WPF/Properties/Resources.Designer.cs:
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProgressReportingInWpf.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ProgressReportingInWpf.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Cancellation in Console/Program.cs:
using System;
using System.Diagnostics;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        // Use Trial Mode
        SpreadsheetInfo.FreeLimitReached += (eventSender, args) => args.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;

        // Create workbook
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("sheet");
        for (int i = 0; i < 1000000; i++)
            worksheet.Cells[i, 0].Value = i;

        var stopwatch = new Stopwatch();
        stopwatch.Start();

        // Create save options
        var saveOptions = new XlsxSaveOptions();
        saveOptions.ProgressChanged += (sender, args) =>
        {
            // Cancel operation after five seconds
            if (stopwatch.Elapsed.Seconds >= 5)
                args.CancelOperation();
        };

        try
        {
            workbook.Save("Cancellation.xlsx", saveOptions);
            Console.WriteLine("Operation fully finished");
        } 
        catch(OperationCanceledException)
        {
            Console.WriteLine("Operation was cancelled");
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Cancellation in WPF/App.xaml.cs:
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;


public partial class App : Application
{
}


--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Cancellation in WPF/MainWindow.xaml.cs:
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using GemBox.Spreadsheet;

public partial class MainWindow : Window
{
    private volatile bool cancellationRequested;

    public MainWindow()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        // Use Trial Mode
        SpreadsheetInfo.FreeLimitReached += (eventSender, args) => args.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;
        InitializeComponent();
    }

    private async void loadButton_Click(object sender, RoutedEventArgs e)
    {
        // Capture the current context on UI thread
        var context = SynchronizationContext.Current;

        var loadOptions = new XlsxLoadOptions();
        loadOptions.ProgressChanged += (eventSender, args) =>
        {
            // Show progress
            context.Post(progressPercentage => this.progressBar.Value = (int)progressPercentage, args.ProgressPercentage);

            // Cancel if requested
            if (this.cancellationRequested)
                args.CancelOperation();
        };

        try
        {
            var file = await Task.Run(() => ExcelFile.Load("LargeFile.xlsx", loadOptions));
        }
        catch (OperationCanceledException)
        {
            // Operation cancelled
        }
    }

    private void cancelButton_Click(object sender, RoutedEventArgs e)
    {
        this.cancellationRequested = true;
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Cancellation in WPF/Properties/AssemblyInfo.cs:
﻿using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("CancellationInWpf")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("GemBox Ltd.")]
[assembly: AssemblyProduct("CancellationInWpf")]
[assembly: AssemblyCopyright("Copyright © GemBox Ltd.")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

//In order to begin building localizable applications, set
//<UICulture>CultureYouAreCodingWith</UICulture> in your .csproj file
//inside a <PropertyGroup>.  For example, if you are using US english
//in your source files, set the <UICulture> to en-US.  Then uncomment
//the NeutralResourceLanguage attribute below.  Update the "en-US" in
//the line below to match the UICulture setting in the project file.

//[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.Satellite)]


[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
                                     //(used if a resource is not found in the page,
                                     // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
                                              //(used if a resource is not found in the page,
                                              // app, or any theme specific resource dictionaries)
)]


// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Cancellation in WPF/Properties/Settings.Designer.cs:
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CancellationInWpf.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.3.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Cancellation in WPF/Properties/Resources.Designer.cs:
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CancellationInWpf.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CancellationInWpf.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Row and Column AutoFit/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        var worksheet = workbook.Worksheets.ActiveWorksheet;

        int columnCount = worksheet.CalculateMaxUsedColumns();
        for (int i = 0; i < columnCount; i++)
            worksheet.Columns[i].AutoFit(1, worksheet.Rows[1], worksheet.Rows[worksheet.Rows.Count - 1]);

        workbook.Save("Row_Column AutoFit.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Print Titles and Area/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();

        // Always print 1st row.
        var worksheet1 = workbook.Worksheets.Add("Sheet1");
        worksheet1.NamedRanges.SetPrintTitles(worksheet1.Rows[0], 1);

        // Set print area (from A1 to I120):
        worksheet1.NamedRanges.SetPrintArea(worksheet1.Cells.GetSubrange("A1", "I120"));

        // Always print columns from A to F.
        var worksheet2 = workbook.Worksheets.Add("Sheet2");
        worksheet2.NamedRanges.SetPrintTitles(worksheet2.Columns[0], 6);

        // Always print columns from A to F and first row.
        var worksheet3 = workbook.Worksheets.Add("Sheet3");
        worksheet3.NamedRanges.SetPrintTitles(worksheet3.Rows[0], 1, worksheet3.Columns[0], 6);

        // Fill Sheet1 with some data.
        for (int i = 0; i < 9; i++)
            worksheet1.Cells[0, i].Value = "Column " + ExcelColumnCollection.ColumnIndexToName(i);

        for (int i = 1; i < 120; i++)
            for (int j = 0; j < 9; j++)
                worksheet1.Cells[i, j].SetValue(i + j);

        workbook.Save("Print Titles and Area.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Unit Conversion/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("Template.xlsx");
        var worksheet = workbook.Worksheets[0];
        var cell = worksheet.Cells["A1"];

        double widthInPoints = cell.Column.GetWidth(LengthUnit.Point);
        double heightInPoints = cell.Row.GetHeight(LengthUnit.Point);

        Console.WriteLine("A1 cell's size in different units:");

        foreach (LengthUnit unit in Enum.GetValues(typeof(LengthUnit)))
        {
            // The CharacterWidth should not be used with LengthUnitConverter, see:
            // https://www.gemboxsoftware.com/spreadsheet/docs/GemBox.Spreadsheet.LengthUnit.html
            if (unit == LengthUnit.CharacterWidth)
                continue;

            double convertedWidth = LengthUnitConverter.Convert(widthInPoints, LengthUnit.Point, unit);
            double convertedHeight = LengthUnitConverter.Convert(heightInPoints, LengthUnit.Point, unit);
            Console.WriteLine($"{convertedWidth:0.###} x {convertedHeight:0.###} {unit}");
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Find and Replace/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");
        var worksheet = workbook.Worksheets.ActiveWorksheet;

        var searchText = "Apollo";
        foreach (var cell in worksheet.Cells.FindAllText(searchText))
            Console.WriteLine($"Text was found in cell '{cell.Name}' (\"{cell.StringValue}\").");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Private Fonts/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Private Fonts");

        // Current directory contains a font file.
        FontSettings.FontsBaseDirectory = ".";

        worksheet.Parent.Styles.Normal.Font.Name = "Almonte Snow";
        worksheet.Parent.Styles.Normal.Font.Size = 48 * 20;

        worksheet.Cells[0, 0].Value = "Hello World!";

        workbook.Save("Private Fonts.pdf");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Filtering/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // If using the Professional version, remove this FreeLimitReached event handler.
        SpreadsheetInfo.FreeLimitReached += (sender, e) => e.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;

        var workbook = ExcelFile.Load("SampleData.xlsx");
        var worksheet = workbook.Worksheets["Data"];
        int rowCount = worksheet.Rows.Count;

        // Specify range which will be filtered.
        var filterRange = worksheet.Cells.GetSubrangeAbsolute(0, 0, rowCount, 4);

        // Show only rows which satisfy following conditions:
        // - 'Departments' value is either "Legal" or "Marketing" or "Finance" and
        // - 'Names' value contains letter 'e' and
        // - 'Salaries' value is in the top 20 percent of all 'Salaries' values and
        // - 'Deadlines' value is today's date.
        // Shown rows are then sorted by 'Salaries' values in the descending order.
        filterRange.Filter()
            .ByValues(0, "Legal", "Marketing", "Finance")
            .ByCustom(1, FilterOperator.Equal, "*e*")
            .ByTop10(3, true, true, 20)
            .ByDynamic(4, DynamicFilterType.Today)
            .SortBy(3, true)
            .Apply();

        workbook.Save("Filtering.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Right to Left Text/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("RightToLeft.xlsx");
        var worksheet = workbook.Worksheets[0];

        // Show columns from the right side of the page.
        worksheet.ViewOptions.ShowColumnsFromRightToLeft = true;

        worksheet.Cells["A8"].Value = "200 جديدة";
        // Set the reading order of the cell as right-to-left.
        worksheet.Cells["A8"].Style.TextDirection = TextDirection.RightToLeft;

        workbook.Save("RightToLeft.pdf");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Grouping and Outlining/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Grouping");

        worksheet.Cells[0].Value = "Cell grouping examples:";

        // Vertical grouping.
        worksheet.Cells[2, 0].Value = "GroupA Start";
        worksheet.Rows[2].OutlineLevel = 1;
        worksheet.Cells[3, 0].Value = "A";
        worksheet.Rows[3].OutlineLevel = 1;
        worksheet.Cells[4, 1].Value = "GroupB Start";
        worksheet.Rows[4].OutlineLevel = 2;
        worksheet.Cells[5, 1].Value = "B";
        worksheet.Rows[5].OutlineLevel = 2;
        worksheet.Cells[6, 1].Value = "GroupB End";
        worksheet.Rows[6].OutlineLevel = 2;
        worksheet.Cells[7, 0].Value = "GroupA End";
        worksheet.Rows[7].OutlineLevel = 1;
        // Put outline row buttons above groups.
        worksheet.ViewOptions.OutlineRowButtonsBelow = false;

        // Horizontal grouping (collapsed).
        worksheet.Cells["E2"].Value = "Gr.C Start";
        worksheet.Columns["E"].OutlineLevel = 1;
        worksheet.Columns["E"].Hidden = true;
        worksheet.Cells["F2"].Value = "C";
        worksheet.Columns["F"].OutlineLevel = 1;
        worksheet.Columns["F"].Hidden = true;
        worksheet.Cells["G2"].Value = "Gr.C End";
        worksheet.Columns["G"].OutlineLevel = 1;
        worksheet.Columns["G"].Hidden = true;
        worksheet.Columns["H"].Collapsed = true;

        workbook.Save("Grouping.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Print and View Options/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Print and View Options");

        worksheet.Cells["M1"].Value = "This worksheet shows how to set various print related and view related options.";
        worksheet.Cells["M2"].Value = "To see results of print options, go to Print and Page Setup dialogs in MS Excel.";
        worksheet.Cells["M3"].Value = "Notice that print and view options are worksheet based, not workbook based.";

        // Print options:
        var printOptions = worksheet.PrintOptions;
        printOptions.PrintGridlines = true;
        printOptions.PrintHeadings = true;
        printOptions.Portrait = false;
        printOptions.PaperType = PaperType.A3;
        printOptions.NumberOfCopies = 5;

        // View options:
        worksheet.ViewOptions.FirstVisibleColumn = 3;
        worksheet.ViewOptions.ShowColumnsFromRightToLeft = true;
        worksheet.ViewOptions.Zoom = 123;

        // Set print area.
        worksheet.NamedRanges.SetPrintArea(worksheet.Cells.GetSubrange("E1", "U7"));

        workbook.Save("Print and View Options.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Sorting/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Sorting");

        var random = new Random();

        worksheet.Cells[0, 0].Value = "Sorted numbers";
        for (int i = 1; i < 10; i++)
            worksheet.Cells[i, 0].SetValue(random.Next(1, 100));

        worksheet.Cells.GetSubrangeAbsolute(1, 0, 10, 0).Sort(false).By(0).Apply();

        worksheet.Cells[0, 2].Value = "Sorted strings";
        worksheet.Cells[1, 2].Value = "John";
        worksheet.Cells[2, 2].Value = "Jennifer";
        worksheet.Cells[3, 2].Value = "Toby";
        worksheet.Cells[4, 2].Value = "Chloe";

        worksheet.Cells.GetSubrangeAbsolute(1, 2, 4, 2).Sort(false).By(0).Apply();

        worksheet.Cells[0, 4].Value = "Sorted by column E and after that by column F";
        for (int i = 1; i < 10; i++)
        {
            worksheet.Cells[i, 4].SetValue(random.Next(1, 4));
            worksheet.Cells[i, 5].SetValue(random.Next(0, 10));
        }

        // Sort by column E ascending and then by column F descending.
        // These sort settings will be saved to output XLSX file because they are active (parameter value is true).
        worksheet.Cells.GetSubrangeAbsolute(1, 4, 10, 5).Sort(true).By(0).By(1, true).Apply();

        workbook.Save("Sorting.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Data Validation/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Data Validation");

        worksheet.Cells[0, 0].Value = "Data validation examples:";

        worksheet.Cells[2, 1].Value = "Decimal greater than 3.14 (on entire row 4):";
        worksheet.DataValidations.Add(new DataValidation(worksheet.Rows[3].Cells)
        {
            Type = DataValidationType.Decimal,
            Operator = DataValidationOperator.GreaterThan,
            Formula1 = 3.14,
            InputMessageTitle = "Enter a decimal",
            InputMessage = "Decimal should be greater than 3.14.",
            ErrorTitle = "Invalid decimal",
            ErrorMessage = "Value should be a decimal greater than 3.14."
        });
        worksheet.Cells.GetSubrange("A4", "J4").Value = 3.15;

        worksheet.Cells[7, 1].Value = "List from B9 to B12 (on cell C8):";
        worksheet.Cells[8, 1].Value = "John";
        worksheet.Cells[9, 1].Value = "Fred";
        worksheet.Cells[10, 1].Value = "Hans";
        worksheet.Cells[11, 1].Value = "Ivan";
        worksheet.DataValidations.Add(new DataValidation(worksheet, "C8")
        {
            Type = DataValidationType.List,
            Formula1 = "=B9:B12",
            InputMessageTitle = "Enter a name",
            InputMessage = "Name should be from the list: John, Fred, Hans, Ivan.",
            ErrorStyle = DataValidationErrorStyle.Warning,
            ErrorTitle = "Invalid name",
            ErrorMessage = "Value should be a name from the list: John, Fred, Hans, Ivan."
        });
        worksheet.Cells["C8"].Value = "John";

        worksheet.Cells[13, 1].Value = "Date between 2011-01-01 and 2011-12-31 (on cell range C14:E15):";
        worksheet.DataValidations.Add(new DataValidation(worksheet.Cells.GetSubrange("C14", "E15"))
        {
            Type = DataValidationType.Date,
            Operator = DataValidationOperator.Between,
            Formula1 = new DateTime(2011, 1, 1),
            Formula2 = new DateTime(2011, 12, 31),
            InputMessageTitle = "Enter a date",
            InputMessage = "Date should be between 2011-01-01 and 2011-12-31.",
            ErrorStyle = DataValidationErrorStyle.Information,
            ErrorTitle = "Invalid date",
            ErrorMessage = "Value should be a date between 2011-01-01 and 2011-12-31."
        });
        worksheet.Cells.GetSubrange("C14", "E15").Value = new DateTime(2011, 1, 1);

        // Column width of 8, 55 and 15 characters.
        worksheet.Columns[0].Width = 8 * 256;
        worksheet.Columns[1].Width = 55 * 256;
        worksheet.Columns[2].Width = 15 * 256;
        worksheet.Columns[3].Width = 15 * 256;
        worksheet.Columns[4].Width = 15 * 256;

        workbook.Save("Data Validation.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Sheet Copying and Deleting/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = ExcelFile.Load("Template.xlsx");

        // Get template sheet.
        var templateSheet = workbook.Worksheets[0];

        // Copy template sheet.
        for (int i = 0; i < 4; i++)
            workbook.Worksheets.AddCopy("Invoice " + (i + 1), templateSheet);

        // Delete template sheet.
        workbook.Worksheets.Remove(0);

        var random = new Random();

        // For each sheet.
        for (int i = 0; i < 4; i++)
        {
            // Get sheet.
            var worksheet = workbook.Worksheets[i];

            // Write sheet's cells.
            worksheet.Cells["C6"].Value = "ACME Corp";
            worksheet.Cells["C7"].Value = "240 Old Country Road, Springfield, IL";

            DateTime startDate = DateTime.Today;
            int itemsCount = random.Next(5, 20);
            worksheet.Cells["C11"].SetValue(startDate);
            worksheet.Cells["C12"].SetValue(startDate.AddDays(itemsCount - 1));

            // Copy template row.
            int row = 17;
            worksheet.Rows.InsertCopy(row + 1, itemsCount - 1, worksheet.Rows[row]);

            // Write row's cells.
            for (int j = 0; j < itemsCount; j++)
            {
                var currentRow = worksheet.Rows[row + j];
                currentRow.Cells[1].SetValue(startDate.AddDays(j));
                currentRow.Cells[2].SetValue(random.Next(6, 9));
            }
        }

        workbook.Save("Sheet Copying_Deleting.xlsx");
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("CellRanges.xlsx");
        var worksheet = workbook.Worksheets[0];

        // Copy cells including all the data, like pictures, data validations, and conditional formattings.
        var range = worksheet.Cells.GetSubrange("B3:D12");
        range.CopyTo("F3");
        range.CopyTo("J3");

        // Copy cells with specified copy options.
        range = worksheet.Cells.GetSubrange("B7:D8");
        range.CopyTo("J15", new CopyOptions()
        {
            CopyTypes = CopyTypes.Values | CopyTypes.Formulas,
            Transpose = true
        });

        // Delete cells and shift remaining cells to the left.
        range = worksheet.Cells.GetSubrange("B14:D23");
        range.Remove(RemoveShiftDirection.Left);

        workbook.Save("CellRanges Copied and Deleted.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Charts/Chart Sheet/Program.cs:
using System;
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Charts;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Data");

        // Add data which will be used by the Excel chart.
        worksheet.Cells["A1"].Value = "Name";
        worksheet.Cells["A2"].Value = "John Doe";
        worksheet.Cells["A3"].Value = "Fred Nurk";
        worksheet.Cells["A4"].Value = "Hans Meier";
        worksheet.Cells["A5"].Value = "Ivan Horvat";

        worksheet.Cells["B1"].Value = "Salary";
        worksheet.Cells["B2"].Value = 3600;
        worksheet.Cells["B3"].Value = 2580;
        worksheet.Cells["B4"].Value = 3200;
        worksheet.Cells["B5"].Value = 4100;

        // Set header row and formatting.
        worksheet.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
        worksheet.Columns[0].SetWidth(3, LengthUnit.Centimeter);
        worksheet.Columns[1].Style.NumberFormat = "\"$\"#,##0";

        // Make entire sheet print on a single page.
        worksheet.PrintOptions.FitWorksheetWidthToPages = 1;
        worksheet.PrintOptions.FitWorksheetHeightToPages = 1;

        // Create Excel chart sheet.
        var chartsheet = workbook.Worksheets.Add(SheetType.Chart, "Chart");
        workbook.Worksheets.ActiveWorksheet = chartsheet;

        // Create Excel chart and select data for it.
        // You cannot set the size of the chart area when the chart is located on a chart sheet, it will snap to maximum size on the chart sheet.
        var chart = chartsheet.Charts.Add(ChartType.Pie, 0, 0, 0, 0, LengthUnit.Centimeter);
        chart.SelectData(worksheet.Cells.GetSubrangeAbsolute(0, 0, 4, 1), true);

        workbook.Save("Chart Sheet.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Charts/Chart/Program.cs:
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Charts;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
        Example3();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Chart");

        // Add data which will be used by the Excel chart.
        worksheet.Cells["A1"].Value = "Name";
        worksheet.Cells["A2"].Value = "John Doe";
        worksheet.Cells["A3"].Value = "Fred Nurk";
        worksheet.Cells["A4"].Value = "Hans Meier";
        worksheet.Cells["A5"].Value = "Ivan Horvat";

        worksheet.Cells["B1"].Value = "Salary";
        worksheet.Cells["B2"].Value = 3600;
        worksheet.Cells["B3"].Value = 2580;
        worksheet.Cells["B4"].Value = 3200;
        worksheet.Cells["B5"].Value = 4100;

        // Set header row and formatting.
        worksheet.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
        worksheet.Columns[0].SetWidth(3, LengthUnit.Centimeter);
        worksheet.Columns[1].Style.NumberFormat = "\"$\"#,##0";

        // Make entire sheet print on a single page.
        worksheet.PrintOptions.FitWorksheetWidthToPages = 1;
        worksheet.PrintOptions.FitWorksheetHeightToPages = 1;

        // Create Excel chart and select data for it.
        var chart = worksheet.Charts.Add(ChartType.Bar, "D2", "M25");
        chart.SelectData(worksheet.Cells.GetSubrangeAbsolute(0, 0, 4, 1), true);

        workbook.Save("Chart.xlsx");
    }

    static void Example2()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Chart");

        // Add data which will be used by the Excel chart.
        worksheet.Cells["A1"].Value = "Name";
        worksheet.Cells["A2"].Value = "John Doe";
        worksheet.Cells["A3"].Value = "Fred Nurk";
        worksheet.Cells["A4"].Value = "Hans Meier";
        worksheet.Cells["A5"].Value = "Ivan Horvat";

        worksheet.Cells["B1"].Value = "Salary";
        worksheet.Cells["B2"].Value = 4023;
        worksheet.Cells["B3"].Value = 3263;
        worksheet.Cells["B4"].Value = 2851;
        worksheet.Cells["B5"].Value = 4694;

        worksheet.Cells["C1"].Value = "Max";
        worksheet.Cells["C2"].Value = 4500;
        worksheet.Cells["C3"].Value = 4300;
        worksheet.Cells["C4"].Value = 4000;
        worksheet.Cells["C5"].Value = 4900;

        worksheet.Cells["D1"].Value = "Min";
        worksheet.Cells["D2"].Value = 3000;
        worksheet.Cells["D3"].Value = 2800;
        worksheet.Cells["D4"].Value = 2500;
        worksheet.Cells["D5"].Value = 3400;

        // Set header row and formatting.
        worksheet.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
        worksheet.Columns[0].SetWidth(3, LengthUnit.Centimeter);

        // Set value cells number formatting.
        foreach (var cell in worksheet.Cells.GetSubrange("B2", "D5"))
            cell.Style.NumberFormat = "\"$\"#,##0";

        // Make entire sheet print on a single page.
        worksheet.PrintOptions.FitWorksheetWidthToPages = 1;
        worksheet.PrintOptions.FitWorksheetHeightToPages = 1;

        // Create Excel combo chart and set category labels reference.
        var comboChart = worksheet.Charts.Add<ComboChart>("F2", "O25");
        comboChart.CategoryLabelsReference = "Chart!A2:A5";

        // Make chart legend visible.
        comboChart.Legend.IsVisible = true;
        comboChart.Legend.Position = ChartLegendPosition.Top;

        // Add column chart for displaying salary series.
        var salaryChart = comboChart.Add(ChartType.Column);
        salaryChart.Series.Add("=Chart!B1", "Chart!B2:B5");

        // Add line chart for displaying min and max series.
        var minMaxChart = comboChart.Add(ChartType.Line);
        minMaxChart.Series.Add("=Chart!C1", "Chart!C2:C5");
        minMaxChart.Series.Add("=Chart!D1", "Chart!D2:D5");

        workbook.Save("Combo Chart.xlsx");
    }

    static void Example3()
    {
        var workbook = ExcelFile.Load("Combo.xlsx");
        var worksheet = workbook.Worksheets["Chart"];
        var comboChart = worksheet.Charts[0] as ComboChart;

        // Update existing series.
        // When setting the values directly the ValuesReference will end up as null.
        var salarySeries = comboChart.Series[0];
        salarySeries.SetValues(3000, 3500, 4000, 4500);

        // Add new data.
        worksheet.Cells["Q1"].Value = "Average";
        foreach (var cell in worksheet.Cells.GetSubrange("Q2:Q5"))
        {
            string row = cell.Row.Name;
            cell.Formula = $"=AVERAGE(C{row},D{row})";
            cell.Style.NumberFormat = "\"$\"#,##0";
        }
        worksheet.Calculate();

        // Add new series.
        var lineChart = comboChart[1] as LineChart;
        var avgSeries = lineChart.Series.Add("=Chart!Q1", "Chart!Q2:Q5");
        avgSeries.Marker.MarkerType = MarkerType.Diamond;
        avgSeries.Marker.Size = 10;

        workbook.Save("Updated Combo.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Charts/Chart Components/Program.cs:
using System;
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Charts;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Chart");

        int numberOfYears = 4;

        // Add data which is used by the chart.
        worksheet.Cells["A1"].Value = "Name";
        worksheet.Cells["A2"].Value = "John Doe";
        worksheet.Cells["A3"].Value = "Fred Nurk";
        worksheet.Cells["A4"].Value = "Hans Meier";
        worksheet.Cells["A5"].Value = "Ivan Horvat";

        // Generate column titles.
        for (int i = 0; i < numberOfYears; i++)
            worksheet.Cells[0, i + 1].Value = DateTime.Now.Year - numberOfYears + i;

        var random = new Random();
        var range = worksheet.Cells.GetSubrangeAbsolute(1, 1, 4, numberOfYears);

        // Fill the values.
        foreach (var cell in range)
        {
            cell.SetValue(random.Next(1000, 5000));
            cell.Style.NumberFormat = "\"$\"#,##0";
        }

        // Set header row and formatting.
        worksheet.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
        worksheet.Rows[0].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;
        worksheet.Columns[0].SetWidth(3, LengthUnit.Centimeter);

        // Create chart and select data for it.
        var chart = worksheet.Charts.Add<ColumnChart>(ChartGrouping.Clustered, "B7", "O27");
        chart.SelectData(worksheet.Cells.GetSubrangeAbsolute(0, 0, 4, numberOfYears));

        // Set chart title.
        chart.Title.Text = "Column Chart";

        // Set chart legend.
        chart.Legend.IsVisible = true;
        chart.Legend.Position = ChartLegendPosition.Right;

        // Set axis titles.
        chart.Axes.Horizontal.Title.Text = "Years";
        chart.Axes.Vertical.Title.Text = "Salaries";

        // Set value axis scaling, units, gridlines and tick marks.
        var valueAxis = chart.Axes.VerticalValue;
        valueAxis.Minimum = 0;
        valueAxis.Maximum = 6000;
        valueAxis.MajorUnit = 1000;
        valueAxis.MinorUnit = 500;
        valueAxis.MajorGridlines.IsVisible = true;
        valueAxis.MinorGridlines.IsVisible = true;
        valueAxis.MajorTickMarkType = TickMarkType.Outside;
        valueAxis.MinorTickMarkType = TickMarkType.Cross;

        // Make entire sheet print horizontally centered on a single page with headings and gridlines.
        var printOptions = worksheet.PrintOptions;
        printOptions.HorizontalCentered = true;
        printOptions.PrintHeadings = true;
        printOptions.PrintGridlines = true;
        printOptions.FitWorksheetWidthToPages = 1;
        printOptions.FitWorksheetHeightToPages = 1;

        workbook.Save("Chart Components.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Charts/Chart Formatting/Program.cs:
using System;
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Charts;
using GemBox.Spreadsheet.Drawing;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Chart");

        // Add data which will be used by the Excel chart.
        worksheet.Cells["A1"].Value = "Month";
        worksheet.Cells["A2"].Value = "January";
        worksheet.Cells["A3"].Value = "February";
        worksheet.Cells["A4"].Value = "March";
        worksheet.Cells["A5"].Value = "April";
        worksheet.Cells["A6"].Value = "May";
        worksheet.Cells["A7"].Value = "June";
        worksheet.Cells["A8"].Value = "July";
        worksheet.Cells["A9"].Value = "August";
        worksheet.Cells["A10"].Value = "September";
        worksheet.Cells["A11"].Value = "October";
        worksheet.Cells["A12"].Value = "November";
        worksheet.Cells["A13"].Value = "December";

        // Fill the values.
        worksheet.Cells["B1"].Value = "Sales";
        var random = new Random();

        for (int i = 1; i <= 12; i++)
            worksheet.Cells[i, 1].SetValue(random.Next(2000, 5000));

        // Set header row and formatting.
        worksheet.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
        worksheet.Columns[0].SetWidth(3, LengthUnit.Centimeter);
        worksheet.Columns[1].Style.NumberFormat = "\"$\"#,##0";

        // Make entire sheet print on a single page.
        worksheet.PrintOptions.FitWorksheetWidthToPages = 1;
        worksheet.PrintOptions.FitWorksheetHeightToPages = 1;

        // Create Excel chart and select data for it.
        var chart = worksheet.Charts.Add<LineChart>("D2", "P25");
        chart.SelectData(worksheet.Cells.GetSubrangeAbsolute(0, 0, 12, 1), true);

        // Define colors.
        var backgroundColor = DrawingColor.FromName(DrawingColorName.RoyalBlue);
        var seriesColor = DrawingColor.FromName(DrawingColorName.Green);
        var textColor = DrawingColor.FromName(DrawingColorName.White);
        var borderColor = DrawingColor.FromName(DrawingColorName.Black);

        // Format chart.
        chart.Fill.SetSolid(backgroundColor);

        var outline = chart.Outline;
        outline.Width = Length.From(2, LengthUnit.Point);
        outline.Fill.SetSolid(borderColor);

        // Format plot area.
        chart.PlotArea.Fill.SetSolid(DrawingColor.FromName(DrawingColorName.White));

        outline = chart.PlotArea.Outline;
        outline.Width = Length.From(1.5, LengthUnit.Point);
        outline.Fill.SetSolid(borderColor);

        // Format chart title.
        var textFormat = chart.Title.TextFormat;
        textFormat.Size = Length.From(20, LengthUnit.Point);
        textFormat.Font = "Arial";
        textFormat.Fill.SetSolid(textColor);

        // Format vertical axis.
        textFormat = chart.Axes.Vertical.TextFormat;
        textFormat.Fill.SetSolid(textColor);
        textFormat.Italic = true;

        // Format horizontal axis.
        textFormat = chart.Axes.Horizontal.TextFormat;
        textFormat.Fill.SetSolid(textColor);
        textFormat.Size = Length.From(12, LengthUnit.Point);
        textFormat.Bold = true;

        // Format vertical major gridlines.
        chart.Axes.Vertical.MajorGridlines.Outline.Width = Length.From(0.5, LengthUnit.Point);

        // Format series.
        var series = chart.Series[0];
        outline = series.Outline;
        outline.Width = Length.From(3, LengthUnit.Point);
        outline.Fill.SetSolid(seriesColor);

        // Format series markers.
        series.Marker.MarkerType = MarkerType.Circle;
        series.Marker.Size = 10;
        series.Marker.Fill.SetSolid(textColor);
        series.Marker.Outline.Fill.SetSolid(seriesColor);

        workbook.Save("Chart Formatting.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Freeze and Split Panes/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        
        var workbook = new ExcelFile();

        // Frozen Rows (first 2 rows are frozen).
        var worksheet1 = workbook.Worksheets.Add("Frozen rows");
        worksheet1.Panes = new WorksheetPanes(2, 0);

        // Frozen Columns (first column is frozen).
        var worksheet2 = workbook.Worksheets.Add("Frozen columns");
        worksheet2.Panes = new WorksheetPanes(0, 1);

        // Frozen Rows and Columns (first 2 rows and first 3 columns are frozen).
        var worksheet3 = workbook.Worksheets.Add("Frozen rows and columns");
        worksheet3.Panes = new WorksheetPanes(2, 3);

        // Split pane.
        var worksheet4 = workbook.Worksheets.Add("Split pane");
        worksheet4.Panes = new WorksheetPanes(PanesState.Split, 2310, 1500, "D7", PanePosition.BottomRight);

        workbook.Save("Freeze or Split Panes.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Comments/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Comments");

        // Add hidden comments (hover over an indicator to view it).
        ExcelCell cell = worksheet.Cells["B2"];
        cell.Value = "Hidden comment";
        ExcelComment comment = cell.Comment;
        comment.Text = "Comment with hidden text.";

        comment = worksheet.Cells["B4"].Comment;
        comment.Text = "Another comment with hidden text.";

        // Add visible comments.
        cell = worksheet.Cells["B6"];
        cell.Value = "Visible comment";
        comment = cell.Comment;
        comment.Text = "Comment with specified position and size.";
        comment.IsVisible = true;
        comment.TopLeftCell = new AnchorCell(worksheet.Cells["D5"], true);
        comment.BottomRightCell = new AnchorCell(worksheet.Cells["E12"], false);

        comment = worksheet.Cells["B8"].Comment;
        comment.Text = "Comment with specified start position.";
        comment.IsVisible = true;
        comment.TopLeftCell = new AnchorCell(worksheet.Columns["A"], worksheet.Rows["10"], 20, 10, LengthUnit.Pixel);

        // Add visible comment with formatted individual characters.
        comment = worksheet.Cells["F3"].Comment;
        comment.Text = "Comment with rich formatted text.\nComment is:\n a) multiline,\n b) large,\n c) visible, \n d) formatted, and \n e) autofitted.";
        comment.IsVisible = true;
        var characters = comment.GetCharacters(0, 33);
        characters.Font.Color = SpreadsheetColor.FromName(ColorName.Orange);
        characters.Font.Weight = ExcelFont.BoldWeight;
        characters.Font.Size = 300;
        comment.GetCharacters(13, 4).Font.Color = SpreadsheetColor.FromName(ColorName.Blue);
        comment.AutoFit();

        // Read and update comment.
        cell = worksheet.Cells["B8"];
        if (cell.Comment.Exists)
        {
            cell.Comment.Text = cell.Comment.Text.Replace(".", " and modified text.");
            cell.Value = "Updated comment.";
        }

        // Delete comment.
        cell = worksheet.Cells["B4"];
        cell.Comment = null;
        cell.Value = "Deleted comment.";

        workbook.Save("Cell Comments.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Tables/Program.cs:
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Tables;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Tables");

        // Add some data.
        var data = new object[5, 3]
        {
            { "Worker", "Hours", "Price" },
            { "John Doe", 25, 35.0 },
            { "Jane Doe", 27, 35.0 },
            { "Jack White", 18, 32.0 },
            { "George Black", 31, 35.0 }
        };

        for (int i = 0; i < 5; i++)
            for (int j = 0; j < 3; j++)
                worksheet.Cells[i, j].Value = data[i, j];

        // Set column widths.
        worksheet.Columns[0].SetWidth(100, LengthUnit.Pixel);
        worksheet.Columns[1].SetWidth(70, LengthUnit.Pixel);
        worksheet.Columns[2].SetWidth(70, LengthUnit.Pixel);
        worksheet.Columns[3].SetWidth(70, LengthUnit.Pixel);
        worksheet.Columns[2].Style.NumberFormat = "\"$\"#,##0.00";
        worksheet.Columns[3].Style.NumberFormat = "\"$\"#,##0.00";

        // Create table and enable totals row.
        var table = worksheet.Tables.Add("Table1", "A1:C5", true);
        table.HasTotalsRow = true;

        // Add new column.
        var column = table.Columns.Add();
        column.Name = "Total";

        // Populate column.
        foreach (var cell in column.DataRange)
            cell.Formula = "=Table1[Hours] * Table1[Price]";

        // Set totals row function for newly added column and calculate it.
        column.TotalsRowFunction = TotalsRowFunction.Sum;
        column.Range.Calculate();

        // Set table style.
        table.BuiltInStyle = BuiltInTableStyleName.TableStyleMedium2;

        workbook.Save("Tables.xlsx");
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("Tables.xlsx");
        var worksheet = workbook.Worksheets["Tables"];
        var table = worksheet.Tables["Table1"];

        // Remove existing table row.
        table.Rows.RemoveAt(0);

        // Update existing table row.
        var tableRow = table.Rows[0];
        tableRow.DataRange[0].Value = "Jane Updated";
        tableRow.DataRange[1].Value = 30;
        tableRow.DataRange[2].Value = 40.0;

        // Sample data for writing into a table.
        var data = new[]
        {
            new object[]{ "Fred Nurk", 22, 35.0 },
            new object[]{ "Hans Meier", 16, 20.0 },
            new object[]{ "Ivan Horvat", 24, 34.0 }
        };

        foreach (object[] items in data)
        {
            // Add new table row by adding cell values directly.
            tableRow = table.Rows.Add(items);
            tableRow.DataRange[3].Formula = "=Table1[Hours] * Table1[Price]";
        }

        table.Columns["Total"].Range.Calculate();

        workbook.Save("Tables Updated.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Defined Names/Program.cs:
using System;
using System.IO;
using System.Text;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Names");

        // Create a defined name for a constant value with a global scope.
        workbook.DefinedNames.AddDefinedName("Tax", "0.2", -1);

        // Retrieve defined name.
        DefinedName taxConstant = workbook.DefinedNames["Tax"];

        // Use defined name with formula.
        worksheet.Cells["A1"].Value = taxConstant.Name;
        worksheet.Cells["B1"].Formula = "=Tax";
        worksheet.Cells["B1"].Style.NumberFormat = "0%";

        // Create a named range for cell "A3" with a local scope.
        worksheet.Cells["A2"].Value = "Price";
        worksheet.Cells["A3"].Value = 240;
        worksheet.Cells["A4"].Value = 180;
        worksheet.Cells["A5"].Value = 210;
        worksheet.NamedRanges.Add("Prices", worksheet.Cells.GetSubrange("A3"));

        // Retrieve named range.
        NamedRange priceRange = worksheet.NamedRanges["Prices"];

        // Modify named range's cell reference to cells "A3:A5".
        priceRange.Range = worksheet.Cells.GetSubrange("A3:A5");

        // Use named range with formulas.
        worksheet.Cells["B2"].Value = "Total";
        worksheet.Cells["B3"].Formula = "=Prices * (Tax + 1)";
        worksheet.Cells["B4"].Formula = "=Prices * (Tax + 1)";
        worksheet.Cells["B5"].Formula = "=Prices * (Tax + 1)";

        workbook.Save("Defined Names.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/VBA Macros/Program.cs:
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Vba;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Sheet1");

        // Create the module.
        VbaModule vbaModule = workbook.VbaProject.Modules.Add(worksheet);
        vbaModule.Code =
@"Sub Button1_Click()
    MsgBox ""Hello World!""
End Sub";

        // Create a button to assign macro.
        var button = worksheet.FormControls.AddButton("Click Me!", "B2", 100, 15, LengthUnit.Point);
        // Assign the macro.
        button.SetMacro(vbaModule, "Button1_Click");

        // Save the workbook as macro-enabled Excel file.
        workbook.Save("AddVbaModule.xlsm");
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("SampleVba.xlsm");

        // Get the module.
        VbaModule vbaModule = workbook.VbaProject.Modules["Module1"];
        // Update text for the popup message.
        vbaModule.Code = vbaModule.Code.Replace("Hello world!", "Hello from GemBox.Spreadsheet!");

        workbook.Save("UpdateVbaModule.xlsm");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Images/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Images");

        // Add small BMP image with specified rectangle position.
        worksheet.Pictures.Add("SmallImage.bmp", 50, 50, 48, 48, LengthUnit.Pixel);

        // Add large JPG image with specified top-left cell.
        worksheet.Pictures.Add("FragonardReader.jpg", "B9");

        // Add PNG image with specified top-left and bottom-right cells.
        worksheet.Pictures.Add("Dices.png", "J16", "K20");

        // Add GIF image using anchors.
        var picture = worksheet.Pictures.Add("Zahnrad.gif",
            new AnchorCell(worksheet.Columns[9], worksheet.Rows[21], 100000, 100000),
            new AnchorCell(worksheet.Columns[10], worksheet.Rows[23], 50000, 50000));

        // Set picture's position mode.
        picture.Position.Mode = PositioningMode.Move;

        // Add SVG image with specified top-left cell and size.
        picture = worksheet.Pictures.Add("Graphics1.svg", "J9", 250, 100, LengthUnit.Pixel);

        // Set picture's metadata.
        picture.Metadata.Name = "SVG Image";

        workbook.Save("Images.xlsx");
    }

    static void Example2()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Smileys");

        // Create a sheet with specified columns width and rows height.
        for (int i = 0; i < 6; i++)
        {
            worksheet.Columns[i].SetWidth(10 * (i + 1), LengthUnit.Point);
            worksheet.Rows[i].SetHeight(10 * (i + 1), LengthUnit.Point);
        }

        // Add images that fit inside a single cell.
        foreach (var cell in worksheet.Cells.GetSubrange("A1:F6"))
        {
            var picture = worksheet.Pictures.Add("SmilingFace.png", cell.Name);
            var position = picture.Position;

            double maxWidth = cell.Column.GetWidth(LengthUnit.Point);
            double maxHeight = cell.Row.GetHeight(LengthUnit.Point);

            var ratioX = maxWidth / position.Width;
            var ratioY = maxHeight / position.Height;
            var ratio = Math.Min(ratioX, ratioY);

            if (ratio < 1)
            {
                position.Width *= ratio;
                position.Height *= ratio;
            }
        }

        workbook.Save("CellsImages.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Text Boxes/Program.cs:
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Drawing;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Text Boxes");

        // Create the first shape.
        var shape = worksheet.Shapes.Add(ShapeType.Rectangle, "B2", "D8");

        // Get the shape's text content.
        var textBox = shape.Text;

        // Create the first paragraph with bold, red run element.
        var run = textBox.Paragraphs.Add().Elements.AddRun("Shows how to use text boxes with GemBox.Spreadsheet component.");
        run.Format.Bold = true;
        run.Format.Fill.SetSolid(DrawingColor.FromName(DrawingColorName.Orange));

        // Create an empty paragraph.
        textBox.Paragraphs.Add();

        // Create a right-aligned (multi-line) paragraph.
        var paragraph = textBox.Paragraphs.Add();
        paragraph.Format.Alignment = HorizontalAlignment.Right;

        // Create and add a run element.
        run = paragraph.Elements.AddRun("This is a ...");
        var lineBreak = paragraph.Elements.AddLineBreak();
        run = paragraph.Elements.AddRun("... multi-line paragraph.");

        // Create the second shape.
        shape = worksheet.Shapes.Add(ShapeType.Oval, 200, 50, 150, 150, LengthUnit.Point);
        shape.Fill.SetSolid(DrawingColor.FromName(DrawingColorName.DarkOliveGreen));
        shape.Outline.Fill.SetNone();
        textBox = shape.Text;
        textBox.Format.VerticalAlignment = VerticalAlignment.Middle;

        // Create a list.
        paragraph = textBox.Paragraphs.Add();
        paragraph.Elements.AddRun("This is a paragraph list:");

        paragraph = textBox.Paragraphs.Add();
        paragraph.Format.List.NumberType = ListNumberType.DecimalPeriod;
        run = paragraph.Elements.AddRun("First list item");

        paragraph = textBox.Paragraphs.Add();
        paragraph.Format.List.NumberType = ListNumberType.DecimalPeriod;
        run = paragraph.Elements.AddRun("Second list item");

        paragraph = textBox.Paragraphs.Add();
        paragraph.Format.List.NumberType = ListNumberType.DecimalPeriod;
        run = paragraph.Elements.AddRun("Third list item");

        workbook.Save("Text Boxes.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Shapes/Program.cs:
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Drawing;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Shapes");

        var shape = worksheet.Shapes.Add(ShapeType.Oval, 100, 100, 200, 150, LengthUnit.Point);
        shape.Fill.SetSolid(DrawingColor.FromName(DrawingColorName.GreenYellow));
        shape.Outline.Fill.SetSolid(DrawingColor.FromName(DrawingColorName.DarkBlue));
        shape.Outline.Width = Length.From(3, LengthUnit.Point);

        var roundedRectangle = worksheet.Shapes.Add(ShapeType.RoundedRectangle, "B2", "D4");
        // Radius of the corners is 35% of the rounded rectangle height (since it is smaller than width).
        roundedRectangle.AdjustValues["adj"] = 35000;

        var rightArrow = worksheet.Shapes.Add(ShapeType.RightArrow, "B6", 100, 40, LengthUnit.Point);
        rightArrow.Fill.SetNone();
        rightArrow.Outline.Fill.SetSolid(DrawingColor.FromRgb(250, 30, 20));
        rightArrow.Outline.Width = Length.From(2, LengthUnit.Point);

        var line = worksheet.Shapes.Add(ShapeType.Line, "B12", "B15");
        line.Outline.Width = Length.From(10, LengthUnit.Pixel);

        workbook.Save("Shapes.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Hyperlinks/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Hyperlinks");
        var hyperlinkStyle = workbook.Styles[BuiltInCellStyleName.Hyperlink];

        var cell = worksheet.Cells["B1"];
        cell.Value = "Link to GemBox homepage";
        cell.Style = hyperlinkStyle;
        cell.Hyperlink.Location = "https://www.gemboxsoftware.com";
        cell.Hyperlink.IsExternal = true;

        cell = worksheet.Cells["B3"];
        cell.Value = "Jump";
        cell.Style = hyperlinkStyle;
        cell.Hyperlink.ToolTip = "This is tool tip! This hyperlink jumps to E1.";
        cell.Hyperlink.Location = worksheet.Name + "!E3";

        worksheet.Cells["E3"].Value = "Jump destination";

        cell = worksheet.Cells["B5"];
        cell.Formula = "=HYPERLINK(\"https://www.gemboxsoftware.com/spreadsheet/examples/excel-cell-hyperlinks/207\", \"Link to Hyperlinks example\")";
        cell.Style = hyperlinkStyle;

        workbook.Save("Hyperlinks.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Form Controls/Program.cs:
using System;
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Drawing;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Form Controls");

        var checkBox = worksheet.FormControls.AddCheckBox("Simple check box", "B2", 100, 15, LengthUnit.Point);
        checkBox.CellLink = worksheet.Cells["A2"];
        checkBox.Checked = true;

        worksheet.Cells["A4"].Value = "VALUE A";
        worksheet.Cells["A5"].Value = "VALUE B";
        worksheet.Cells["A6"].Value = "VALUE C";
        worksheet.Cells["A7"].Value = "VALUE D";
        var comboBox = worksheet.FormControls.AddComboBox("B4", 100, 20, LengthUnit.Point);
        comboBox.InputRange = worksheet.Cells.GetSubrange("A4:A7");
        comboBox.SelectedIndex = 2;

        var scrollBar = worksheet.FormControls.AddScrollBar("B9", 100, 20, LengthUnit.Point);
        scrollBar.CellLink = worksheet.Cells["A9"];
        scrollBar.MinimumValue = 10;
        scrollBar.MaximumValue = 50;
        scrollBar.CurrentValue = 20;

        workbook.Save("Form Controls.xlsx");
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("FormControls.xlsx");
        var worksheet = workbook.Worksheets[0];

        // Update CheckBox control.
        var checkBox = worksheet.FormControls[0] as CheckBox;
        checkBox.Checked = false;

        // Read CheckBox control.
        Console.WriteLine("CheckBox checked: " + checkBox.Checked);
        Console.WriteLine("Linked cell value: " + checkBox.CellLink?.Value);
        Console.WriteLine();

        // Update ComboBox control.
        var comboBox = worksheet.FormControls[1] as ComboBox;
        comboBox.SelectedIndex = 1;

        // Read ComboBox control.
        Console.WriteLine("ComboBox range: " + comboBox.InputRange?.Name);
        Console.WriteLine("ComboBox selected: " + comboBox.SelectedValue);
        Console.WriteLine();

        // Update ScrollBar control.
        var scrollBar = worksheet.FormControls[2] as ScrollBar;
        scrollBar.CurrentValue = 33;

        // Read ScrollBar control.
        Console.WriteLine("ScrollBar current: " + scrollBar.CurrentValue);
        Console.WriteLine("Linked cell value: " + scrollBar.CellLink?.Value);
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Headers and Footers/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("HeadersFooters");

        SheetHeaderFooter sheetHeadersFooters = worksheet.HeadersFooters;

        HeaderFooterPage firstHeaderFooter = sheetHeadersFooters.FirstPage;
        HeaderFooterPage defaultHeaderFooter = sheetHeadersFooters.DefaultPage;

        // Set title text on the center of the first page header.
        firstHeaderFooter.Header.CenterSection
            .Append("Title on the first page",
                new ExcelFont() { Name = "Arial Black", Size = 18 * 20 });

        // Set image on the left of the first and default page headers.
        firstHeaderFooter.Header.LeftSection
            .AppendPicture("Dices.png", 40, 30);
        defaultHeaderFooter.Header.LeftSection = firstHeaderFooter.Header.LeftSection;

        // Set page number on the right of the first and default page footer.
        firstHeaderFooter.Footer.RightSection
            .Append("Page ")
            .Append(HeaderFooterFieldType.PageNumber)
            .Append(" of ")
            .Append(HeaderFooterFieldType.NumberOfPages);
        defaultHeaderFooter.Footer = firstHeaderFooter.Footer;

        worksheet.Cells[0, 0].Value = "First page";
        worksheet.Cells[0, 5].Value = "Second page";
        worksheet.Cells[0, 10].Value = "Third page";

        worksheet.VerticalPageBreaks.Add(5);
        worksheet.VerticalPageBreaks.Add(10);

        workbook.Save("Headers and Footers.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Document Properties/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        
        var workbook = ExcelFile.Load("ComplexTemplate.xlsx");
        var properties = workbook.DocumentProperties;

        Console.WriteLine("# Built-in document properties:");

        // Write built-in document properties.
        properties.BuiltIn[BuiltInDocumentProperties.Title] = "My Spreadsheet Title";
        properties.BuiltIn[BuiltInDocumentProperties.DateLastSaved] = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ");

        // Read built-in document properties.
        foreach (var builtinProperty in properties.BuiltIn)
            Console.WriteLine($"{builtinProperty.Key,20}: {builtinProperty.Value}");

        Console.WriteLine();
        Console.WriteLine("# Custom document properties:");

        // Write custom document properties.
        properties.Custom["My Custom Property 1"] = "My Custom Value";
        properties.Custom["My Custom Property 2"] = 123.4;

        // Read custom document properties.
        foreach (var customProperty in properties.Custom)
            Console.WriteLine($"{customProperty.Key,20}: {customProperty.Value,-20} [{customProperty.Value.GetType()}]");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Pivot Tables/Program.cs:
using System;
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.PivotTables;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet1 = workbook.Worksheets.Add("SourceSheet");

        // Specify sheet formatting.
        worksheet1.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
        worksheet1.Columns[0].SetWidth(3, LengthUnit.Centimeter);
        worksheet1.Columns[1].SetWidth(3, LengthUnit.Centimeter);
        worksheet1.Columns[2].SetWidth(3, LengthUnit.Centimeter);
        worksheet1.Columns[3].SetWidth(3, LengthUnit.Centimeter);
        worksheet1.Columns[3].Style.NumberFormat = "[$$-409]#,##0.00";

        var cells = worksheet1.Cells;

        // Specify header row.
        cells[0, 0].Value = "Departments";
        cells[0, 1].Value = "Names";
        cells[0, 2].Value = "Years of Service";
        cells[0, 3].Value = "Salaries";

        // Insert random data to sheet.
        var random = new Random();
        var departments = new string[] { "Legal", "Marketing", "Finance", "Planning", "Purchasing" };
        var names = new string[] { "John Doe", "Fred Nurk", "Hans Meier", "Ivan Horvat" };
        var years = new string[] { "1-10", "11-20", "21-30", "over 30" };
        for (int i = 0; i < 100; ++i)
        {
            cells[i + 1, 0].Value = departments[random.Next(departments.Length)];
            cells[i + 1, 1].Value = names[random.Next(names.Length)] + ' ' + (i + 1).ToString();
            cells[i + 1, 2].Value = years[random.Next(years.Length)];
            cells[i + 1, 3].SetValue(random.Next(10, 101) * 100);
        }

        // Create pivot cache from cell range "SourceSheet!A1:D100".
        var cache = workbook.PivotCaches.AddWorksheetSource("SourceSheet!A1:D100");

        // Create new sheet for pivot table.
        var worksheet2 = workbook.Worksheets.Add("PivotSheet");

        // Create pivot table "Company Profile" using the specified pivot cache and add it to the worksheet at the cell location 'A1'.
        var table = worksheet2.PivotTables.Add(cache, "Company Profile", "A1");

        // Aggregate 'Names' values into count value and show it as a percentage of row.
        var field = table.DataFields.Add("Names");
        field.Function = PivotFieldCalculationType.Count;
        field.ShowDataAs = PivotFieldDisplayFormat.PercentageOfRow;
        field.Name = "% of Empl.";

        // Aggregate 'Salaries' values into average value.
        field = table.DataFields.Add("Salaries");
        field.Function = PivotFieldCalculationType.Average;
        field.Name = "Avg. Salary";
        field.NumberFormat = "[$$-409]#,##0.00";

        // Group rows into 'Departments'.
        table.RowFields.Add("Departments");

        // Group columns first into 'Years of Service' and then into 'Values' (count 'Names' and average 'Salaries').
        table.ColumnFields.Add("Years of Service");
        table.ColumnFields.Add(table.DataPivotField);

        // Specify the string to be displayed in row and column header.
        table.RowHeaderCaption = "Departments";
        table.ColumnHeaderCaption = "Years of Service";

        // Do not show grand totals for rows.
        table.RowGrandTotals = false;

        // Set pivot table style.
        table.BuiltInStyle = BuiltInPivotStyleName.PivotStyleMedium10;

        workbook.Save("Pivot Tables.xlsx");
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("PivotTableSource.xlsx");
        var sourceSheet = workbook.Worksheets["SourceSheet"];
        var pivotSheet = workbook.Worksheets["PivotSheet"];
        var pivotTable = pivotSheet.PivotTables[0];

        // Calculate the pivot table with existing values in the pivot cache.
        pivotTable.Calculate();

        Console.WriteLine("Pivot table values before:");
        foreach (var row in pivotSheet.Rows)
        {
            foreach (var cell in row.AllocatedCells)
                Console.Write(cell.GetFormattedValue().PadRight(30));
            Console.WriteLine();
        }

        // Change the values in the source sheet.
        sourceSheet.Cells["D2"].Value = 15300;
        sourceSheet.Cells["D4"].Value = 13300;
        sourceSheet.Cells["D7"].Value = 18500;

        // Refresh the pivot cache.
        pivotTable.PivotCache.Refresh();
        // Calculate the pivot table.
        pivotTable.Calculate();

        Console.WriteLine("-------------------------------------");
        Console.WriteLine("Pivot table values after:");
        foreach (var row in pivotSheet.Rows)
        {
            foreach (var cell in row.AllocatedCells)
                Console.Write(cell.GetFormattedValue().PadRight(30));
            Console.WriteLine();
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Protection/PDF Encryption/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        var password = "pass";
        var ownerPassword = "";

        var options = new PdfSaveOptions()
        {
            DocumentOpenPassword = password,
            PermissionsPassword = ownerPassword,
            Permissions = PdfPermissions.None
        };

        workbook.Save("PDF Encryption.pdf", options);
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Protection/Sheet Protection/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Sheet Protection");

        worksheet.Cells[0, 2].Value = "Only cells from A1 to A10 are editable.";

        for (int i = 0; i < 10; i++)
        {
            var cell = worksheet.Cells[i, 0];
            cell.SetValue(i);
            cell.Style.Locked = false;
        }

        worksheet.Protected = true;

        worksheet.Cells[2, 2].Value = "Inserting columns is allowed (only supported for XLSX file format).";
        var protectionSettings = worksheet.ProtectionSettings;
        protectionSettings.AllowInsertingColumns = true;

        worksheet.Cells[3, 2].Value = "Sheet password is 123 (only supported for XLSX file format).";
        protectionSettings.SetPassword("123");

        workbook.Save("Sheet Protection.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Protection/PDF Digital Signature/Program.cs:
using GemBox.Pdf.Forms;
using GemBox.Pdf.Security;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        PAdES_B_B();

        PAdES_B_LTA();
    }

    static void PAdES_B_B()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        // Create visual representation of digital signature at the beginning of the worksheet.
        var signature = workbook.Worksheets[0].Pictures.Add("GemBoxSignature.png", "B2");

        var options = new PdfSaveOptions()
        {
            DigitalSignature =
            {
                CertificatePath = "GemBoxECDsa521.pfx",
                CertificatePassword = "GemBoxPassword",
                Signature = signature,
                IsAdvancedElectronicSignature = true
            }
        };

        workbook.Save("PDF Digital Signature.pdf", options);
    }

    static void PAdES_B_LTA()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        // Create visual representation of digital signature at the beginning of the first worksheet.
        var signature = workbook.Worksheets[0].Pictures.Add("GemBoxSignature.png", "B2");

        // If using the Professional version, put your serial key below.
        GemBox.Pdf.ComponentInfo.SetLicense("FREE-LIMITED-KEY");

        // Get a digital ID from PKCS#12/PFX file.
        var digitalId = new PdfDigitalId("GemBoxECDsa521.pfx", "GemBoxPassword");

        // Create a PDF signer that will create PAdES B-LTA level signature.
        var signer = new PdfSigner(digitalId);

        // PdfSigner should create CAdES-equivalent signature.
        signer.SignatureFormat = PdfSignatureFormat.CAdES;

        // PdfSigner will embed a timestamp created by freeTSA.org Time Stamp Authority in the signature.
        signer.Timestamper = new PdfTimestamper("https://freetsa.org/tsr");

        // Make sure that all properties specified on PdfSigner are according to PAdES B-LTA level.
        signer.SignatureLevel = PdfSignatureLevel.PAdES_B_LTA;

        // Inject PdfSigner from GemBox.Pdf into
        // PdfDigitalSignatureSaveOptions from GemBox.Spreadsheet.
        var signatureOptions = PdfDigitalSignatureSaveOptions.FromSigner(
            () => signer.SignatureFormat.ToString(),
            () => signer.EstimatedSignatureContentsLength,
            signer.ComputeSignature);

        signatureOptions.Signature = signature;

        var options = new PdfSaveOptions()
        {
            DigitalSignature = signatureOptions
        };

        workbook.Save("PAdES B-LTA.pdf", options);

        using (var pdfDocument = GemBox.Pdf.PdfDocument.Load("PAdES B-LTA.pdf"))
        {
            var signatureField = (PdfSignatureField)pdfDocument.Form.Fields[0];

            // Download validation-related information for the signature and the signature's timestamp and embed it in the PDF file.
            // This will make the signature "LTV enabled".
            pdfDocument.SecurityStore.AddValidationInfo(signatureField.Value);

            // Add an invisible signature field to the PDF document that will hold the document timestamp.
            var timestampField = pdfDocument.Form.Fields.AddSignature();

            // Initiate timestamping of a PDF file with the specified timestamper.
            timestampField.Timestamp(signer.Timestamper);

            // Save any changes done to the PDF file that were done since the last time Save was called and
            // finish timestamping of a PDF file.
            pdfDocument.Save();
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Protection/XLSX Encryption/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var inputPassword = "inpass";
        var outputPassword = "outpass";

        var workbook = ExcelFile.Load("XlsxEncryption.xlsx",
            new XlsxLoadOptions() { Password = inputPassword });

        workbook.Save("XLSX Encryption.xlsx",
            new XlsxSaveOptions() { Password = outputPassword });
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Protection/Workbook Protection/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Workbook Protection");

        var protectionSettings = workbook.ProtectionSettings;
        protectionSettings.ProtectStructure = true;

        worksheet.Cells[0, 0].Value = "Workbook password is 123 (only supported for XLSX file format).";
        protectionSettings.SetPassword("123");

        workbook.Save("Workbook Protection.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Protection/XLSX Digital Signature/Program.cs:
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Security;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        var saveOptions = new XlsxSaveOptions();
        saveOptions.DigitalSignatures.Add(new XlsxDigitalSignatureSaveOptions()
        {
            CertificatePath = "GemBoxECDsa521.pfx",
            CertificatePassword = "GemBoxPassword"
        });

        workbook.Save("XLSX Digital Signature.xlsx", saveOptions);
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        var signature1 = new XlsxDigitalSignatureSaveOptions()
        {
            CertificatePath = "GemBoxECDsa521.pfx",
            CertificatePassword = "GemBoxPassword",
            CommitmentType = DigitalSignatureCommitmentType.Created,
            SignerRole = "Developer"
        };
        // Embed intermediate certificate.
        signature1.Certificates.Add(new Certificate("GemBoxECDsa.crt"));

        var signature2 = new XlsxDigitalSignatureSaveOptions()
        {
            CertificatePath = "GemBoxRSA4096.pfx",
            CertificatePassword = "GemBoxPassword",
            CommitmentType = DigitalSignatureCommitmentType.Approved,
            SignerRole = "Manager"
        };
        // Embed intermediate certificate.
        signature2.Certificates.Add(new Certificate("GemBoxRSA.crt"));

        var saveOptions = new XlsxSaveOptions();
        saveOptions.DigitalSignatures.Add(signature1);
        saveOptions.DigitalSignatures.Add(signature2);

        workbook.Save("XLSX Digital Signatures.xlsx", saveOptions);
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Protection/XLS Decryption/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var inputPassword = "inpass";

        var workbook = ExcelFile.Load("XlsDecryption.xls",
            new XlsLoadOptions() { Password = inputPassword });

        workbook.Save("Decrypted File.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Formatting/Styles and Formatting/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Styles");

        worksheet.Rows[0].Style = workbook.Styles[BuiltInCellStyleName.Heading1];
        worksheet.Columns[0].Width = 30 * 256;
        worksheet.Columns[1].Width = 35 * 256;

        worksheet.Cells[0, 0].Value = "Property";
        worksheet.Cells[0, 1].Value = "Result";

        int row = 0;
        worksheet.Cells[row += 2, 0].Value = "Borders";
        worksheet.Cells[row, 1].Style.Borders.SetBorders(
            MultipleBorders.All | MultipleBorders.Diagonal,
            SpreadsheetColor.FromArgb(252, 1, 1),
            LineStyle.Thin);

        worksheet.Cells[row += 2, 0].Value = "FillPattern";
        worksheet.Cells[row, 1].Style.FillPattern.SetPattern(
            FillPatternStyle.ThinHorizontalCrosshatch,
            SpreadsheetColor.FromName(ColorName.Green),
            SpreadsheetColor.FromName(ColorName.Yellow));

        worksheet.Cells[row += 2, 0].Value = "Font.Color";
        worksheet.Cells[row, 1].Value = "Color.Blue";
        worksheet.Cells[row, 1].Style.Font.Color = SpreadsheetColor.FromName(ColorName.Blue);

        worksheet.Cells[row += 2, 0].Value = "Font.Italic";
        worksheet.Cells[row, 1].Value = "true";
        worksheet.Cells[row, 1].Style.Font.Italic = true;

        worksheet.Cells[row += 2, 0].Value = "Font.Name";
        worksheet.Cells[row, 1].Value = "Comic Sans MS";
        worksheet.Cells[row, 1].Style.Font.Name = "Comic Sans MS";

        worksheet.Cells[row += 2, 0].Value = "Font.ScriptPosition";
        worksheet.Cells[row, 1].Value = "ScriptPosition.Superscript";
        worksheet.Cells[row, 1].Style.Font.ScriptPosition = ScriptPosition.Superscript;

        worksheet.Cells[row += 2, 0].Value = "Font.Size";
        worksheet.Cells[row, 1].Value = "18 * 20";
        worksheet.Cells[row, 1].Style.Font.Size = 18 * 20;

        worksheet.Cells[row += 2, 0].Value = "Font.Strikeout";
        worksheet.Cells[row, 1].Value = "true";
        worksheet.Cells[row, 1].Style.Font.Strikeout = true;

        worksheet.Cells[row += 2, 0].Value = "Font.UnderlineStyle";
        worksheet.Cells[row, 1].Value = "UnderlineStyle.Double";
        worksheet.Cells[row, 1].Style.Font.UnderlineStyle = UnderlineStyle.Double;

        worksheet.Cells[row += 2, 0].Value = "Font.Weight";
        worksheet.Cells[row, 1].Value = "ExcelFont.BoldWeight";
        worksheet.Cells[row, 1].Style.Font.Weight = ExcelFont.BoldWeight;

        worksheet.Cells[row += 2, 0].Value = "HorizontalAlignment";
        worksheet.Cells[row, 1].Value = "HorizontalAlignmentStyle.Center";
        worksheet.Cells[row, 1].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;

        worksheet.Cells[row += 2, 0].Value = "Indent";
        worksheet.Cells[row, 1].Value = "five";
        worksheet.Cells[row, 1].Style.HorizontalAlignment = HorizontalAlignmentStyle.Left;
        worksheet.Cells[row, 1].Style.Indent = 5;

        worksheet.Cells[row += 2, 0].Value = "IsTextVertical";
        worksheet.Cells[row, 1].Value = "true";
        worksheet.Rows[row].Height = 60 * 20;
        worksheet.Cells[row, 1].Style.IsTextVertical = true;

        worksheet.Cells[row += 2, 0].Value = "NumberFormat";
        worksheet.Cells[row, 1].Value = 1234;
        worksheet.Cells[row, 1].Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]";

        worksheet.Cells[row += 2, 0].Value = "Rotation";
        worksheet.Cells[row, 1].Value = "35 degrees up";
        worksheet.Cells[row, 1].Style.Rotation = 35;

        worksheet.Cells[row += 2, 0].Value = "ShrinkToFit";
        worksheet.Cells[row, 1].Value = "This property is set to true so this text appears shrunk.";
        worksheet.Cells[row, 1].Style.ShrinkToFit = true;

        worksheet.Cells[row += 2, 0].Value = "VerticalAlignment";
        worksheet.Cells[row, 1].Value = "VerticalAlignmentStyle.Top";
        worksheet.Rows[row].Height = 30 * 20;
        worksheet.Cells[row, 1].Style.VerticalAlignment = VerticalAlignmentStyle.Top;

        worksheet.Cells[row += 2, 0].Value = "WrapText";
        worksheet.Cells[row, 1].Value = "This property is set to true so this text appears broken into multiple lines.";
        worksheet.Cells[row, 1].Style.WrapText = true;

        workbook.Save("Styles and Formatting.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Formatting/Inline Text Formatting/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("InlineTextFormatting");

        worksheet.Columns[0].Width = 50 * 256;

        var cell = worksheet.Cells["A1"];
        cell.Value = "This is big and red text!";

        // Apply the size to "big and red" part of the text.
        cell.GetCharacters(8, 11).Font.Size = 400;

        // Apply the color to "red" part of the text.
        cell.GetCharacters(16, 3).Font.Color = SpreadsheetColor.FromName(ColorName.Red);

        cell = worksheet.Cells["A3"];
        cell.Value = "Formatting selected characters with GemBox.Spreadsheet component.";

        // Apply formatting on the whole cell content.
        cell.Style.Font.Color = SpreadsheetColor.FromName(ColorName.Blue);
        cell.Style.Font.Italic = true;
        cell.Style.WrapText = true;

        // Get characters from index 36 to the end of string,
        // e.g. the "GemBox.Spreadsheet component." part of the text.
        var characters = cell.GetCharacters(36);

        // Apply the color and underline to selected characters.
        characters.Font.Color = SpreadsheetColor.FromName(ColorName.Orange);
        characters.Font.UnderlineStyle = UnderlineStyle.Single;

        // Write selected characters.
        worksheet.Cells["A5"].Value = "Selected characters: " + characters.Text;

        workbook.Save("Inline Text Formatting.xlsx");
    }

    static void Example2()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("HtmlTextFormatting");

        worksheet.Columns[0].Width = 50 * 256;

        var htmlOptions = new HtmlLoadOptions();
        var html = "<h1 style='background:#DDEBF7'>HTML formatted text!</h1>";

        worksheet.Cells["A1"].SetValue(html, htmlOptions);

        html = @"<div style='font:11pt Calibri'>
<p>This is <span style='font-size:20pt'>big and <span style='color:red'>red</span></span> text!</p>
<p>This is <sub>subscript</sub>, <sup>superscript</sup>, <strike>strike</strike>, and <u>underline</u> text.</p>
</div>";

        worksheet.Cells["A3"].SetValue(html, htmlOptions);

        workbook.Save("Html Text Formatting.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Formatting/Number Formatting/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    public static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Formats");

        worksheet.Rows[0].Style = workbook.Styles[BuiltInCellStyleName.Heading1];
        worksheet.Columns[0].Width = 25 * 256;
        worksheet.Columns[1].Width = 35 * 256;
        worksheet.Columns[2].Width = 25 * 256;

        worksheet.Cells[0, 0].Value = "Value & Format";
        worksheet.Cells[0, 1].Value = "Format";
        worksheet.Cells[0, 2].Value = "Type";

        // Sample data with values and formats.
        var data = new (object Value, string Format)[]
        {
            (1.23, "0"),
            (1.23, "0.00"),
            (1.2345, "0.000"),
            (-2.345, @"0.00_);[Red]\(0.00\)"),
            (2.34, @"\$#,##0.00"),
            (2345.67, @"#,##0.00\ [$�-1]"),
            (new DateTime(2012, 11, 9, 0, 0, 0), @"[$-F800]dddd\,\ mmmm\ dd\,\ yyyy"),
            (new DateTime(2012, 12, 5, 0, 0, 0), @"[$-409]mmmm\ d\,\ yyyy;@"),
            (new DateTime(2012, 8, 10, 0, 0, 0), @"yyyy\-mm\-dd\ \(dddd\)"),
            (new DateTime(2012, 8, 12, 0, 13, 0), @"[$-409]m/d/yy\ h:mm\ AM/PM;@"),
            (new DateTime(2012, 8, 1, 21, 10, 0), @"[$-409]h:mm\ AM/PM;@"),
            (new DateTime(1900, 1, 1, 6, 45, 30), "[h]:mm:ss"),
            (0.0123, "0%"),
            (0.0123, "0.00%"),
            (120000, "0.00E+00"),
            (1.25, @"# ?/?"),
            (1.25, @"#\ ?/100"),
            ("Sample text", "@")
        };

        for (int i = 0; i < data.Length; i++)
        {
            var item = data[i];

            // Write value and set number format to a cell.
            worksheet.Cells[i + 1, 0].Value = item.Value;
            worksheet.Cells[i + 1, 0].Style.NumberFormat = item.Format;

            // Write number format as cell's value.
            worksheet.Cells[i + 1, 1].Value = item.Format;

            // Write data type as cell's value.
            worksheet.Cells[i + 1, 2].Value = item.Value.GetType().ToString();
        }

        workbook.Save("Number Formats.xlsx");
    }

    public static void Example2()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("sheet");
        worksheet.Columns[0].SetWidth(200, LengthUnit.Pixel);

        // Show the value as a number with two decimal places and thousands separator.
        worksheet.Cells[0, 0].Style.NumberFormat =
            NumberFormatBuilder.Number(2, useThousandsSeparator: true);
        worksheet.Cells[0, 0].Value = 2500.333;

        // Show the value in Euros and display negative values in parentheses.
        worksheet.Cells[1, 0].Style.NumberFormat =
            NumberFormatBuilder.Currency("�", 2, useParenthesesToDisplayNegativeValue: true);
        worksheet.Cells[1, 0].Value = -50;

        // Show the value in accounting format with three decimal places.
        worksheet.Cells[2, 0].Style.NumberFormat =
            NumberFormatBuilder.Accounting(3, currencySymbol: "$");
        worksheet.Cells[2, 0].Value = -50;

        // Show the value in ISO 8061 date format.
        worksheet.Cells[3, 0].Style.NumberFormat =
            NumberFormatBuilder.DateTimeIso8061();
        worksheet.Cells[3, 0].Value = DateTime.Now;

        // Show the value as percentage.
        worksheet.Cells[4, 0].Style.NumberFormat =
            NumberFormatBuilder.Percentage(2);
        worksheet.Cells[4, 0].Value = 1 / 3d;

        // Show the value as fraction with 100 as a denominator.
        worksheet.Cells[5, 0].Style.NumberFormat =
            NumberFormatBuilder.FractionWithPreciseDenominator(100);
        worksheet.Cells[5, 0].Value = 1 / 3d;

        // Show the value in scientific notation using two decimal places.
        worksheet.Cells[6, 0].Style.NumberFormat =
            NumberFormatBuilder.Scientific(2);
        worksheet.Cells[6, 0].Value = Math.Pow(Math.PI, 10);

        workbook.Save("Number Format Builder.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Formatting/Conditional Formatting/Program.cs:
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.ConditionalFormatting;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // If using the Professional version, remove this FreeLimitReached event handler.
        SpreadsheetInfo.FreeLimitReached += (sender, e) => e.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;

        var workbook = ExcelFile.Load("SampleData.xlsx");
        var worksheet = workbook.Worksheets["Data"];
        int rowCount = worksheet.Rows.Count;

        // Apply shading to alternate rows in a worksheet using 'Formula' based conditional formatting.
        worksheet.ConditionalFormatting.AddFormula(worksheet.Cells.Name, "MOD(ROW(),2)=0")
            .Style.FillPattern.PatternBackgroundColor = SpreadsheetColor.FromName(ColorName.Accent1Lighter40Pct);

        // Apply '2-Color Scale' conditional formatting to 'Years of Service' column.
        worksheet.ConditionalFormatting.Add2ColorScale("C2:C" + (rowCount + 1));

        // Apply '3-Color Scale' conditional formatting to 'Salaries' column.
        worksheet.ConditionalFormatting.Add3ColorScale("D2:D" + (rowCount + 1));

        // Apply 'Data Bar' conditional formatting to 'Salaries' column.
        worksheet.ConditionalFormatting.AddDataBar("D2:D" + (rowCount + 1));

        // Apply 'Icon Set' conditional formatting to 'Years of Service' column.
        worksheet.ConditionalFormatting.AddIconSet("C2:C" + (rowCount + 1)).IconStyle = SpreadsheetIconStyle.FourTrafficLights;

        // Apply green font color to cells in a 'Years of Service' column which have values between 15 and 20.
        worksheet.ConditionalFormatting.AddContainValue("C2:C" + (rowCount + 1), ContainValueOperator.Between, 15, 20)
            .Style.Font.Color = SpreadsheetColor.FromName(ColorName.Green);

        // Apply double red border to cells in a 'Names' column which contain text 'Doe'.
        worksheet.ConditionalFormatting.AddContainText("B2:B" + (rowCount + 1), ContainTextOperator.Contains, "Doe")
            .Style.Borders.SetBorders(MultipleBorders.Outside, SpreadsheetColor.FromName(ColorName.Red), LineStyle.Double);

        // Apply red shading to cells in a 'Deadlines' column which are equal to yesterday's date.
        worksheet.ConditionalFormatting.AddContainDate("E2:E" + (rowCount + 1), ContainDateOperator.Yesterday)
            .Style.FillPattern.PatternBackgroundColor = SpreadsheetColor.FromName(ColorName.Red);

        // Apply bold font weight to cells in a 'Salaries' column which have top 10 values.
        worksheet.ConditionalFormatting.AddTopOrBottomRanked("D2:D" + (rowCount + 1), false, 10)
            .Style.Font.Weight = ExcelFont.BoldWeight;

        // Apply double underline to cells in a 'Years of Service' column which have below average value.
        worksheet.ConditionalFormatting.AddAboveOrBelowAverage("C2:C" + (rowCount + 1), true)
            .Style.Font.UnderlineStyle = UnderlineStyle.Double;

        // Apply italic font style to cells in a 'Departments' column which have duplicate values.
        worksheet.ConditionalFormatting.AddUniqueOrDuplicate("A2:A" + (rowCount + 1), true)
            .Style.Font.Italic = true;

        workbook.Save("Conditional Formatting.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/DataTable to Sheet/Program.cs:
using System.Data;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("DataTable to Sheet");

        var dataTable = new DataTable();

        dataTable.Columns.Add("ID", typeof(int));
        dataTable.Columns.Add("FirstName", typeof(string));
        dataTable.Columns.Add("LastName", typeof(string));

        dataTable.Rows.Add(new object[] { 100, "John", "Doe" });
        dataTable.Rows.Add(new object[] { 101, "Fred", "Nurk" });
        dataTable.Rows.Add(new object[] { 103, "Hans", "Meier" });
        dataTable.Rows.Add(new object[] { 104, "Ivan", "Horvat" });
        dataTable.Rows.Add(new object[] { 105, "Jean", "Dupont" });
        dataTable.Rows.Add(new object[] { 106, "Mario", "Rossi" });

        worksheet.Cells[0, 0].Value = "DataTable insert example:";

        // Insert DataTable to an Excel worksheet.
        worksheet.InsertDataTable(dataTable,
            new InsertDataTableOptions()
            {
                ColumnHeaders = true,
                StartRow = 2
            });

        workbook.Save("DataTable to Sheet.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/Sheet to DataTable/Program.cs:
using System;
using System.Data;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        // Create DataTable with specified columns.
        var dataTable = new DataTable();
        dataTable.Columns.Add("First_Column", typeof(string));
        dataTable.Columns.Add("Second_Column", typeof(string));
        dataTable.Columns.Add("Third_Column", typeof(int));
        dataTable.Columns.Add("Fourth_Column", typeof(double));

        // Select the first worksheet from the file.
        var worksheet = workbook.Worksheets[0];

        // Extract the data from an Excel worksheet to the DataTable.
        var options = new ExtractToDataTableOptions(0, 0, 20);
        options.ExcelCellToDataTableCellConverting += (sender, e) =>
        {
            if (!e.IsDataTableValueValid)
            {
                // Convert ExcelCell value to string.
                if (e.DataTableColumnType == typeof(string))
                    e.DataTableValue = e.ExcelCell.Value?.ToString();
                else
                    e.DataTableValue = DBNull.Value;
            }
        };
        worksheet.ExtractToDataTable(dataTable, options);

        // Write DataTable columns.
        foreach (DataColumn column in dataTable.Columns)
            Console.Write(column.ColumnName.PadRight(20));
        Console.WriteLine();
        foreach (DataColumn column in dataTable.Columns)
            Console.Write($"[{column.DataType}]".PadRight(20));
        Console.WriteLine();
        foreach (DataColumn column in dataTable.Columns)
            Console.Write(new string('-', column.ColumnName.Length).PadRight(20));
        Console.WriteLine();

        // Write DataTable rows.
        foreach (DataRow row in dataTable.Rows)
        {
            foreach (object item in row.ItemArray)
            {
                string value = item.ToString();
                value = value.Length > 20 ? value.Remove(19) + "…" : value;
                Console.Write(value.PadRight(20));
            }
            Console.WriteLine();
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/Convert to Image/Program.cs:
using System.IO;
using System.IO.Compression;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
        Example3();
    }

    static void Example1()
    {
        // Load an Excel file into the ExcelFile object.
        var workbook = ExcelFile.Load("CombinedTemplate.xlsx");

        // Create image save options.
        var imageOptions = new ImageSaveOptions(ImageSaveFormat.Png)
        {
            PageNumber = 0, // Select the first Excel page.
            Width = 1240, // Set the image width.
            CropToContent = true // Export only the sheet's content.
        };

        // Save the ExcelFile object to a PNG file.
        workbook.Save("Output.png", imageOptions);
    }

    static void Example2()
    {
        // Load an Excel file.
        var workbook = ExcelFile.Load("CombinedTemplate.xlsx");

        // Max integer value indicates that all spreadsheet pages should be saved.
        var imageOptions = new ImageSaveOptions(ImageSaveFormat.Tiff)
        {
            SelectionType = SelectionType.EntireFile,
            PageCount = int.MaxValue
        };

        // Save the TIFF file with multiple frames, each frame represents a single Excel page.
        workbook.Save("Output.tiff", imageOptions);
    }

    static void Example3()
    {
        // Load an Excel file.
        var workbook = ExcelFile.Load("CombinedTemplate.xlsx");

        // Get Excel pages.
        var paginatorOptions = new PaginatorOptions() { SelectionType = SelectionType.EntireFile };
        var pages = workbook.GetPaginator(paginatorOptions).Pages;

        // Create a ZIP file for storing PNG files.
        using (var archiveStream = File.OpenWrite("Output.zip"))
        using (var archive = new ZipArchive(archiveStream, ZipArchiveMode.Create))
        {
            var imageOptions = new ImageSaveOptions();

            // Iterate through the Excel pages.
            for (int pageIndex = 0; pageIndex < pages.Count; pageIndex++)
            {
                ExcelFilePage page = pages[pageIndex];

                // Create a ZIP entry for each spreadsheet page.
                var entry = archive.CreateEntry($"Page {pageIndex + 1}.png");

                // Save each spreadsheet page as a PNG image to the ZIP entry.
                using (var imageStream = new MemoryStream())
                using (var entryStream = entry.Open())
                {
                    page.Save(imageStream, imageOptions);
                    imageStream.CopyTo(entryStream);
                }
            }
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/Csv Import and Export/LargeCsvReader.cs:
using System.IO;
using GemBox.Spreadsheet;

public sealed class LargeCsvReader : TextReader
{
    private const int MaxRow = 1_048_576;
    private readonly TextReader reader;
    private readonly CsvLoadOptions options;

    private int currentRow;
    private bool finished;

    public static ExcelFile ReadFile(string path, CsvLoadOptions options)
    {
        var workbook = new ExcelFile();
        int sheetIndex = 0;

        using (var reader = new LargeCsvReader(path, options))
            while (reader.CanReadNextSheet())
                reader.ReadSheet(workbook, $"Sheet{++sheetIndex}");

        return workbook;
    }

    private LargeCsvReader(string path, CsvLoadOptions options)
    {
        this.reader = File.OpenText(path);
        this.options = options;
    }

    public override string ReadLine()
    {
        if (this.currentRow == MaxRow)
            return null;

        ++this.currentRow;
        string line = this.reader.ReadLine();
        if (line == null)
            this.finished = true;

        return line;
    }

    private void ReadSheet(ExcelFile workbook, string name)
    {
        var worksheet = ExcelFile.Load(this, this.options).Worksheets.ActiveWorksheet;
        workbook.Worksheets.AddCopy(name, worksheet);
    }

    private bool CanReadNextSheet()
    {
        if (this.finished)
            return false;

        this.currentRow = 0;
        return true;
    }

    protected override void Dispose(bool disposing) => this.reader.Dispose();
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/Csv Import and Export/Program.cs:
using System;
using System.IO;
using System.Linq;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // If using the Professional version, remove this FreeLimitReached event handler.
        SpreadsheetInfo.FreeLimitReached += (sender, e) => e.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;

        Example1();
        Example2();
        Example3();
        Example4();
        Example5();
    }

    static void Example1()
    {
        // Read CSV file.
        var workbook = ExcelFile.Load("Input.csv", new CsvLoadOptions(CsvType.CommaDelimited));

        // Add new row.
        var worksheet = workbook.Worksheets[0];
        var row = worksheet.Rows[worksheet.Rows.Count];
        row.Cells[0].Value = "Jane Doe";
        row.Cells[1].Value = 3500;
        row.Cells[2].Value = 35;

        // Write CSV file.
        workbook.Save("Output.csv", new CsvSaveOptions(CsvType.CommaDelimited));
    }

    static void Example2()
    {
        var csvOptions = new CsvLoadOptions(CsvType.CommaDelimited)
        {
            AllowNewLineInQuotes = true,
            HasQuotedValues = true,
            HasFormulas = true
        };

        // Read CSV file using specified CsvLoadOptions.
        var workbook = ExcelFile.Load("ArtificalObjectsOnMoon.csv", csvOptions);

        // Calculate Excel formulas from CSV data.
        var worksheet = workbook.Worksheets[0];
        worksheet.Calculate();

        // Iterate through read CSV records.
        foreach (var row in worksheet.Rows)
        {
            // Iterate through read CSV fields.
            foreach (var cell in row.AllocatedCells)
            {
                // Display just the first line of text from Excel cell.
                var value = cell.Value?.ToString() ?? string.Empty;
                Console.Write($"{value.Split('\n')[0],-25}");
            }

            Console.WriteLine();
        }
    }

    static void Example3()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Sheet1");

        // Tabular sample data for exporting into a CSV file.
        var skyscrapers = new object[,]
        {
            { "Rank", "Building", "City", "Country", "Height (m)", "Height (ft)", "Floors", "Built" },
            { 1, "Burj Khalifa", "Dubai", "United Arab Emirates", 829.8, 2722, 163, 2010 },
            { 2, "Shanghai Tower", "Shanghai", "China", 632, 2073, 128, 2015 },
            { 3, "Abraj Al-Bait Towers", "Mecca", "Saudi Arabia", 601, 1971, 120, 2012 },
            { 4, "Ping An Finance Center", "Shenzhen", "China", 599, 1965, 115, 2016 },
            { 5, "Lotte World Tower", "Seoul", "South Korea", 555.7, 1823, 123, 2016 },
            { 6, "One World Trade Center", "New York City", "United States", 546.2, 1792, 104, 2014 },
            { 7, "Guangzhou CTF Finance Centre", "Guangzhou", "China", 530, 1739, 111, 2016 },
            { 7, "Tianjin CTF Finance Centre", "Tianjin", "China", 530, 1739, 98, 2018 },
            { 9, "China Zun", "Beijing", "China", 528, 1732, 108, 2018 },
            { 10, "Willis Tower", "Chicago", "United States", 527, 1729, 108, 1974 },
            { 11, "Taipei 101", "Taipei", "Taiwan", 508, 1667, 101, 2004 },
            { 12, "Shanghai World Financial Center", "Shanghai", "China", 494.3, 1622, 101, 2008 },
            { 13, "International Commerce Centre", "Hong Kong", "China", 484, 1588, 118, 2010 },
            { 15, "Central Park Tower", "New York City", "United States", 472.4, 1550, 103, 2020 },
            { 16, "Landmark 81", "Ho Chi Minh City", "Vietnam", 469.5, 1540, 81, 2018 },
            { 17, "Lakhta Center", "St. Petersburg", "Russia", 462, 1516, 86, 2018 },
            { 18, "John Hancock Center", "Chicago", "United States", 456.9, 1499, 100, 1969 },
            { 19, "Changsha IFS Tower T1", "Changsha", "China", 452, 1483, 94, 2017 },
            { 20, "Petronas Tower 1", "Kuala Lumpur", "Malaysia", 451.9, 1483, 88, 1998 },
            { 20, "Petronas Tower 2", "Kuala Lumpur", "Malaysia", 451.9, 1483, 88, 1998 },
            { 22, "Zifeng Tower", "Nanjing", "China", 450, 1476, 89, 2009 },
            { 22, "Suzhou IFS", "Suzhou", "China", 450, 1476, 98, 2017 },
            { 24, "The Exchange 106", "Kuala Lumpur", "Malaysia", 445.1, 1460, 95, 2018 },
            { 25, "Empire State Building", "New York City", "United States", 443.2, 1454, 102, 1931 },
            { 26, "Kingkey 100", "Shenzhen", "China", 442, 1449, 100, 2011 },
            { 27, "Guangzhou International Finance Center", "Guangzhou", "China", 438.6, 1445, 103, 2009 },
            { 28, "Wuhan Center", "Wuhan", "China", 438, 1437, 88, 2017 },
            { 29, "111 West 57th Street", "New York City", "United States", 435.3, 1428, 82, 2019 },
            { 30, "Dongguan International Trade Center 1", "Dongguan", "China", 426.9, 1401, 88, 2019 },
            { 31, "One Vanderbilt", "New York City", "United States", 427, 1401, 58, 2019 },
            { 32, "432 Park Avenue", "New York City", "United States", 425.5, 1396, 85, 2015 },
            { 33, "Marina 101", "Dubai", "United Arab Emirates", 425, 1394, 101, 2017 },
            { 34, "Trump International Hotel and Tower", "Chicago", "United States", 423.2, 1388, 96, 2009 },
            { 35, "Jin Mao Tower", "Shanghai", "China", 421, 1381, 88, 1998 },
            { 36, "Princess Tower", "Dubai", "United Arab Emirates", 414, 1358, 101, 2012 },
            { 37, "Al Hamra Tower", "Kuwait City", "Kuwait", 412.6, 1354, 80, 2010 },
            { 38, "Two International Finance Centre", "Hong Kong", "China", 412, 1352, 88, 2003 },
            { 39, "Haeundae LCT The Sharp Landmark Tower", "Busan", "South Korea", 411.6, 1350, 101, 2019 },
            { 40, "Guangxi China Resources Tower", "Nanning", "China", 402.7, 1321, 85, 2018 },
            { 41, "Guiyang Financial Center Tower 1", "Guiyang", "China", 401, 1316, 79, 2020 }
        };

        // Write data into Excel cells.
        int rowCount = skyscrapers.GetLength(0);
        int columnCount = skyscrapers.GetLength(1);
        for (int row = 0; row < rowCount; row++)
            for (int column = 0; column < columnCount; column++)
                worksheet.Cells[row, column].Value = skyscrapers[row, column];

        // Format Excel columns.
        worksheet.Columns["E"].Style.NumberFormat = @"0.0 \m";
        worksheet.Columns["F"].Style.NumberFormat = @"0,000 \f\t";

        var csvOptions = new CsvSaveOptions(CsvType.CommaDelimited)
        {
            UseFormattedValues = true
        };

        // Write CSV file using specified CsvSaveOptions.
        workbook.Save("Skyscrapers.csv", csvOptions);
    }

    static void Example4()
    {
        // Create large CSV file.
        using (var csv = File.CreateText("large-file.csv"))
            for (int i = 0; i < 5_000_000; i++)
                csv.WriteLine(i);

        // Import all CSV data into multiple sheets.
        var workbook = LargeCsvReader.ReadFile("large-file.csv", LoadOptions.CsvDefault);

        // Display name and rows count of generated sheets.
        foreach (var worksheet in workbook.Worksheets)
            Console.WriteLine($"Name: {worksheet.Name} | Rows: {worksheet.Rows.Count:#,###}");
    }

    static void Example5()
    {
        // Create large ExcelFile.
        ExcelFile workbook = new ExcelFile();
        ExcelWorksheet worksheet = null;

        int max = 1_048_576;
        for (int index = 0; index < 5_000_000; index++)
        {
            int current = index % max;
            if (current == 0)
                worksheet = workbook.Worksheets.Add($"Sheet{index / max}");
            worksheet.Cells[current, 0].SetValue(index);
        }

        // Export multiple sheets into single CSV file.
        var options = SaveOptions.CsvDefault;
        using (var writer = File.CreateText("large-file.csv"))
            foreach (var sheet in workbook.Worksheets)
            {
                workbook.Worksheets.ActiveWorksheet = sheet;
                workbook.Save(writer, options);
            }

        // Display number of lines, or records, in generated CSV file.
        int csvLinesCount = File.ReadLines("large-file.csv").Count();
        Console.WriteLine($"Records: {csvLinesCount:#,###}");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/Fixed Columns Width Text/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // Define columns width (for input file format).
        var loadOptions = new FixedWidthLoadOptions(
            new FixedWidthColumn(8),
            new FixedWidthColumn(8),
            new FixedWidthColumn(8));

        // Load file.
        var workbook = ExcelFile.Load("FixedColumnsWidthText.prn", loadOptions);

        // Modify file.
        workbook.Worksheets.ActiveWorksheet.GetUsedCellRange(true).Sort(false).By(1).Apply();

        // Define columns width (for output file format).
        var saveOptions = new FixedWidthSaveOptions(
            new FixedWidthColumn(8),
            new FixedWidthColumn(8),
            new FixedWidthColumn(8));

        workbook.Save("Fixed Columns Width Text.prn", saveOptions);
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/Html Import and Export/Program.cs:
using System.Linq;
using System.Xml;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
        Example3();
    }

    static void Example1()
    {
        var workbook = ExcelFile.Load("HtmlExport.xlsx");

        var worksheet = workbook.Worksheets[0];

        // Set some ExcelPrintOptions properties for HTML export.
        worksheet.PrintOptions.PrintHeadings = true;
        worksheet.PrintOptions.PrintGridlines = true;

        // Specify cell range which should be exported to HTML.
        worksheet.NamedRanges.SetPrintArea(worksheet.Cells.GetSubrange("A1", "J42"));

        var options = new HtmlSaveOptions()
        {
            HtmlType = HtmlType.Html,
            SelectionType = SelectionType.EntireFile
        };

        workbook.Save("HtmlExport.html", options);
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("HtmlExport.xlsx");

        // Specify exporting of Excel data as an HTML table with embedded images.
        var options = new HtmlSaveOptions()
        {
            EmbedImages = true,
            HtmlType = HtmlType.HtmlTable
        };

        using (var writer = XmlWriter.Create("SingleHtmlExport.html",
            new XmlWriterSettings() { OmitXmlDeclaration = true }))
        {
            writer.WriteStartElement("html");
            writer.WriteStartElement("body");

            // Write Excel sheets to a single HTML file in reverse order.
            foreach (var worksheet in workbook.Worksheets.Reverse())
            {
                if (worksheet.Visibility != SheetVisibility.Visible)
                    continue;

                writer.WriteElementString("h1", worksheet.Name);
                workbook.Worksheets.ActiveWorksheet = worksheet;
                workbook.Save(writer, options);
            }

            writer.WriteEndDocument();
        }
    }

    static void Example3()
    {
        // Load input HTML file.
        var workbook = ExcelFile.Load("HtmlImport.html");

        // Save output XLSX file.
        workbook.Save("HtmlImport.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/Convert to PDF/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
        Example3();
    }

    static void Example1()
    {
        // In order to convert Excel to PDF, we just need to:
        //   1. Load XLS or XLSX file into ExcelFile object.
        //   2. Save ExcelFile object to PDF file.
        ExcelFile workbook = ExcelFile.Load("ComplexTemplate.xlsx");
        workbook.Save("Convert1.pdf", new PdfSaveOptions() { SelectionType = SelectionType.EntireFile });
    }

    static void Example2()
    {
        // Load Excel file.
        ExcelFile workbook = ExcelFile.Load("ComplexTemplate.xlsx");

        // Get Excel sheet you want to export.
        ExcelWorksheet worksheet = workbook.Worksheets[0];

        // Set targeted sheet as active.
        workbook.Worksheets.ActiveWorksheet = worksheet;

        // Get cell range that you want to export.
        CellRange range = worksheet.Cells.GetSubrange("A5:I14");

        // Set targeted range as print area.
        worksheet.NamedRanges.SetPrintArea(range);

        // Save to PDF file.
        // By default, the SelectionType.ActiveSheet is used.
        workbook.Save("Convert2.pdf");
    }

    static void Example3()
    {
        PdfConformanceLevel conformanceLevel = PdfConformanceLevel.PdfA1a;

        // Load Excel file.
        var workbook = ExcelFile.Load("ComplexTemplate.xlsx");

        // Create PDF save options.
        var options = new PdfSaveOptions()
        {
            ConformanceLevel = conformanceLevel
        };

        // Save to PDF file.
        workbook.Save("Output3.pdf", options);
    }
}
Total files processed: 121
