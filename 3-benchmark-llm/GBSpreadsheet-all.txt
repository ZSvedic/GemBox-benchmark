---------------- Processing ../docs/GemBox.Spreadsheet/**/*.y*ml:

--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FillPatternStyle.yml:
namespace GemBox.Spreadsheet
{

/* <p>Represents the style of fill pattern being used for a cell format.</p>
<p>Currently supported only in XLSX, XLSB and XLS. For all other formats it defaults to either <xref href="GemBox.Spreadsheet.FillPatternStyle.None" data-throw-if-not-resolved="false"></xref> or <xref href="GemBox.Spreadsheet.FillPatternStyle.Solid" data-throw-if-not-resolved="false"></xref>.</p> */
public enum FillPatternStyle
{

/* <p>The fill style is <strong>none</strong> (no fill).</p>
<p>When <xref href="GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor" data-throw-if-not-resolved="false"></xref> and/or <xref href="GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor" data-throw-if-not-resolved="false"></xref> are specified, a pattern of <xref href="GemBox.Spreadsheet.FillPatternStyle.None" data-throw-if-not-resolved="false"></xref> overrides them and means the cell has no fill.</p> */
None = 0

/* <p>The fill style is <strong>solid</strong>.</p>
<p>When solid is specified, the <xref href="GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor" data-throw-if-not-resolved="false"></xref> is the only color rendered, even when a <xref href="GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor" data-throw-if-not-resolved="false"></xref> is also specified.</p> */
Solid = 1

/* <strong>6% Gray</strong> is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color. */
Gray6 = 18

/* <strong>12% Gray</strong> is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color. */
Gray12 = 17

/* <strong>25% Gray</strong> is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color. */
Gray25 = 4

/* <strong>50% Gray</strong> is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color. */
Gray50 = 2

/* <strong>75% Gray</strong> is Microsoft Excel pattern name, but any color can be used instead of black as a foreground color. */
Gray75 = 3

/* <strong>Horizontal Stripe</strong> pattern. */
HorizontalStripe = 5

/* <strong>Vertical Stripe</strong> pattern. */
VerticalStripe = 6

/* <strong>Diagonal Stripe</strong> pattern. */
DiagonalStripe = 8

/* <strong>Reverse Diagonal Stripe</strong> pattern. */
ReverseDiagonalStripe = 7

/* <strong>Diagonal Crosshatch</strong> pattern. */
DiagonalCrosshatch = 9

/* <strong>Thick Diagonal Crosshatch</strong> pattern. */
ThickDiagonalCrosshatch = 10

/* <strong>Thin Horizontal Stripe</strong> pattern. */
ThinHorizontalStripe = 11

/* <strong>Thin Vertical Stripe</strong> pattern. */
ThinVerticalStripe = 12

/* <strong>Thin Diagonal Stripe</strong> pattern. */
ThinDiagonalStripe = 14

/* <strong>Thin Reverse Diagonal Stripe</strong> pattern. */
ThinReverseDiagonalStripe = 13

/* <strong>Thin Horizontal Crosshatch</strong> pattern. */
ThinHorizontalCrosshatch = 15

/* <strong>Thin Diagonal Crosshatch</strong> pattern. */
ThinDiagonalCrosshatch = 16
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.TimeUnit.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a unit of time used by <xref href="GemBox.Spreadsheet.Charts.DateAxis" data-throw-if-not-resolved="false"></xref>. */
public enum TimeUnit
{

/* Chart data is shown in days. */
Days = 0

/* Chart data is shown in months. */
Months = 1

/* Chart data is shown in years. */
Years = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PdfSaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for saving to Portable Document Format (PDF) file. */
public sealed class PdfSaveOptions : SaveOptions, IPdfDocumentWriterSettings
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.PdfSaveOptions" data-throw-if-not-resolved="false"></xref> class. */
public PdfSaveOptions()

/* Gets or sets the operations that are allowed to a user on an encrypted PDF document. */
public PdfPermissions Permissions { get; set; }

/* Specifies the password required for opening the encrypted PDF document. */
public string DocumentOpenPassword { get; set; }

/* Specifies the password for opening the encrypted PDF document without any access restrictions. */
public string PermissionsPassword { get; set; }

/* Gets or sets a value indicating whether to save the whole <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> or just <xref href="GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" data-throw-if-not-resolved="false"></xref>. */
public SelectionType SelectionType { get; set; }

/* Gets or sets the saved images DPI. */
public int ImageDpi { get; set; }

/* Gets or sets the level of conformance for PDF document. */
public PdfConformanceLevel ConformanceLevel { get; set; }

/* Gets or sets a value indicating whether to rasterize vector pictures. */
public bool RasterizeVectorPictures { get; set; }

/* Gets the extended save options that are not natively supported by spreadsheet formats. */
public ExtendedSaveOptions ExtendedOptions { get; }

/* Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1. */
public double MetafileScaleFactor { get; set; }

/* Gets or sets the digital signature options. */
public PdfDigitalSignatureSaveOptions DigitalSignature { get; set; }

/* Gets the content-type for PDF file format: <strong>application/pdf</strong>. */
public override string ContentType { get; }

/* Gets limitations for saving to PDF file format. */
public override FileFormatLimitations Limitations { get; }

/* Occurs when saving progress of a file has changed. */
public event EventHandler<OperationProgressChangedEventArgs> ProgressChanged
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PrintOptions.yml:
namespace GemBox.Spreadsheet
{

/* Specifies information about how a spreadsheet is printed. */
public sealed class PrintOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.PrintOptions" data-throw-if-not-resolved="false"></xref> class. */
public PrintOptions()

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.PrintOptions" data-throw-if-not-resolved="false"></xref> class by using an XML stream (that contains a PrintTicket document) that complies with the XML Print Schema. */
public PrintOptions(MemoryStream xmlStream)

/* Gets or sets a value indicating whether to save the whole <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> or just <xref href="GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" data-throw-if-not-resolved="false"></xref>. */
public SelectionType SelectionType { get; set; }

/* Gets the extended save options that are not natively supported by spreadsheet formats. */
public ExtendedSaveOptions ExtendedOptions { get; }

/* Gets or sets the number of copies of the document to print. */
public int CopyCount { get; set; }

/* Gets or sets the number of pages that print on each printed side of a sheet of paper. */
public int PagesPerSheet { get; set; }

/* Gets or sets the page index of the first page to print. */
public int FromPage { get; set; }

/* Gets or sets the index of the last page to print. */
public int ToPage { get; set; }

/* Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1. */
public double MetafileScaleFactor { get; set; }

/* <p>Gets or sets the name of the printed document in the print queue.</p>
<p>Default value is &apos;<strong>Spreadsheet</strong>&apos;.</p> */
public string DocumentName { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelPictureCollection.yml:
namespace GemBox.Spreadsheet
{

/* Represents a collection of <xref href="GemBox.Spreadsheet.ExcelPicture" data-throw-if-not-resolved="false"></xref>s in the worksheet. */
public sealed class ExcelPictureCollection : ExcelDrawingCollection<ExcelPicture>, IExcelDrawingCollection, IList<ExcelPicture>, ICollection<ExcelPicture>, IEnumerable<ExcelPicture>, IEnumerable
{

/* Adds a new picture to the worksheet which doesn&apos;t move nor sizes with cells. */
public ExcelPicture Add(MemoryStream pictureStream, ExcelPictureFormat pictureFormat, double left, double top, double width, double height, LengthUnit unit)

/* Adds a new picture to the worksheet which doesn&apos;t move nor sizes with cells. */
public ExcelPicture Add(string picturePath, double left, double top, double width, double height, LengthUnit unit)

/* Adds a new picture to the worksheet which doesn&apos;t move nor sizes with cells. */
public ExcelPicture Add(string picturePath, double left, double top, double width, double height, LengthUnit unit, ExcelObjectSourceType sourceType)

/* Adds a new picture to the worksheet which doesn&apos;t move nor sizes with cells. Picture size will be determined by decoding the image data. */
public ExcelPicture Add(string picturePath, double left, double top, LengthUnit unit)

/* Adds a new picture to the worksheet which doesn&apos;t move nor sizes with cells. Picture size will be determined by decoding the image data. */
public ExcelPicture Add(string picturePath, double left, double top, LengthUnit unit, ExcelObjectSourceType sourceType)

/* Adds a new picture to the worksheet which moves but doesn&apos;t size with cells. */
public ExcelPicture Add(MemoryStream pictureStream, ExcelPictureFormat pictureFormat, AnchorCell positionFrom, double width, double height, LengthUnit unit)

/* Adds a new picture to the worksheet which moves but doesn&apos;t size with cells. */
public ExcelPicture Add(MemoryStream pictureStream, ExcelPictureFormat pictureFormat, string positionFromCell, double width, double height, LengthUnit unit)

/* Adds a new picture to the worksheet which moves but doesn&apos;t size with cells. */
public ExcelPicture Add(string picturePath, AnchorCell positionFrom, double width, double height, LengthUnit unit)

/* Adds a new picture to the worksheet which moves but doesn&apos;t size with cells. */
public ExcelPicture Add(string picturePath, AnchorCell positionFrom, double width, double height, LengthUnit unit, ExcelObjectSourceType sourceType)

/* Adds a new picture to the worksheet which moves but doesn&apos;t size with cells. */
public ExcelPicture Add(string picturePath, string positionFromCell, double width, double height, LengthUnit unit)

/* Adds a new picture to the worksheet which moves but doesn&apos;t size with cells. */
public ExcelPicture Add(string picturePath, string positionFromCell, double width, double height, LengthUnit unit, ExcelObjectSourceType sourceType)

/* Adds a new picture to the worksheet which moves but doesn&apos;t size with cells. Picture size will be determined by decoding the image data. */
public ExcelPicture Add(string picturePath, AnchorCell positionFrom)

/* Adds a new picture to the worksheet which moves but doesn&apos;t size with cells. Picture size will be determined by decoding the image data. */
public ExcelPicture Add(string picturePath, AnchorCell positionFrom, ExcelObjectSourceType sourceType)

/* Adds a new picture to the worksheet which moves but doesn&apos;t size with cells. Picture size will be determined by using decoding the image data. */
public ExcelPicture Add(string picturePath, string positionFromCell)

/* Adds a new picture to the worksheet which moves but doesn&apos;t size with cells. Picture size will be determined by decoding the image data. */
public ExcelPicture Add(string picturePath, string positionFromCell, ExcelObjectSourceType sourceType)

/* Adds a new picture to the worksheet which moves and sizes with cells. */
public ExcelPicture Add(MemoryStream pictureStream, ExcelPictureFormat pictureFormat, AnchorCell positionFrom, AnchorCell positionTo)

/* Adds a new picture to the worksheet which moves and sizes with cells. */
public ExcelPicture Add(MemoryStream pictureStream, ExcelPictureFormat pictureFormat, string positionFromCell, string positionToCell)

/* Adds a new picture to the worksheet which moves and sizes with cells. */
public ExcelPicture Add(string picturePath, AnchorCell positionFrom, AnchorCell positionTo)

/* Adds a new picture to the worksheet which moves and sizes with cells. */
public ExcelPicture Add(string picturePath, AnchorCell positionFrom, AnchorCell positionTo, ExcelObjectSourceType sourceType)

/* Adds a new picture to the worksheet which moves and sizes with cells. */
public ExcelPicture Add(string picturePath, string positionFromCell, string positionToCell)

/* Adds a new picture to the worksheet which moves and sizes with cells. */
public ExcelPicture Add(string picturePath, string positionFromCell, string positionToCell, ExcelObjectSourceType sourceType)
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.HeaderFooter.yml:
namespace GemBox.Spreadsheet
{

/* Represents worksheet&apos;s header or footer. */
public sealed class HeaderFooter
{

/* <xref href="GemBox.Spreadsheet.HeaderFooter" data-throw-if-not-resolved="false"></xref> constructor. */
public HeaderFooter()

/* Gets or sets left section. */
public HeaderFooterSection LeftSection { get; set; }

/* Gets or sets center section. */
public HeaderFooterSection CenterSection { get; set; }

/* Gets or sets right section. */
public HeaderFooterSection RightSection { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SheetType.yml:
namespace GemBox.Spreadsheet
{

/* Specifies the sheet type. */
public enum SheetType
{

/* The most common type of sheet is the worksheet, which is represented as a grid of cells. */
Worksheet = 0

/* Represents a chart that is stored in its own sheet. */
Chart = 1
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotItem.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents an item in a <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>. */
public sealed class PivotItem
{

/* Gets or sets a value indicating whether the <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref> is hidden. */
public bool Hidden { get; set; }

/* Gets or sets whether the <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref> is collapsed. */
public bool Collapsed { get; set; }

/* Gets the parent <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>. */
public PivotField PivotField { get; }

/* Gets the name of the <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref>. */
public string Name { get; }

/* Gets the value of the <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref>. */
public object Value { get; }

/* Gets the <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref>&apos;s formula in A1-style notation. */
public string Formula { get; }

/* Gets a value indicating whether the <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref> is a calculated item. */
public bool IsCalculated { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.IndividualBorder.yml:
namespace GemBox.Spreadsheet
{

/* Represents single border type of a cell. */
public enum IndividualBorder
{

/* Top border. */
Top = 0

/* Bottom border. */
Bottom = 1

/* Left border. */
Left = 2

/* Right border. */
Right = 3

/* Diagonal-up border. */
DiagonalUp = 4

/* Diagonal-down border. */
DiagonalDown = 5
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents a base class for saving options of various file formats. */
public abstract class SaveOptions
{

/* Gets the default options for saving to XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later). */
public static XlsxSaveOptions XlsxDefault { get; }

/* Gets the default options for saving to XLSB file format (Microsoft Excel Binary File Format). */
public static XlsbSaveOptions XlsbDefault { get; }

/* Gets the default options for saving to, XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) . */
public static XlsSaveOptions XlsDefault { get; }

/* Gets the default options for saving to OpenDocument Spreadsheet file format. */
public static OdsSaveOptions OdsDefault { get; }

/* Gets the default options for saving to Character Separated Values file format. */
public static CsvSaveOptions CsvDefault { get; }

/* Gets the default options for saving to Tab delimited file format. */
public static CsvSaveOptions TxtDefault { get; }

/* Gets the default options for saving to Portable Document Format file. */
public static PdfSaveOptions PdfDefault { get; }

/* Gets the default options for saving to HyperText Markup Language File format. */
public static HtmlSaveOptions HtmlDefault { get; }

/* Gets the default options for saving to XML Paper Specification file format. */
public static XpsSaveOptions XpsDefault { get; }

/* Gets the default options for saving to image formats. */
public static ImageSaveOptions ImageDefault { get; }

/* Gets limitations for saving to a file formats. */
public abstract FileFormatLimitations Limitations { get; }

/* Gets the content-type for this specific file format as defined in the RFC 2616. */
public abstract string ContentType { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a condition that formats all cells based on their values by displaying a data bar whose length is proportional to cell&apos;s value. */
public sealed class DataBarCondition : FormatCondition, IFormatHolder<CellFormatData>
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* <p>Gets or sets a value indicating whether to show bar only.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref> (cell value is shown together with bar).</p> */
public bool ShowBarOnly { get; set; }

/* Gets the bar appearance settings. */
public DataBarStyle BarStyle { get; }

/* Gets the <xref href="GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.DataBar" data-throw-if-not-resolved="false"></xref> value. */
public override FormatConditionType ConditionType { get; }

/* Gets the data bar minimum. */
public ConditionalLength Minimum { get; }

/* Gets the data bar maximum. */
public ConditionalLength Maximum { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.PieChart.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a chart whose single series values are drawn as filled arcs in a pie-like form. */
public sealed class PieChart : ExcelChart, IDocumentPaginatorSource, IChartTitleParent, IChartObject, IChartDataLabelsDataProvider, IColorContext
{

/* Gets the chart type for <xref href="GemBox.Spreadsheet.Charts.PieChart" data-throw-if-not-resolved="false"></xref> which is <xref href="GemBox.Spreadsheet.Charts.ChartType.Pie" data-throw-if-not-resolved="false"></xref>. */
public override ChartType ChartType { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.PatternFillType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a type of pattern fill. */
public enum PatternFillType
{

/* The &apos;<strong>Cross</strong>&apos; fill pattern. */
Cross = 0

/* The &apos;<strong>Dashed downward diagonal</strong>&apos; fill pattern. */
DashedDownwardDiagonal = 1

/* The &apos;<strong>Dashed horizontal</strong>&apos; fill pattern. */
DashedHorizontal = 2

/* The &apos;<strong>Dashed upward diagonal</strong>&apos; fill pattern. */
DashedUpwardDiagonal = 3

/* The &apos;<strong>Dashed vertical</strong>&apos; fill pattern. */
DashedVertical = 4

/* The &apos;<strong>Diagonal brick</strong>&apos; fill pattern. */
DiagonalBrick = 5

/* The &apos;<strong>Diagonal cross</strong>&apos; fill pattern. */
DiagonalCross = 6

/* The &apos;<strong>Divot</strong>&apos; fill pattern. */
Divot = 7

/* The &apos;<strong>Dark downward diagonal</strong>&apos; fill pattern. */
DarkDownwardDiagonal = 8

/* The &apos;<strong>Dark horizontal</strong>&apos; fill pattern. */
DarkHorizontal = 9

/* The &apos;<strong>Dark upward diagonal</strong>&apos; fill pattern. */
DarkUpwardDiagonal = 10

/* The &apos;<strong>Dark vertical</strong>&apos; fill pattern. */
DarkVertical = 11

/* The &apos;<strong>Downward diagonal</strong>&apos; fill pattern. */
DownwardDiagonal = 12

/* The &apos;<strong>Dotted diamond</strong>&apos; fill pattern. */
DottedDiamond = 13

/* The &apos;<strong>Dotted grid</strong>&apos; fill pattern. */
DottedGrid = 14

/* The &apos;<strong>Horizontal</strong>&apos; fill pattern. */
Horizontal = 15

/* The &apos;<strong>Horizontal brick</strong>&apos; fill pattern. */
HorizontalBrick = 16

/* The &apos;<strong>Large checker board</strong>&apos; fill pattern. */
LargeCheckerBoard = 17

/* The &apos;<strong>Large confetti</strong>&apos; fill pattern. */
LargeConfetti = 18

/* The &apos;<strong>Large grid</strong>&apos; fill pattern. */
LargeGrid = 19

/* The &apos;<strong>Light downward diagonal</strong>&apos; fill pattern. */
LightDownwardDiagonal = 20

/* The &apos;<strong>Light horizontal</strong>&apos; fill pattern. */
LightHorizontal = 21

/* The &apos;<strong>Light upward diagonal</strong>&apos; fill pattern. */
LightUpwardDiagonal = 22

/* The &apos;<strong>Light vertical</strong>&apos; fill pattern. */
LightVertical = 23

/* The &apos;<strong>Narrow horizontal</strong>&apos; fill pattern. */
NarrowHorizontal = 24

/* The &apos;<strong>Narrow vertical</strong>&apos; fill pattern. */
NarrowVertical = 25

/* The &apos;<strong>Outlined diamond</strong>&apos; fill pattern. */
OutlinedDiamond = 26

/* The &apos;<strong>10%</strong>&apos; fill pattern. */
Percent10 = 27

/* The &apos;<strong>20%</strong>&apos; fill pattern. */
Percent20 = 28

/* The &apos;<strong>25%</strong>&apos; fill pattern. */
Percent25 = 29

/* The &apos;<strong>30%</strong>&apos; fill pattern. */
Percent30 = 30

/* The &apos;<strong>40%</strong>&apos; fill pattern. */
Percent40 = 31

/* The &apos;<strong>5%</strong>&apos; fill pattern. */
Percent5 = 32

/* The &apos;<strong>50%</strong>&apos; fill pattern. */
Percent50 = 33

/* The &apos;<strong>60%</strong>&apos; fill pattern. */
Percent60 = 34

/* The &apos;<strong>70%</strong>&apos; fill pattern. */
Percent70 = 35

/* The &apos;<strong>75%</strong>&apos; fill pattern. */
Percent75 = 36

/* The &apos;<strong>80%</strong>&apos; fill pattern. */
Percent80 = 37

/* The &apos;<strong>90%</strong>&apos; fill pattern. */
Percent90 = 38

/* The &apos;<strong>Plaid</strong>&apos; fill pattern. */
Plaid = 39

/* The &apos;<strong>Shingle</strong>&apos; fill pattern. */
Shingle = 40

/* The &apos;<strong>Small checker board</strong>&apos; fill pattern. */
SmallCheckerBoard = 41

/* The &apos;<strong>Small confetti</strong>&apos; fill pattern. */
SmallConfetti = 42

/* The &apos;<strong>Small grid</strong>&apos; fill pattern. */
SmallGrid = 43

/* The &apos;<strong>Solid diamond</strong>&apos; fill pattern. */
SolidDiamond = 44

/* The &apos;<strong>Sphere</strong>&apos; fill pattern. */
Sphere = 45

/* The &apos;<strong>Trellis</strong>&apos; fill pattern. */
Trellis = 46

/* The &apos;<strong>Upward diagonal</strong>&apos; fill pattern. */
UpwardDiagonal = 47

/* The &apos;<strong>Vertical</strong>&apos; fill pattern. */
Vertical = 48

/* The &apos;<strong>Wave</strong>&apos; fill pattern. */
Wave = 49

/* The &apos;<strong>Wide downward diagonal</strong>&apos; fill pattern. */
WideDownwardDiagonal = 50

/* The &apos;<strong>Wide upward diagonal</strong>&apos; fill pattern. */
WideUpwardDiagonal = 51

/* The &apos;<strong>Weave</strong>&apos; fill pattern. */
Weave = 52

/* The &apos;<strong>Zig zag</strong>&apos; fill pattern. */
ZigZag = 53
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelFilePaginator.yml:
namespace GemBox.Spreadsheet
{

/* Provides functionality to paginate the workbook content. */
public sealed class ExcelFilePaginator : IDocumentPaginator
{

/* Saves the paginated workbook to the specified stream. */
public void Save(Stream stream, SaveOptions options)

/* Saves the paginated workbook to a file with the specified path. */
public void Save(string path, SaveOptions options)

/* Saves the paginated workbook to a file with the specified path. Path must include file extension. */
public void Save(string path)

/* Converts this <xref href="GemBox.Spreadsheet.ExcelFilePaginator" data-throw-if-not-resolved="false"></xref> instance to an <xref href="System.Windows.Xps.Packaging.XpsDocument" data-throw-if-not-resolved="false"></xref> instance. */
public XpsDocument ConvertToXpsDocument(XpsSaveOptions options)

/* Converts single page specified in <code data-dev-comment-type="paramref" class="paramref">options</code> of this <xref href="GemBox.Spreadsheet.ExcelFilePaginator" data-throw-if-not-resolved="false"></xref> instance to an <xref href="System.Windows.Media.ImageSource" data-throw-if-not-resolved="false"></xref> instance. */
public ImageSource ConvertToImageSource(ImageSaveOptions options)

/* Prints the paginated workbook to the default printer. */
public void Print()

/* Prints the paginated workbook to the specified printer. */
public void Print(string printerName)

/* Prints the paginated workbook to the specified printer according to specified options. */
public void Print(string printerName, PrintOptions options)

/* Gets the workbook pages. */
public ReadOnlyCollection<ExcelFilePage> Pages { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.OdsLoadOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for loading from OpenDocument Spreadsheet file format. */
public sealed class OdsLoadOptions : LoadOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.OdsLoadOptions" data-throw-if-not-resolved="false"></xref> class. */
public OdsLoadOptions()

/* Gets or sets a value indicating whether to preserve ODS file format features that are not directly supported through GemBox.Spreadsheet object model. */
public bool PreserveUnsupportedFeatures { get; set; }

/* Read display values instead of stored values. */
public bool ReadDisplayValues { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.AreaChart.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a chart whose series values are drawn using filled areas. */
public sealed class AreaChart : ExcelChart, IDocumentPaginatorSource, IChartTitleParent, IChartObject, IChartDataLabelsDataProvider, IColorContext
{

/* Gets the chart type for <xref href="GemBox.Spreadsheet.Charts.AreaChart" data-throw-if-not-resolved="false"></xref> which is <xref href="GemBox.Spreadsheet.Charts.ChartType.Area" data-throw-if-not-resolved="false"></xref>. */
public override ChartType ChartType { get; }

/* Gets or sets the chart grouping. */
public ChartGrouping Grouping { get; set; }

/* Gets the chart axes. */
public ChartAxes Axes { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.Button.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a Button Form Control. */
public class Button : ExcelFormControl, IDocumentPaginatorSource
{

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.FormControlType.Button" data-throw-if-not-resolved="false"></xref> value. */
public override FormControlType FormControlType { get; }

/* Gets or sets the horizontal alignment of the text in this button. */
public HorizontalAlignment HorizontalAlignment { get; set; }

/* Gets or sets the vertical alignment of the text in this button. */
public VerticalAlignment VerticalAlignment { get; set; }

/* Gets the text content and formatting associated with this <xref href="GemBox.Spreadsheet.Drawing.Button" data-throw-if-not-resolved="false"></xref>. */
public TextBox Text { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FileFormatLimitations.yml:
namespace GemBox.Spreadsheet
{

/* Represents file format limitations when saving <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> to some format. */
public sealed class FileFormatLimitations
{

/* Initializes instance of <xref href="GemBox.Spreadsheet.FileFormatLimitations" data-throw-if-not-resolved="false"></xref> class. */
public FileFormatLimitations(int maxRows, int maxColumns, int maxColors, int maxCellStyles)

/* Get maximum number of rows. */
public int MaxRows { get; }

/* Get maximum number of columns. */
public int MaxColumns { get; }

/* Get maximum number of colors. */
public int MaxColors { get; }

/* Get maximum number of cell styles. */
public int MaxCellStyles { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ContainConditionType.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainCondition" data-throw-if-not-resolved="false"></xref> type. */
public enum ContainConditionType
{

/* Formats only cells with value that satisfies the specified criteria. */
Value = 0

/* Formats only cells with text that satisfies the specified criteria. */
Text = 1

/* Formats only cells with date that satisfies the specified criteria. */
Date = 2

/* Formats only cells with blank values. */
Blanks = 3

/* Formats only cells without blank values. */
NoBlanks = 4

/* Formats only cells with errors. */
Errors = 5

/* Formats only cells without errors. */
NoErrors = 6
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SpreadsheetIcon.yml:
namespace GemBox.Spreadsheet
{

/* Represents a spreadsheet icon. */
public struct SpreadsheetIcon
{

/* Gets the <xref href="GemBox.Spreadsheet.SpreadsheetIcon" data-throw-if-not-resolved="false"></xref> instance whose <xref href="GemBox.Spreadsheet.SpreadsheetIcon.IconStyle" data-throw-if-not-resolved="false"></xref> is equal to <xref href="GemBox.Spreadsheet.SpreadsheetIconStyle.None" data-throw-if-not-resolved="false"></xref>. */
public static readonly SpreadsheetIcon None

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.SpreadsheetIcon" data-throw-if-not-resolved="false"></xref>. */
public SpreadsheetIcon(SpreadsheetIconStyle iconStyle, int id)

/* Determines whether the <code data-dev-comment-type="paramref" class="paramref">other</code> <xref href="GemBox.Spreadsheet.SpreadsheetIcon" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.SpreadsheetIcon" data-throw-if-not-resolved="false"></xref> instance. */
public bool Equals(SpreadsheetIcon other)

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.SpreadsheetIcon" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.SpreadsheetIcon" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.SpreadsheetIcon" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.SpreadsheetIcon" data-throw-if-not-resolved="false"></xref>s are equal. */
public static bool operator ==(SpreadsheetIcon first, SpreadsheetIcon second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.SpreadsheetIcon" data-throw-if-not-resolved="false"></xref>s are not equal. */
public static bool operator !=(SpreadsheetIcon first, SpreadsheetIcon second)

/* Gets the icon style. */
public SpreadsheetIconStyle IconStyle { get; }

/* Gets the identifier of the icon from the set of icons specified in <xref href="GemBox.Spreadsheet.SpreadsheetIcon.IconStyle" data-throw-if-not-resolved="false"></xref>. */
public int Id { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase.yml:
namespace GemBox.Spreadsheet
{

/* Base class for row, column and cell collections. */
public abstract class ExcelRowColumnCellCollectionBase : IEnumerable
{

/* Returns an enumerator for the <xref href="GemBox.Spreadsheet.ExcelRowColumnCellCollectionBase" data-throw-if-not-resolved="false"></xref>. */
public IEnumerator GetEnumerator()

/* Gets the number of currently allocated elements (dynamically changes when worksheet is modified -- read remarks). */
public abstract int Count { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextAutoFit.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents an enumeration of available text fitting options. */
public enum TextAutoFit
{

/* Text within the <xref href="GemBox.Spreadsheet.Drawing.TextBox" data-throw-if-not-resolved="false"></xref> should not be auto-fit to the bounding box. */
None = 0

/* <p>Text within the <xref href="GemBox.Spreadsheet.Drawing.TextBox" data-throw-if-not-resolved="false"></xref> should be auto-fit to the bounding box by reducing the font size of each <xref href="GemBox.Spreadsheet.Drawing.TextRun" data-throw-if-not-resolved="false"></xref> and line spacing of each <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref> in the <xref href="GemBox.Spreadsheet.Drawing.TextBox" data-throw-if-not-resolved="false"></xref>.</p>
<p>This value is currently partially supported in PDF, XPS and image formats.</p> */
ShrinkTextOnOverflow = 1

/* <xref href="GemBox.Spreadsheet.ExcelShape" data-throw-if-not-resolved="false"></xref> should be auto-fit to fully contain the text described within it. */
ResizeShapeToFitText = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextListFormat.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a set of formatting properties related to bulleted or numbered lists that can be applied to a <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>. */
public sealed class TextListFormat
{

/* Sets the bullet picture. */
public void SetBulletPicture(Stream stream, PictureContentType contentType)

/* Sets the bullet picture. */
public void SetBulletPicture(Stream stream, string contentType)

/* <p>Gets the type of the list.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.Drawing.ListType.None" data-throw-if-not-resolved="false"></xref>.</p>
<p>Use members <xref href="GemBox.Spreadsheet.Drawing.TextListFormat.NumberType" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.Drawing.TextListFormat.BulletType" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.Drawing.TextListFormat.BulletCharacter" data-throw-if-not-resolved="false"></xref> or <xref href="GemBox.Spreadsheet.Drawing.TextListFormat.SetBulletPicture(System.IO.Stream%2cGemBox.Spreadsheet.Drawing.PictureContentType)" data-throw-if-not-resolved="false"></xref> to set list type.</p> */
public ListType ListType { get; }

/* <p>Gets or sets the list indent level.</p>
<p>Default value is 0.</p> */
public int Level { get; set; }

/* <p>Gets or sets the numbering scheme of the numbered list.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.Drawing.ListNumberType.None" data-throw-if-not-resolved="false"></xref>.</p>
<p>This allows specifying formats other than strictly numbers.
For instance, a set of bullets can be represented by a series of Roman numerals instead of the standard 1,2,3, etc. number set.</p> */
public ListNumberType NumberType { get; set; }

/* <p>Gets or sets the number that starts a given sequence of a numbered list.</p>
<p>Default value is 1 if <xref href="GemBox.Spreadsheet.Drawing.TextListFormat.ListType" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.Drawing.ListType.Number" data-throw-if-not-resolved="false"></xref>; otherwise, -1.</p>
<p>When the numbering is alphabetical, the number should map to the appropriate letter.
For instance 1 maps to &apos;a&apos;, 2 to &apos;b&apos; and so on.
If the numbers are larger than 26, then multiple letters should be used.
For instance 27 should be represented as &apos;aa&apos; and similarly 53 should be &apos;aaa&apos;.</p> */
public int NumberStartAt { get; set; }

/* <p>Gets or sets the bullet scheme of the bulleted list.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.Drawing.ListBulletType.None" data-throw-if-not-resolved="false"></xref>.</p>
<p>This allows specifying character and font of predefined list bullets.</p> */
public ListBulletType BulletType { get; set; }

/* <p>Gets or sets the character to be used in place of the standard bullet point.</p>
<p>Default value is <xref href="System.String.Empty" data-throw-if-not-resolved="false"></xref>.</p> */
public string BulletCharacter { get; set; }

/* <p>Gets or sets the picture to be applied to a set of bullets.</p>
<p>Default value is <xref uid="langword_csharp_null" name="null" href=""></xref>.</p> */
public PictureContent BulletPicture { get; set; }

/* Gets or sets the color to be used on bullet characters within a given <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>. */
public DrawingColor Color { get; set; }

/* Gets or sets the absolute size to be used on bullet characters within a given <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>. */
public Length Size { get; set; }

/* Gets or sets the size in percentage of the surrounding text to be used on bullet characters within a given <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>. */
public double RelativeSize { get; set; }

/* Gets or sets the font to be used on bullet characters within a given <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>. */
public string Font { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.MarkerType.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a marker symbol which will be used on each <xref href="GemBox.Spreadsheet.Charts.LineChartSeries" data-throw-if-not-resolved="false"></xref> data point. */
public enum MarkerType
{

/* Specifies an automatic symbol shall be drawn at each data point. */
Auto = 0

/* Specifies nothing shall be drawn at each data point. */
None = 1

/* Specifies a square shall be drawn at each data point. */
Square = 2

/* Specifies a diamond shall be drawn at each data point. */
Diamond = 3

/* Specifies a triangle shall be drawn at each data point. */
Triangle = 4

/* Specifies an X shall be drawn at each data point. */
X = 5

/* Specifies a star shall be drawn at each data point. */
Star = 6

/* Specifies a dot shall be drawn at each data point. */
Dot = 7

/* Specifies a dash shall be drawn at each data point. */
Dash = 8

/* Specifies a circle shall be drawn at each data point. */
Circle = 9

/* Specifies a plus shall be drawn at each data point. */
Plus = 10

/* Specifies a picture shall be drawn at each data point. */
Picture = 11
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.BuiltInPivotStyleName.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> built-in styles. */
public enum BuiltInPivotStyleName
{

/* No built-in style. */
None = 0

/* &apos;<strong>PivotStyleLight1</strong>&apos; built-in style. */
PivotStyleLight1 = 1

/* &apos;<strong>PivotStyleLight2</strong>&apos; built-in style. */
PivotStyleLight2 = 2

/* &apos;<strong>PivotStyleLight3</strong>&apos; built-in style. */
PivotStyleLight3 = 3

/* &apos;<strong>PivotStyleLight4</strong>&apos; built-in style. */
PivotStyleLight4 = 4

/* &apos;<strong>PivotStyleLight5</strong>&apos; built-in style. */
PivotStyleLight5 = 5

/* &apos;<strong>PivotStyleLight6</strong>&apos; built-in style. */
PivotStyleLight6 = 6

/* &apos;<strong>PivotStyleLight7</strong>&apos; built-in style. */
PivotStyleLight7 = 7

/* &apos;<strong>PivotStyleLight8</strong>&apos; built-in style. */
PivotStyleLight8 = 8

/* &apos;<strong>PivotStyleLight9</strong>&apos; built-in style. */
PivotStyleLight9 = 9

/* &apos;<strong>PivotStyleLight10</strong>&apos; built-in style. */
PivotStyleLight10 = 10

/* &apos;<strong>PivotStyleLight11</strong>&apos; built-in style. */
PivotStyleLight11 = 11

/* &apos;<strong>PivotStyleLight12</strong>&apos; built-in style. */
PivotStyleLight12 = 12

/* &apos;<strong>PivotStyleLight13</strong>&apos; built-in style. */
PivotStyleLight13 = 13

/* &apos;<strong>PivotStyleLight14</strong>&apos; built-in style. */
PivotStyleLight14 = 14

/* &apos;<strong>PivotStyleLight15</strong>&apos; built-in style. */
PivotStyleLight15 = 15

/* &apos;<strong>PivotStyleLight16</strong>&apos; built-in style. */
PivotStyleLight16 = 16

/* &apos;<strong>PivotStyleLight17</strong>&apos; built-in style. */
PivotStyleLight17 = 17

/* &apos;<strong>PivotStyleLight18</strong>&apos; built-in style. */
PivotStyleLight18 = 18

/* &apos;<strong>PivotStyleLight19</strong>&apos; built-in style. */
PivotStyleLight19 = 19

/* &apos;<strong>PivotStyleLight20</strong>&apos; built-in style. */
PivotStyleLight20 = 20

/* &apos;<strong>PivotStyleLight21</strong>&apos; built-in style. */
PivotStyleLight21 = 21

/* &apos;<strong>PivotStyleLight22</strong>&apos; built-in style. */
PivotStyleLight22 = 22

/* &apos;<strong>PivotStyleLight23</strong>&apos; built-in style. */
PivotStyleLight23 = 23

/* &apos;<strong>PivotStyleLight24</strong>&apos; built-in style. */
PivotStyleLight24 = 24

/* &apos;<strong>PivotStyleLight25</strong>&apos; built-in style. */
PivotStyleLight25 = 25

/* &apos;<strong>PivotStyleLight26</strong>&apos; built-in style. */
PivotStyleLight26 = 26

/* &apos;<strong>PivotStyleLight27</strong>&apos; built-in style. */
PivotStyleLight27 = 27

/* &apos;<strong>PivotStyleLight28</strong>&apos; built-in style. */
PivotStyleLight28 = 28

/* &apos;<strong>PivotStyleMedium1</strong>&apos; built-in style. */
PivotStyleMedium1 = 29

/* &apos;<strong>PivotStyleMedium2</strong>&apos; built-in style. */
PivotStyleMedium2 = 30

/* &apos;<strong>PivotStyleMedium3</strong>&apos; built-in style. */
PivotStyleMedium3 = 31

/* &apos;<strong>PivotStyleMedium4</strong>&apos; built-in style. */
PivotStyleMedium4 = 32

/* &apos;<strong>PivotStyleMedium5</strong>&apos; built-in style. */
PivotStyleMedium5 = 33

/* &apos;<strong>PivotStyleMedium6</strong>&apos; built-in style. */
PivotStyleMedium6 = 34

/* &apos;<strong>PivotStyleMedium7</strong>&apos; built-in style. */
PivotStyleMedium7 = 35

/* &apos;<strong>PivotStyleMedium8</strong>&apos; built-in style. */
PivotStyleMedium8 = 36

/* &apos;<strong>PivotStyleMedium9</strong>&apos; built-in style. */
PivotStyleMedium9 = 37

/* &apos;<strong>PivotStyleMedium10</strong>&apos; built-in style. */
PivotStyleMedium10 = 38

/* &apos;<strong>PivotStyleMedium11</strong>&apos; built-in style. */
PivotStyleMedium11 = 39

/* &apos;<strong>PivotStyleMedium12</strong>&apos; built-in style. */
PivotStyleMedium12 = 40

/* &apos;<strong>PivotStyleMedium13</strong>&apos; built-in style. */
PivotStyleMedium13 = 41

/* &apos;<strong>PivotStyleMedium14</strong>&apos; built-in style. */
PivotStyleMedium14 = 42

/* &apos;<strong>PivotStyleMedium15</strong>&apos; built-in style. */
PivotStyleMedium15 = 43

/* &apos;<strong>PivotStyleMedium16</strong>&apos; built-in style. */
PivotStyleMedium16 = 44

/* &apos;<strong>PivotStyleMedium17</strong>&apos; built-in style. */
PivotStyleMedium17 = 45

/* &apos;<strong>PivotStyleMedium18</strong>&apos; built-in style. */
PivotStyleMedium18 = 46

/* &apos;<strong>PivotStyleMedium19</strong>&apos; built-in style. */
PivotStyleMedium19 = 47

/* &apos;<strong>PivotStyleMedium20</strong>&apos; built-in style. */
PivotStyleMedium20 = 48

/* &apos;<strong>PivotStyleMedium21</strong>&apos; built-in style. */
PivotStyleMedium21 = 49

/* &apos;<strong>PivotStyleMedium22</strong>&apos; built-in style. */
PivotStyleMedium22 = 50

/* &apos;<strong>PivotStyleMedium23</strong>&apos; built-in style. */
PivotStyleMedium23 = 51

/* &apos;<strong>PivotStyleMedium24</strong>&apos; built-in style. */
PivotStyleMedium24 = 52

/* &apos;<strong>PivotStyleMedium25</strong>&apos; built-in style. */
PivotStyleMedium25 = 53

/* &apos;<strong>PivotStyleMedium26</strong>&apos; built-in style. */
PivotStyleMedium26 = 54

/* &apos;<strong>PivotStyleMedium27</strong>&apos; built-in style. */
PivotStyleMedium27 = 55

/* &apos;<strong>PivotStyleMedium28</strong>&apos; built-in style. */
PivotStyleMedium28 = 56

/* &apos;<strong>PivotStyleDark1</strong>&apos; built-in style. */
PivotStyleDark1 = 57

/* &apos;<strong>PivotStyleDark2</strong>&apos; built-in style. */
PivotStyleDark2 = 58

/* &apos;<strong>PivotStyleDark3</strong>&apos; built-in style. */
PivotStyleDark3 = 59

/* &apos;<strong>PivotStyleDark4</strong>&apos; built-in style. */
PivotStyleDark4 = 60

/* &apos;<strong>PivotStyleDark5</strong>&apos; built-in style. */
PivotStyleDark5 = 61

/* &apos;<strong>PivotStyleDark6</strong>&apos; built-in style. */
PivotStyleDark6 = 62

/* &apos;<strong>PivotStyleDark7</strong>&apos; built-in style. */
PivotStyleDark7 = 63

/* &apos;<strong>PivotStyleDark8</strong>&apos; built-in style. */
PivotStyleDark8 = 64

/* &apos;<strong>PivotStyleDark9</strong>&apos; built-in style. */
PivotStyleDark9 = 65

/* &apos;<strong>PivotStyleDark10</strong>&apos; built-in style. */
PivotStyleDark10 = 66

/* &apos;<strong>PivotStyleDark11</strong>&apos; built-in style. */
PivotStyleDark11 = 67

/* &apos;<strong>PivotStyleDark12</strong>&apos; built-in style. */
PivotStyleDark12 = 68

/* &apos;<strong>PivotStyleDark13</strong>&apos; built-in style. */
PivotStyleDark13 = 69

/* &apos;<strong>PivotStyleDark14</strong>&apos; built-in style. */
PivotStyleDark14 = 70

/* &apos;<strong>PivotStyleDark15</strong>&apos; built-in style. */
PivotStyleDark15 = 71

/* &apos;<strong>PivotStyleDark16</strong>&apos; built-in style. */
PivotStyleDark16 = 72

/* &apos;<strong>PivotStyleDark17</strong>&apos; built-in style. */
PivotStyleDark17 = 73

/* &apos;<strong>PivotStyleDark18</strong>&apos; built-in style. */
PivotStyleDark18 = 74

/* &apos;<strong>PivotStyleDark19</strong>&apos; built-in style. */
PivotStyleDark19 = 75

/* &apos;<strong>PivotStyleDark20</strong>&apos; built-in style. */
PivotStyleDark20 = 76

/* &apos;<strong>PivotStyleDark21</strong>&apos; built-in style. */
PivotStyleDark21 = 77

/* &apos;<strong>PivotStyleDark22</strong>&apos; built-in style. */
PivotStyleDark22 = 78

/* &apos;<strong>PivotStyleDark23</strong>&apos; built-in style. */
PivotStyleDark23 = 79

/* &apos;<strong>PivotStyleDark24</strong>&apos; built-in style. */
PivotStyleDark24 = 80

/* &apos;<strong>PivotStyleDark25</strong>&apos; built-in style. */
PivotStyleDark25 = 81

/* &apos;<strong>PivotStyleDark26</strong>&apos; built-in style. */
PivotStyleDark26 = 82

/* &apos;<strong>PivotStyleDark27</strong>&apos; built-in style. */
PivotStyleDark27 = 83

/* &apos;<strong>PivotStyleDark28</strong>&apos; built-in style. */
PivotStyleDark28 = 84
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.AxisLabelsPosition.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents the possible positions for axis labels. */
public enum AxisLabelsPosition
{

/* Axis labels are not drawn. */
None = 0

/* Axis labels are next to the axis. */
NextToAxis = 1

/* Axis labels are at the low end of the perpendicular axis. */
Low = 2

/* <p>Axis labels are at the high end of the perpendicular axis.</p>
<p>This value is currently not supported when exporting a chart to PDF, XPS or image file formats. This value is exported as <xref href="GemBox.Spreadsheet.Charts.AxisLabelsPosition.NextToAxis" data-throw-if-not-resolved="false"></xref>.</p> */
High = 3
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.NamedRangeCollection.yml:
namespace GemBox.Spreadsheet
{

/* Collection of the descriptive names which are used 
to represent cells, ranges of cells, formulas, or constant values. */
public sealed class NamedRangeCollection : IEnumerable<NamedRange>, IEnumerable
{

/* Adds a new named range. Named ranges are used to represent cells, ranges of cells,
formulas or constant values. */
public void Add(string name, CellRange range)

/* Adds a new named range. Named ranges are used to represent cells, ranges of cells,
formulas or constant values. */
public void Add(string name, CellRange range, bool globalName)

/* Sets print area. */
public void SetPrintArea(CellRange range)

/* <p>Sets multi-range print area.</p>
<p>Multi-range print area is currently supported in XLSX only.</p> */
public void SetPrintArea(params CellRange[] ranges)

/* <p>Sets multi-range print area.</p>
<p>Multi-range print area is currently supported in XLSX only.</p> */
public void SetPrintArea(IEnumerable<CellRange> ranges)

/* Sets print titles (rows to repeat at top). */
public void SetPrintTitles(ExcelRow startRow, int numberOfRows)

/* Sets print titles (columns to repeat at left). */
public void SetPrintTitles(ExcelColumn startColumn, int numberOfColumns)

/* Sets print titles. */
public void SetPrintTitles(ExcelColumnRowBase startRow, int numberOfRows, ExcelColumnRowBase startColumn, int numberOfColumns)

/* Returns an enumerator that can iterate through a collection. */
public IEnumerator<NamedRange> GetEnumerator()

/* Gets the number of named ranges contained in the collection. */
public int Count { get; }

/* Gets the <xref href="GemBox.Spreadsheet.NamedRange" data-throw-if-not-resolved="false"></xref> at the specified index. */
public NamedRange this[int index] { get; }

/* Gets the <xref href="GemBox.Spreadsheet.NamedRange" data-throw-if-not-resolved="false"></xref> with the specified name. */
public NamedRange this[string name] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotTableStyleOptions.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Specifies which options are applied to a <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> style. */
[Flags]
public enum PivotTableStyleOptions
{

/* Do not apply any option. */
None = 0

/* Show row headers for the table. */
RowHeaders = 1

/* Show column headers for the table. */
ColumnHeaders = 2

/* Show row stripe formatting for the table. */
BandedRows = 4

/* Show column stripe formatting for the table. */
BandedColumns = 8

/* Show the last column. */
LastColumn = 16
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ConditionalIcon.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a conditional icon used in <xref href="GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition" data-throw-if-not-resolved="false"></xref> of a conditional formatting rule to specify icon and a lower bound of the values onto which the icon is applied. */
public sealed class ConditionalIcon : ConditionalObject
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalIcon" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets the icon. */
public SpreadsheetIcon Icon { get; set; }

/* <p>Gets or sets a value indicating whether this or next icon will be shown if cell&apos;s value is equal to this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject.Value" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value is <xref uid="langword_csharp_true" name="true" href=""></xref> (this icon will be shown if cell&apos;s value is equal to this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject.Value" data-throw-if-not-resolved="false"></xref>).</p> */
public bool Equal { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Security.yml:
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ContainDateCondition.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a condition that formats only cells with date that satisfies the specified criteria. */
public sealed class ContainDateCondition : ContainCondition, IFormatHolder<CellFormatData>
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainDateCondition" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets the operator of this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainDateCondition" data-throw-if-not-resolved="false"></xref>. */
public ContainDateOperator Operator { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotTableFilter.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> filter settings and provides filter functionality. */
public sealed class PivotTableFilter
{

/* <p>Sets a <xref href="GemBox.Spreadsheet.Top10Filter" data-throw-if-not-resolved="false"></xref> to a pivot field.</p>
<p><xref href="GemBox.Spreadsheet.Top10Filter" data-throw-if-not-resolved="false"></xref> filters by a top N (percent or number of items).</p> */
public PivotTableFilter ByTop10(PivotField field, bool top, bool percent, double value)

/* <p>Sets a <xref href="GemBox.Spreadsheet.Top10Filter" data-throw-if-not-resolved="false"></xref> to a pivot field.</p>
<p><xref href="GemBox.Spreadsheet.Top10Filter" data-throw-if-not-resolved="false"></xref> filters by a top N (percent or number of items).</p> */
public PivotTableFilter ByTop10(PivotField field, PivotField measureField, bool top, bool percent, double value)

/* <p>Sets a <xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> to a pivot field.</p>
<p><xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> filters by a one or two conditions (operators and values).</p> */
public PivotTableFilter ByCustom(PivotField field, FilterOperator operator, object value)

/* <p>Sets a <xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> to a pivot field.</p>
<p><xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> filters by a one or two conditions (operators and values).</p> */
public PivotTableFilter ByCustom(PivotField field, PivotField measureField, FilterOperator operator, object value)

/* <p>Sets a <xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> to a pivot field.</p>
<p><xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> filters by a one or two conditions (operators and values).</p> */
public PivotTableFilter ByCustom(PivotField field, FilterOperator operator, object value, bool and, FilterOperator operator2, object value2)

/* <p>Sets a <xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> to a pivot field.</p>
<p><xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> filters by a one or two conditions (operators and values).</p> */
public PivotTableFilter ByCustom(PivotField field, PivotField measureField, FilterOperator operator, object value, bool and, FilterOperator operator2, object value2)

/* <p>Sets a <xref href="GemBox.Spreadsheet.DynamicFilter" data-throw-if-not-resolved="false"></xref> to a pivot field.</p>
<p><xref href="GemBox.Spreadsheet.DynamicFilter" data-throw-if-not-resolved="false"></xref> filters by a dynamic criteria that can change, either with the data itself (e.g., &quot;above average&quot;) or with the current system date (e.g., show values for &quot;today&quot;).</p> */
public PivotTableFilter ByDynamic(PivotField field, DynamicFilterType dynamicFilterType)

/* <p>Sets a <xref href="GemBox.Spreadsheet.DynamicFilter" data-throw-if-not-resolved="false"></xref> to a pivot field.</p>
<p><xref href="GemBox.Spreadsheet.DynamicFilter" data-throw-if-not-resolved="false"></xref> filters by a dynamic criteria that can change, either with the data itself (e.g., &quot;above average&quot;) or with the current system date (e.g., show values for &quot;today&quot;).</p> */
public PivotTableFilter ByDynamic(PivotField field, PivotField measureField, DynamicFilterType dynamicFilterType)

/* Gets the <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> to filter. */
public PivotTable PivotTable { get; }

/* Gets the filter fields. */
public PivotFilterCollection PivotFilters { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.ListBulletType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a bullet character used in a <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref> that is part of a <xref href="GemBox.Spreadsheet.Drawing.ListType.Bullet" data-throw-if-not-resolved="false"></xref> list. */
public enum ListBulletType
{

/* Bullet character is absent. */
None = 0

/* Filled round bullet. */
FilledRound = 1

/* Hollow round bullet. */
HollowRound = 2

/* Filled square bullet. */
FilledSquare = 3

/* Hollow square bullet. */
HollowSquare = 4

/* Star bullet. */
Star = 5

/* Arrow bullet. */
Arrow = 6

/* Checkmark bullet. */
Checkmark = 7

/* Custom bullet character. */
Custom = 8
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelObjectSourceType.yml:
namespace GemBox.Spreadsheet
{

/* Represents an enumeration of possible sources of various objects (such as pictures, audio and other files) that can be either embedded, linked or both. */
public enum ExcelObjectSourceType
{

/* Object is embedded in the file in which <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> instance is saved. */
Embed = 0

/* Object is linked to the file in which <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> instance is saved. */
Link = 1

/* Object is embedded and linked to the file in which <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> instance is saved. */
EmbedAndLink = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextLineBreak.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a vertical line break. */
public class TextLineBreak : TextElement, IColorContext
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Drawing.TextLineBreak" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.TextElementType.LineBreak" data-throw-if-not-resolved="false"></xref> value. */
public override TextElementType ElementType { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelDrawingCollection-1.yml:
namespace GemBox.Spreadsheet
{

/* Represents a collection of <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (pictures, charts, etc.) in the worksheet. */
public abstract class ExcelDrawingCollection<T> : IExcelDrawingCollection, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable where T : ExcelDrawing
{

/* Adds a copy of the drawing (picture, chart, etc.) to the worksheet. */
public T AddCopy(T item)

/* <p>Moves the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> at the specified index to a new location in the collection thus affecting its Z-index.</p>
<p>Drawings at the lower location in the collection have a lower Z-index and are drawn before drawings at the higher location in the collection.</p> */
public void Move(int oldIndex, int newIndex)

/* Removes the first occurrence of a specific object from the <xref href="GemBox.Spreadsheet.ExcelDrawingCollection%601" data-throw-if-not-resolved="false"></xref>. */
public bool Remove(T item)

/* Removes the element at the specified index of the <xref href="GemBox.Spreadsheet.ExcelDrawingCollection%601" data-throw-if-not-resolved="false"></xref>. */
public void RemoveAt(int index)

/* Removes all elements from the <xref href="GemBox.Spreadsheet.ExcelDrawingCollection%601" data-throw-if-not-resolved="false"></xref>. */
public void Clear()

/* Returns an enumerator that iterates through the <xref href="GemBox.Spreadsheet.ExcelDrawingCollection%601" data-throw-if-not-resolved="false"></xref> */
public IEnumerator<T> GetEnumerator()

/* Determines whether an element is in the <xref href="GemBox.Spreadsheet.ExcelDrawingCollection%601" data-throw-if-not-resolved="false"></xref>. */
public bool Contains(T item)

/* Searches for the specified object and returns the zero-based index of the first occurrence within the entire <xref href="GemBox.Spreadsheet.ExcelDrawingCollection%601" data-throw-if-not-resolved="false"></xref>. */
public int IndexOf(T item)

/* Gets the number of elements contained in the <xref href="GemBox.Spreadsheet.ExcelDrawingCollection%601" data-throw-if-not-resolved="false"></xref>. */
public int Count { get; }

/* Gets the element at the specified index. */
public T this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotTableCollection.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a collection of all <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> objects in the worksheet. */
public sealed class PivotTableCollection : IEnumerable<PivotTable>, IEnumerable
{

/* Adds a new <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> to the collection. */
public PivotTable Add(PivotCache pivotCache, string tableName, string cellReference)

/* Adds a new <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> to the collection. */
public PivotTable Add(PivotCache pivotCache, string tableName, ExcelCell topLeftCell)

/* Removes the <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> at the specified index. */
public void RemoveAt(int index)

/* Removes all <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref>s from the collection. */
public void Clear()

/* Returns an enumerator for the collection. */
public IEnumerator<PivotTable> GetEnumerator()

/* Gets the <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> at the specified index. */
public PivotTable this[int index] { get; }

/* Gets the number of <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref>s contained in the collection. */
public int Count { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ChartType.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a chart type. */
public enum ChartType
{

/* Chart type whose series values are drawn using vertical rectangles. */
Column = 0

/* Chart type whose series values are drawn using horizontal rectangles. */
Bar = 1

/* Chart type whose series values are drawn using lines. */
Line = 2

/* Chart type whose series values are drawn using filled areas. */
Area = 3

/* Chart type whose single series values are drawn as filled arcs in a pie-like form. */
Pie = 4

/* Chart type which combines different chart types in a single chart. */
Combo = 5

/* Chart type whose series x and y values are drawn using lines. */
Scatter = 6
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a conditional value used in conditional formating rules which format all cells based on their values (<xref href="GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition" data-throw-if-not-resolved="false"></xref>). */
public struct ConditionalValue : IEquatable<ConditionalValue>
{

/* Gets the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref> instance whose <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType" data-throw-if-not-resolved="false"></xref> is equal to <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.None" data-throw-if-not-resolved="false"></xref>. */
public static readonly ConditionalValue None

/* Gets the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref> instance whose <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType" data-throw-if-not-resolved="false"></xref> is equal to <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Automatic" data-throw-if-not-resolved="false"></xref>. */
public static readonly ConditionalValue Automatic

/* Gets the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref> instance whose <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType" data-throw-if-not-resolved="false"></xref> is equal to <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Lowest" data-throw-if-not-resolved="false"></xref>. */
public static readonly ConditionalValue Lowest

/* Gets the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref> instance whose <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue.ValueType" data-throw-if-not-resolved="false"></xref> is equal to <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.Highest" data-throw-if-not-resolved="false"></xref>. */
public static readonly ConditionalValue Highest

/* Creates a new instance of the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref> from the specified number. */
public static ConditionalValue FromNumber(double number)

/* Creates a new instance of the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref> from the specified percent. */
public static ConditionalValue FromPercent(double percent)

/* Creates a new instance of the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref> from the specified percentile. */
public static ConditionalValue FromPercentile(double percentile)

/* Creates a new instance of the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref> from the specified formula. */
public static ConditionalValue FromFormula(string formula)

/* Determines whether the <code data-dev-comment-type="paramref" class="paramref">other</code> <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref> instance. */
public bool Equals(ConditionalValue other)

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref>s are equal. */
public static bool operator ==(ConditionalValue first, ConditionalValue second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref>s are not equal. */
public static bool operator !=(ConditionalValue first, ConditionalValue second)

/* Gets the conditional value type. */
public ConditionalValueType ValueType { get; }

/* Gets the value. */
public object Value { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.yml:
namespace GemBox.Spreadsheet
{

/* Arguments for <xref href="GemBox.Spreadsheet.InsertDataTableOptions.DataTableCellToExcelCellConverting" data-throw-if-not-resolved="false"></xref> event. */
[ComVisible(false)]
public sealed class DataTableCellToExcelCellConvertingEventArgs : CancelEventArgs
{

/* Gets the source <xref href="GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable" data-throw-if-not-resolved="false"></xref> */
public DataTable DataTable { get; }

/* Gets the source row index in <xref href="GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable" data-throw-if-not-resolved="false"></xref>. */
public int DataTableRowIndex { get; }

/* Gets the source column index in <xref href="GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable" data-throw-if-not-resolved="false"></xref>. */
public int DataTableColumnIndex { get; }

/* Gets the source value from <xref href="GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.DataTable" data-throw-if-not-resolved="false"></xref>. */
public object DataTableValue { get; }

/* Gets the destination <xref href="GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCell" data-throw-if-not-resolved="false"></xref>. */
public ExcelCell ExcelCell { get; }

/* Gets or sets the value which will be inserted into destination <xref href="GemBox.Spreadsheet.DataTableCellToExcelCellConvertingEventArgs.ExcelCell" data-throw-if-not-resolved="false"></xref>. */
public object ExcelCellValue { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.VerticalAlignmentStyle.yml:
namespace GemBox.Spreadsheet
{

/* Represents available vertical alignment options used in <xref href="GemBox.Spreadsheet.CellStyle.VerticalAlignment" data-throw-if-not-resolved="false"></xref> member. */
public enum VerticalAlignmentStyle
{

/* The vertical alignment is aligned-to-top. */
Top = 0

/* The vertical alignment is centered across the height of the cell. */
Center = 1

/* The vertical alignment is aligned-to-bottom. */
Bottom = 2

/* <p>When text direction is horizontal: the vertical alignment of lines of text is distributed vertically, where each line of text inside the cell is evenly distributed across the height of the cell, with flush top and bottom margins.</p>
<p>When text direction is vertical: similar behavior as horizontal justification. The alignment is justified (flush top and bottom in this case). For each line of text, each line of the wrapped text in a cell is aligned to the top and bottom (except the last line). If no single line of text wraps in the cell, then the text is not justified.</p>
<p>This option is currently not supported in PDF, XPS and image file formats and defaults to <xref href="GemBox.Spreadsheet.VerticalAlignmentStyle.Top" data-throw-if-not-resolved="false"></xref>.</p> */
Justify = 3

/* <p>When text direction is horizontal: the vertical alignment of lines of text is distributed vertically, where each line of text inside the cell is evenly distributed across the height of the cell, with flush top and bottom margins.</p>
<p>When text direction is vertical: behaves exactly as distributed horizontal alignment. The first words in a line of text (appearing at the top of the cell) are flush with the top edge of the cell, and the last words of a line of text are flush with the bottom edge of the cell, and the line of text is distributed evenly from top to bottom.</p>
<p>This option is currently not supported in PDF, XPS and image file formats and defaults to <xref href="GemBox.Spreadsheet.VerticalAlignmentStyle.Center" data-throw-if-not-resolved="false"></xref>.</p> */
Distributed = 4
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SpreadsheetInfo.yml:
namespace GemBox.Spreadsheet
{

/* Contains static licensing methods and diagnostic information about executing GemBox.Spreadsheet assembly. */
public static class SpreadsheetInfo
{

/* Call this method from your application to set GemBox.Spreadsheet serial key. */
public static void SetLicense(string serialKey)

/* GemBox.Spreadsheet assembly title. */
public static string Title { get; }

/* GemBox.Spreadsheet assembly full version. */
public static string FullVersion { get; }

/* Occurs in loading or saving <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> when GemBox.Spreadsheet assembly is used with <strong>FREE-LIMITED-KEY</strong> license key and free limit is reached. */
public static event EventHandler<FreeLimitEventArgs> FreeLimitReached
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ChartLegend.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a chart legend. */
public sealed class ChartLegend : IChartObject, IColorContext
{

/* Deletes legend. */
public void Delete()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Charts.ChartLegend" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets a value indicating whether legend is visible. */
public bool IsVisible { get; set; }

/* Gets or sets the legend position. */
public ChartLegendPosition Position { get; set; }

/* Gets or sets a value indicating whether legend overlaps chart&apos;s plot area or resizes it. */
public bool AllowOverlap { get; set; }

/* Gets or sets the fill formating options. */
public FillFormat Fill { get; set; }

/* Gets or sets the outline formating options. */
public LineFormat Outline { get; set; }

/* Gets or sets the text formatting options. */
public TextFormat TextFormat { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotFieldBaseCollection.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a base collection of <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>s. */
public abstract class PivotFieldBaseCollection : IEnumerable<PivotField>, IEnumerable
{

/* Searches for the specified <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> and returns the zero-based index of the first occurrence within the entire collection. */
public int IndexOf(PivotField item)

/* Determines whether the <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> is contained in the collection. */
public bool Contains(PivotField item)

/* Returns an enumerator for the collection. */
public IEnumerator<PivotField> GetEnumerator()

/* Gets the <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> at the specified index. */
public PivotField this[int index] { get; }

/* Gets the <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> with the specified name. */
public PivotField this[string fieldName] { get; }

/* Gets the number of <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>s contained in the collection. */
public int Count { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelRowColumnCollectionBase-1.yml:
namespace GemBox.Spreadsheet
{

/* Generic base class for row and column collections. */
public abstract class ExcelRowColumnCollectionBase<T> : ExcelRowColumnCollectionBase, IEnumerable<T>, IEnumerable where T : ExcelColumnRowBase
{

/* Returns an enumerator that iterates through the collection. */
public IEnumerator<T> GetEnumerator()

/* Gets the row / column with the specified index. */
public abstract T this[int index] { get; }

/* Gets the row / column with the specified name. */
public T this[string name] { get; }

/* Gets the number of currently allocated elements (dynamically changes when worksheet is modified -- read remarks). */
public override sealed int Count { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.LineDashType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents the line dash type. */
public enum LineDashType
{

/* <p>Solid</p>
<p>1</p>
<p>
1 - line segment of the same length as the line width,
0 - space of the same length as the line width.
</p> */
Solid = 0

/* <p>Dot</p>
<p>1000</p>
<p>
1 - line segment of the same length as the line width,
0 - space of the same length as the line width.
</p> */
Dot = 1

/* <p>Dash</p>
<p>1111000</p>
<p>
1 - line segment of the same length as the line width,
0 - space of the same length as the line width.
</p> */
Dash = 2

/* <p>Dash Dot</p>
<p>11110001000</p>
<p>
1 - line segment of the same length as the line width,
0 - space of the same length as the line width.
</p> */
DashDot = 3

/* <p>Long Dash</p>
<p>11111111000</p>
<p>
1 - line segment of the same length as the line width,
0 - space of the same length as the line width.
</p> */
LongDash = 4

/* <p>Long Dash Dot</p>
<p>111111110001000</p>
<p>
1 - line segment of the same length as the line width,
0 - space of the same length as the line width.
</p> */
LongDashDot = 5

/* <p>Long Dash Dot Dot</p>
<p>1111111100010001000</p>
<p>
1 - line segment of the same length as the line width,
0 - space of the same length as the line width.
</p> */
LongDashDotDot = 6

/* <p>Round Dot</p>
<p>10</p>
<p>
1 - line segment of the same length as the line width,
0 - space of the same length as the line width.
</p> */
RoundDot = 7

/* <p>Square Dot</p>
<p>1110</p>
<p>
1 - line segment of the same length as the line width,
0 - space of the same length as the line width.
</p> */
SquareDot = 8

/* <p>System Dash Dot</p>
<p>111010</p>
<p>
1 - line segment of the same length as the line width,
0 - space of the same length as the line width.
</p> */
SystemDashDot = 9

/* <p>System Dash Dot Dot</p>
<p>11101010</p>
<p>
1 - line segment of the same length as the line width,
0 - space of the same length as the line width.
</p> */
SystemDashDotDot = 10

/* <p>Custom</p>
<p></p> */
Custom = 11
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.DocumentProperties.yml:
namespace GemBox.Spreadsheet
{

/* Contains a collection of built-in and custom document properties. */
public sealed class DocumentProperties
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents the current <xref href="GemBox.Spreadsheet.DocumentProperties" data-throw-if-not-resolved="false"></xref>. */
public override string ToString()

/* Gets a collection of built-in document properties. */
public IDictionary<BuiltInDocumentProperties, string> BuiltIn { get; }

/* Gets a collection of custom document properties. */
public IDictionary<string, object> Custom { get; }

/* Gets a read-only collection of custom content type properties. */
public IList<ContentTypeProperty> ContentType { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.NumberFormatBuilder.yml:
namespace GemBox.Spreadsheet
{

/* Utility class that can be used to create a number format for <xref href="GemBox.Spreadsheet.CellStyle.NumberFormat" data-throw-if-not-resolved="false"></xref>. */
public static class NumberFormatBuilder
{

/* Creates a format for a number. */
public static string Number(int decimalPlaces, int minDigits = 1, bool useThousandsSeparator = false, bool useParenthesesToDisplayNegativeValue = false)

/* Creates a currency number format. */
public static string Currency(string currencySymbol, int decimalPlaces, bool useThousandsSeparator = true, bool useParenthesesToDisplayNegativeValue = false, bool showCurrencySymbolToTheRightOfNumber = false, bool showSpaceBetweenCurrencySymbolAndNumber = true)

/* Creates an accounting number format. */
public static string Accounting(int decimalPlaces, bool useThousandsSeparator = true, bool useParenthesesToDisplayNegativeValue = false, string currencySymbol = null, bool showCurrencySymbolToTheRightOfNumber = false)

/* Creates date and time format according to the ISO 8061 standard. */
public static string DateTimeIso8061(int decimalPlaces = 0)

/* Creates a percentage number format. */
public static string Percentage(int decimalPlaces)

/* Creates a fraction number format with the precise denominator value. */
public static string FractionWithPreciseDenominator(int denominator, bool displayAsPureFraction = false)

/* Creates a fraction number format with the denominator value that best fits the fraction part of the number. */
public static string FractionWithFittingDenominator(int maxDenominatorDigits, bool displayAsPureFraction = false)

/* Creates a scientific number format. */
public static string Scientific(int decimalPlaces)

/* Creates a text number format. */
public static string Text()

/* Checks if the provide number format is date format. */
public static bool IsDateTime(string numberFormat)
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.SpinButton.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a Spin Button Form Control. */
public class SpinButton : ExcelFormControl, IDocumentPaginatorSource
{

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.FormControlType.SpinButton" data-throw-if-not-resolved="false"></xref> value. */
public override FormControlType FormControlType { get; }

/* Gets or sets the minimum value that can be produced by this spin button. */
public int MinimumValue { get; set; }

/* Gets or sets the maximum value that can be produced by this spin button. */
public int MaximumValue { get; set; }

/* Gets or sets the increment which is added or subtracted when clicking on this spin button. */
public int IncrementalChange { get; set; }

/* Gets or sets the cell which holds the value of this spin button. */
public ExcelCell CellLink { get; set; }

/* Gets or sets the value of the spin button. */
public int CurrentValue { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelDrawing.yml:
namespace GemBox.Spreadsheet
{

/* Represents a base class for all drawings (pictures, charts, etc.) in the worksheet. */
public abstract class ExcelDrawing : IDocumentPaginatorSource
{

/* Formats this drawing (picture, chart, etc.) to its default size so it can be exported to PDF, XPS, image or be printed. */
public FormattedExcelDrawing Format()

/* Formats this drawing (picture, chart, etc.) to specified size so it can be exported to PDF, XPS, image or be printed. */
public FormattedExcelDrawing Format(double width, double height, LengthUnit unit)

/* Gets the position of this drawing (picture, chart, etc.) in the worksheet. */
public ExcelDrawingPosition Position { get; }

/* Gets the metadata (non-visual properties) of this <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> instance. */
public ExcelDrawingMetadata Metadata { get; }

/* Gets the parent worksheet. */
public ExcelWorksheet Worksheet { get; }

/* Gets or sets the hyperlink on this drawing (picture, chart, etc.). */
public SpreadsheetHyperlink Hyperlink { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ContainDateOperator.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainDateCondition" data-throw-if-not-resolved="false"></xref> operator. */
public enum ContainDateOperator
{

/* Cell is formatted if its value falls into yesterday&apos;s date. */
Yesterday = 0

/* Cell is formatted if its value falls into today&apos;s date. */
Today = 1

/* Cell is formatted if its value falls into tomorrow&apos;s date. */
Tomorrow = 2

/* Cell is formatted if its value falls into dates of the last 7 days. */
Last7Days = 3

/* Cell is formatted if its value falls into last week&apos;s dates. */
LastWeek = 4

/* Cell is formatted if its value falls into this week&apos;s dates. */
ThisWeek = 5

/* Cell is formatted if its value falls into next week&apos;s dates. */
NextWeek = 6

/* Cell is formatted if its value falls into last month&apos;s dates. */
LastMonth = 7

/* Cell is formatted if its value falls into this month&apos;s dates. */
ThisMonth = 8

/* Cell is formatted if its value falls into next month&apos;s dates. */
NextMonth = 9
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelShape.yml:
namespace GemBox.Spreadsheet
{

/* Represents a drawing that has a specific shape / geometry. */
public sealed class ExcelShape : ExcelDrawing, IDocumentPaginatorSource, IColorContext
{

/* Gets or sets the type of the shape (geometry). */
public ShapeType ShapeType { get; }

/* Gets the shape&apos;s adjust values. */
public IDictionary<string, double> AdjustValues { get; }

/* Gets or sets the fill formating options. */
public FillFormat Fill { get; set; }

/* Gets or sets the outline formating options. */
public LineFormat Outline { get; set; }

/* Gets the text content and formatting associated with this <xref href="GemBox.Spreadsheet.ExcelShape" data-throw-if-not-resolved="false"></xref>. */
public TextBox Text { get; }

/* Gets or sets a value indicating whether to flip the drawing horizontally - reflect it across a vertical line that intersects the center of the drawing&apos;s bounding box. */
public bool FlipHorizontal { get; set; }

/* Gets or sets a value indicating whether to flip the drawing vertically - reflect it across a horizontal line that intersects the center of the drawing&apos;s bounding box. */
public bool FlipVertical { get; set; }

/* Gets or sets the amount (in degrees) by which the drawing is rotated clockwise about the center of the drawing&apos;s bounding box. */
public double Rotation { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PanePosition.yml:
namespace GemBox.Spreadsheet
{

/* Represents the position of the pane. */
public enum PanePosition
{

/* Bottom right pane. */
BottomRight = 0

/* Top right pane. */
TopRight = 1

/* Bottom left pane. */
BottomLeft = 2

/* Top left pane. */
TopLeft = 3
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PageBreakCollection-1.yml:
namespace GemBox.Spreadsheet
{

/* Generic base class for page break collections. */
public abstract class PageBreakCollection<T> : PageBreakCollection, IEnumerable<T>, IEnumerable where T : PageBreak
{

/* Returns an enumerator for the collection. */
public IEnumerator<T> GetEnumerator()
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.XlsSaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for saving to, XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) . */
public sealed class XlsSaveOptions : SaveOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.XlsSaveOptions" data-throw-if-not-resolved="false"></xref> class. */
public XlsSaveOptions()

/* Gets limitations for saving to XLS file format. */
public override FileFormatLimitations Limitations { get; }

/* Gets the content-type for XLS file format: <strong>application/vnd.ms-excel</strong>. */
public override string ContentType { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.GroupBox.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a Group Box Form Control. */
public class GroupBox : ExcelFormControl, IDocumentPaginatorSource
{

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.FormControlType.GroupBox" data-throw-if-not-resolved="false"></xref> value. */
public override FormControlType FormControlType { get; }

/* Gets the text content and formatting associated with this <xref href="GemBox.Spreadsheet.Drawing.GroupBox" data-throw-if-not-resolved="false"></xref>. */
public TextBox Text { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ProtectedRange.yml:
namespace GemBox.Spreadsheet
{

/* Represents a range of cells to be protected. */
public sealed class ProtectedRange
{

/* Sets the <xref href="GemBox.Spreadsheet.ProtectedRange" data-throw-if-not-resolved="false"></xref> password. */
public void SetPassword(string password)

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ProtectedRange" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets the <xref href="GemBox.Spreadsheet.ProtectedRange" data-throw-if-not-resolved="false"></xref> title. */
public string Title { get; set; }

/* Gets or sets the range to be protected. */
public string RefersToCells { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CellValueType.yml:
namespace GemBox.Spreadsheet
{

/* Represents the possible cell value types. */
public enum CellValueType
{

/* Blank cell. */
Null = 0

/* Cell value is boolean. */
Bool = 1

/* Cell value is integer. */
Int = 2

/* Cell value is double. */
Double = 3

/* Cell value is date-time. */
DateTime = 4

/* Cell value is string. */
String = 5

/* Cell containing an error. */
Error = 6

/* A general type representing any reference or value type 
not explicitly represented by another CellValueType. */
Object = 7
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SpreadsheetHyperlink.yml:
namespace GemBox.Spreadsheet
{

/* Hyperlink class. */
public sealed class SpreadsheetHyperlink : IExcelEditor<SpreadsheetHyperlinkData>
{

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.SpreadsheetHyperlink" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.SpreadsheetHyperlink" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.SpreadsheetHyperlink" data-throw-if-not-resolved="false"></xref>s are equal. */
public static bool operator ==(SpreadsheetHyperlink first, SpreadsheetHyperlink second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.SpreadsheetHyperlink" data-throw-if-not-resolved="false"></xref>s are not equal. */
public static bool operator !=(SpreadsheetHyperlink first, SpreadsheetHyperlink second)

/* If hyperlink exists returns true, otherwise returns false. */
public bool Exists { get; }

/* Defines if hyperlink location is in this excel file. */
public bool IsExternal { get; set; }

/* Gets or sets ToolTip for hyperlink. */
public string ToolTip { get; set; }

/* Gets or sets the location string for hyperlink.
<remarks>URL has to be in escaped format (you can use <xref href="System.Uri.EscapeUriString(System.String)" data-throw-if-not-resolved="false"></xref> method).</remarks> */
public string Location { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.XmlLoadOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for loading from XML file format (XML Spreadsheet 2003, also called SpreadsheetML). */
public sealed class XmlLoadOptions : LoadOptions
{
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ConditionalIconCollection.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a collection of conditional icons used in <xref href="GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition" data-throw-if-not-resolved="false"></xref> of a conditional formatting rule. */
public sealed class ConditionalIconCollection : ConditionalObjectCollection<ConditionalIcon>, IEnumerable<ConditionalIcon>, IEnumerable
{
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.BuiltInCellStyleName.yml:
namespace GemBox.Spreadsheet
{

/* Represents a built-in style name. */
public enum BuiltInCellStyleName
{

/* &apos;<strong><xref href="GemBox.Spreadsheet.CellStyleCollection.Normal" data-throw-if-not-resolved="false"></xref></strong>&apos; built-in style. */
Normal = 0

/* &apos;<strong>RowLevel_1</strong>&apos; built-in style. */
RowLevel1 = 1

/* &apos;<strong>RowLevel_2</strong>&apos; built-in style. */
RowLevel2 = 257

/* &apos;<strong>RowLevel_3</strong>&apos; built-in style. */
RowLevel3 = 513

/* &apos;<strong>RowLevel_4</strong>&apos; built-in style. */
RowLevel4 = 769

/* &apos;<strong>RowLevel_5</strong>&apos; built-in style. */
RowLevel5 = 1025

/* &apos;<strong>RowLevel_6</strong>&apos; built-in style. */
RowLevel6 = 1281

/* &apos;<strong>RowLevel_7</strong>&apos; built-in style. */
RowLevel7 = 1537

/* &apos;<strong>ColLevel_1</strong>&apos; built-in style. */
ColLevel1 = 2

/* &apos;<strong>ColLevel_2</strong>&apos; built-in style. */
ColLevel2 = 258

/* &apos;<strong>ColLevel_3</strong>&apos; built-in style. */
ColLevel3 = 514

/* &apos;<strong>ColLevel_4</strong>&apos; built-in style. */
ColLevel4 = 770

/* &apos;<strong>ColLevel_5</strong>&apos; built-in style. */
ColLevel5 = 1026

/* &apos;<strong>ColLevel_6</strong>&apos; built-in style. */
ColLevel6 = 1282

/* &apos;<strong>ColLevel_7</strong>&apos; built-in style. */
ColLevel7 = 1538

/* &apos;<strong>Comma</strong>&apos; built-in style. */
Comma = 3

/* &apos;<strong>Currency</strong>&apos; built-in style. */
Currency = 4

/* &apos;<strong>Percent</strong>&apos; built-in style. */
Percent = 5

/* &apos;<strong>Comma [0]</strong>&apos; built-in style. */
Comma0 = 6

/* &apos;<strong>Currency [0]</strong>&apos; built-in style. */
Currency0 = 7

/* <strong>Hyperlink</strong> built-in style. */
Hyperlink = 8

/* <strong>Followed Hyperlink</strong> built-in style. */
FollowedHyperlink = 9

/* <strong>Note</strong> built-in style. */
Note = 10

/* &apos;<strong>Warning Text</strong>&apos; built-in style. */
WarningText = 11

/* &apos;<strong>Title</strong>&apos; built-in style. */
Title = 15

/* &apos;<strong>Heading 1</strong>&apos; built-in style. */
Heading1 = 16

/* &apos;<strong>Heading 2</strong>&apos; built-in style. */
Heading2 = 17

/* &apos;<strong>Heading 3</strong>&apos; built-in style. */
Heading3 = 18

/* &apos;<strong>Heading 4</strong>&apos; built-in style. */
Heading4 = 19

/* &apos;<strong>Input</strong>&apos; built-in style. */
Input = 20

/* &apos;<strong>Output</strong>&apos; built-in style. */
Output = 21

/* &apos;<strong>Calculation</strong>&apos; built-in style. */
Calculation = 22

/* &apos;<strong>Check Cell</strong>&apos; built-in style. */
CheckCell = 23

/* &apos;<strong>Linked Cell</strong>&apos; built-in style. */
LinkedCell = 24

/* &apos;<strong>Total</strong>&apos; built-in style. */
Total = 25

/* &apos;<strong>Good</strong>&apos; built-in style. */
Good = 26

/* &apos;<strong>Bad</strong>&apos; built-in style. */
Bad = 27

/* &apos;<strong>Neutral</strong>&apos; built-in style. */
Neutral = 28

/* &apos;<strong>Accent1</strong>&apos; built-in style. */
Accent1 = 29

/* &apos;<strong>20% - Accent1</strong>&apos; built-in style. */
Accent1Pct20 = 30

/* &apos;<strong>40% - Accent1</strong>&apos; built-in style. */
Accent1Pct40 = 31

/* &apos;<strong>60% - Accent1</strong>&apos; built-in style. */
Accent1Pct60 = 32

/* &apos;<strong>Accent2</strong>&apos; built-in style. */
Accent2 = 33

/* &apos;<strong>20% - Accent2</strong>&apos; built-in style. */
Accent2Pct20 = 34

/* &apos;<strong>40% - Accent2</strong>&apos; built-in style. */
Accent2Pct40 = 35

/* &apos;<strong>60% - Accent2</strong>&apos; built-in style. */
Accent2Pct60 = 36

/* &apos;<strong>Accent3</strong>&apos; built-in style. */
Accent3 = 37

/* &apos;<strong>20% - Accent3</strong>&apos; built-in style. */
Accent3Pct20 = 38

/* &apos;<strong>40% - Accent3</strong>&apos; built-in style. */
Accent3Pct40 = 39

/* &apos;<strong>60% - Accent3</strong>&apos; built-in style. */
Accent3Pct60 = 40

/* &apos;<strong>Accent4</strong>&apos; built-in style. */
Accent4 = 41

/* &apos;<strong>20% - Accent4</strong>&apos; built-in style. */
Accent4Pct20 = 42

/* &apos;<strong>40% - Accent4</strong>&apos; built-in style. */
Accent4Pct40 = 43

/* &apos;<strong>60% - Accent4</strong>&apos; built-in style. */
Accent4Pct60 = 44

/* &apos;<strong>Accent5</strong>&apos; built-in style. */
Accent5 = 45

/* &apos;<strong>20% - Accent5</strong>&apos; built-in style. */
Accent5Pct20 = 46

/* &apos;<strong>40% - Accent5</strong>&apos; built-in style. */
Accent5Pct40 = 47

/* &apos;<strong>60% - Accent5</strong>&apos; built-in style. */
Accent5Pct60 = 48

/* &apos;<strong>Accent6</strong>&apos; built-in style. */
Accent6 = 49

/* &apos;<strong>20% - Accent6</strong>&apos; built-in style. */
Accent6Pct20 = 50

/* &apos;<strong>40% - Accent6</strong>&apos; built-in style. */
Accent6Pct40 = 51

/* &apos;<strong>60% - Accent6</strong>&apos; built-in style. */
Accent6Pct60 = 52

/* &apos;<strong>Explanatory Text</strong>&apos; built-in style. */
ExplanatoryText = 53
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.yml:
namespace GemBox.Spreadsheet
{

/* Arguments for <xref href="GemBox.Spreadsheet.ExtractToDataTableOptions.ExcelCellToDataTableCellConverting" data-throw-if-not-resolved="false"></xref> event. */
public sealed class ExcelCellToDataTableCellConvertingEventArgs : EventArgs
{

/* Gets the destination <xref href="GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable" data-throw-if-not-resolved="false"></xref> */
public DataTable DataTable { get; }

/* Gets the destination column index in <xref href="GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable" data-throw-if-not-resolved="false"></xref>. */
public int DataTableColumnIndex { get; }

/* Gets the destination column type in <xref href="GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable" data-throw-if-not-resolved="false"></xref>. */
public Type DataTableColumnType { get; }

/* Gets or sets the value which will be inserted into destination <xref href="GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable" data-throw-if-not-resolved="false"></xref> cell. */
public object DataTableValue { get; set; }

/* Gets a value indication whether current <xref href="GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTableValue" data-throw-if-not-resolved="false"></xref> can be converted into <xref href="GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.DataTable" data-throw-if-not-resolved="false"></xref> cell. */
public bool IsDataTableValueValid { get; }

/* Gets the source <xref href="GemBox.Spreadsheet.ExcelCellToDataTableCellConvertingEventArgs.ExcelCell" data-throw-if-not-resolved="false"></xref>. */
public ExcelCell ExcelCell { get; }

/* Gets or sets the action which will be executed after event, see <xref href="GemBox.Spreadsheet.ExtractDataEventAction" data-throw-if-not-resolved="false"></xref>. */
public ExtractDataEventAction Action { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.DataValidationType.yml:
namespace GemBox.Spreadsheet
{

/* Specifies the type of data validation used to validate user input. */
public enum DataValidationType
{

/* No data validation. */
None = 0

/* Data validation which checks for whole number values satisfying the given condition. */
WholeNumber = 1

/* Data validation which checks for decimal values satisfying the given condition. */
Decimal = 2

/* Data validation which checks for a value matching one of list of values. */
List = 3

/* Data validation which checks for date values satisfying the given condition. */
Date = 4

/* Data validation which checks for time values satisfying the given condition. */
Time = 5

/* Data validation which checks for text values, whose length satisfies the given condition. */
TextLength = 6

/* Data validation which uses a custom formula to check the cell value. */
Custom = 7
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextElement.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a base class for text elements such as runs, fields, line breaks and unknown text elements. */
public abstract class TextElement : IColorContext
{

/* Gets or sets the text formatting options. */
public TextFormat Format { get; set; }

/* Gets the type of the text element. */
public abstract TextElementType ElementType { get; }

/* Gets the parent text paragraph or <xref uid="langword_csharp_null" name="null" href=""></xref> if text element was deleted. */
public TextParagraph Parent { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.HorizontalPageBreakCollection.yml:
namespace GemBox.Spreadsheet
{

/* Collection of horizontal page breaks (<xref href="GemBox.Spreadsheet.HorizontalPageBreak" data-throw-if-not-resolved="false"></xref>). */
public sealed class HorizontalPageBreakCollection : PageBreakCollection<HorizontalPageBreak>, IEnumerable<HorizontalPageBreak>, IEnumerable
{

/* Adds a new horizontal page break above the specified row. */
public void Add(int row)

/* Adds a new horizontal page break above the specified row and within specified columns. */
public void Add(int row, int firstColumn, int lastColumn)

/* Gets or sets the horizontal page break at the specified index. */
public HorizontalPageBreak this[int index] { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.Marker.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a marker for <xref href="GemBox.Spreadsheet.Charts.LineChartSeries" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.Charts.ScatterChartSeries" data-throw-if-not-resolved="false"></xref>. */
public sealed class Marker : IChartObject, IColorContext
{

/* Deletes the marker from series. */
public void Delete()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Charts.Marker" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets the marker type. */
public MarkerType MarkerType { get; set; }

/* Gets or sets the marker size. */
public double? Size { get; set; }

/* Gets or sets the fill formating options. */
public FillFormat Fill { get; set; }

/* Gets or sets the outline formating options. */
public LineFormat Outline { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a condition that formats only cells with value that satisfies the specified criteria. */
public sealed class ContainValueCondition : ContainCondition, IFormatHolder<CellFormatData>
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets the operator of this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition" data-throw-if-not-resolved="false"></xref>. */
public ContainValueOperator Operator { get; set; }

/* <p>Gets or sets the value of this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition" data-throw-if-not-resolved="false"></xref>.</p>
<p>Value can be either constant or formula.</p>
<p>If value is constant, then it cannot be <xref uid="langword_csharp_null" name="null" href=""></xref> and value&apos;s type must be supported in <xref href="GemBox.Spreadsheet.ExcelCell.Value" data-throw-if-not-resolved="false"></xref> (types supported in <xref href="GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)" data-throw-if-not-resolved="false"></xref>).</p>
<p>If value is formula, then value type must be <xref href="System.String" data-throw-if-not-resolved="false"></xref> and it must start with &apos;=&apos;.</p> */
public object Value { get; set; }

/* <p>Gets or sets the second value of this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition" data-throw-if-not-resolved="false"></xref> used with <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.Between" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.NotBetween" data-throw-if-not-resolved="false"></xref> operators.</p>
<p>Value can be either constant or formula.</p>
<p>If value is constant, then it cannot be <xref uid="langword_csharp_null" name="null" href=""></xref> and value&apos;s type must be supported in <xref href="GemBox.Spreadsheet.ExcelCell.Value" data-throw-if-not-resolved="false"></xref> (types supported in <xref href="GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)" data-throw-if-not-resolved="false"></xref>).</p>
<p>If value is formula, then value type must be <xref href="System.String" data-throw-if-not-resolved="false"></xref> and it must start with &apos;=&apos;.</p> */
public object Value2 { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.yml:
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ChartSeriesCollection-1.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a collection of series of specific type which derives from <xref href="GemBox.Spreadsheet.Charts.ChartSeries" data-throw-if-not-resolved="false"></xref> type. */
public abstract class ChartSeriesCollection<T> : ChartSeriesCollection, IList, ICollection, IChartObject, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable where T : ChartSeries
{

/* Adds a new empty series to the chart. */
public T Add()

/* Adds a new series with specified name and values reference to the chart. */
public T Add(string name, string valuesReference)

/* Adds a new series with specified name and values to the chart. */
public T Add(string name, IEnumerable values)

/* Adds a new series with specified name and values to the chart. */
public T Add(string name, params object[] values)

/* Removes the element at the specified index of the <xref href="GemBox.Spreadsheet.Charts.ChartSeriesCollection%601" data-throw-if-not-resolved="false"></xref>. */
public override void RemoveAt(int index)

/* Removes all elements from the <xref href="GemBox.Spreadsheet.Charts.ChartSeriesCollection%601" data-throw-if-not-resolved="false"></xref>. */
public override void Clear()

/* Moves the series at the specified index to a new location in the collection. */
public override void Move(int oldIndex, int newIndex)

/* Returns an enumerator that iterates through the <xref href="GemBox.Spreadsheet.Charts.ChartSeriesCollection%601" data-throw-if-not-resolved="false"></xref> */
public IEnumerator<T> GetEnumerator()

/* Gets the number of elements contained in the <xref href="GemBox.Spreadsheet.Charts.ChartSeriesCollection%601" data-throw-if-not-resolved="false"></xref>. */
public override int Count { get; }

/* Gets the <code data-dev-comment-type="typeparamref" class="typeparamref">T</code> that is stored at the zero-based index of the <xref href="GemBox.Spreadsheet.Charts.ChartSeriesCollection%601" data-throw-if-not-resolved="false"></xref>. */
public T this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.XlsxDigitalSignatureSaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents a class that stores details for signing a workbook saved to XLSX file with a digital signature. */
public class XlsxDigitalSignatureSaveOptions : DigitalSignatureSaveOptions, IDigitalId
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.XlsxDigitalSignatureSaveOptions" data-throw-if-not-resolved="false"></xref> class. */
public XlsxDigitalSignatureSaveOptions()

/* Gets or sets a value indicating whether the signature is <strong>X</strong>MS <strong>Ad</strong>vanced <strong>E</strong>lectronic <strong>S</strong>ignature (XAdES).
The default value of this property is <xref uid="langword_csharp_true" name="true" href=""></xref>. */
public bool IsAdvancedElectronicSignature { get; set; }

/* Gets or sets the commitment type when signing a document. */
public DigitalSignatureCommitmentType CommitmentType { get; set; }

/* Gets or sets the signer role. */
public string SignerRole { get; set; }

/* Get or sets the location at which the signature was created */
public string Address { get; set; }

/* Get or sets the additional location at which the signature was created */
public string Address2 { get; set; }

/* Gets or sets the city associated with the signer */
public string City { get; set; }

/* Gets or sets the state or province associated with the signer */
public string State { get; set; }

/* Gets or sets the postal or zip code associated with the signer */
public string PostalCode { get; set; }

/* Gets or sets the country associated with the signer */
public string Country { get; set; }

/* Gets additional certificates to be embedded in the signature. */
public IList<Certificate> Certificates { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.WorksheetPanes.yml:
namespace GemBox.Spreadsheet
{

/* Represents the worksheet panes. */
public class WorksheetPanes
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.WorksheetPanes" data-throw-if-not-resolved="false"></xref> class with frozen state. */
public WorksheetPanes(int freezedRows, int freezedColumns)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.WorksheetPanes" data-throw-if-not-resolved="false"></xref> class. */
public WorksheetPanes(PanesState state, float xSplit, float ySplit, string topLeftCell, PanePosition activePane)

/* Copy constructor. */
public WorksheetPanes(WorksheetPanes sourcePane)

/* Gets or sets the state of the panes. */
public PanesState State { get; set; }

/* Gets or sets the XSplit value. */
public float XSplit { get; set; }

/* Gets or sets the XSplit value. */
public float YSplit { get; set; }

/* Gets or sets the top left visible cell in the bottom right pane. */
public string TopLeftCell { get; set; }

/* Gets or sets the active pane. */
public PanePosition ActivePane { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.HorizontalAlignment.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents an enumeration of available horizontal alignments for text. */
public enum HorizontalAlignment
{

/* Align text to the left margin. */
Left = 0

/* Align text in the center. */
Center = 1

/* Align text to the right margin. */
Right = 2

/* Align text so that it is justified across the whole line. Short sentences are not justified. */
Justify = 3

/* <p>Distributes the text words across an entire text line.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.HorizontalAlignment.Justify" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
Distributed = 4

/* <p>Aligns the text with an adjusted kashida length for Arabic text.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.HorizontalAlignment.Justify" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
JustifyLow = 5

/* <p>Distributes Thai text specially, because each character is treated as a word.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.HorizontalAlignment.Justify" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
DistributedThai = 6
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FontSettings.yml:
namespace GemBox.Spreadsheet
{

/* Contains font related settings which are used when printing a spreadsheet or exporting a spreadsheet to a file format that requires font information. */
public static class FontSettings
{

/* Gets or sets the base <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> where component looks for fonts. <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> path should end with <xref href="System.IO.Path.DirectorySeparatorChar" data-throw-if-not-resolved="false"></xref> or <xref href="System.IO.Path.AltDirectorySeparatorChar" data-throw-if-not-resolved="false"></xref>. */
public static Uri FontsBaseUri { get; set; }

/* Gets or sets the base directory path where component looks for fonts. Directory path can be absolute or relative to <xref href="System.IO.Directory.GetCurrentDirectory" data-throw-if-not-resolved="false"></xref>. */
public static string FontsBaseDirectory { get; set; }

/* <p>Gets or sets the base resource location where component looks for fonts specified as resources inside the local or referenced assembly.</p>
<p>Read Remarks for details about the format of the <xref href="GemBox.Spreadsheet.FontSettings.FontsBaseResourceLocation" data-throw-if-not-resolved="false"></xref> for <strong>desktop</strong> and <strong>web</strong> applications.</p> */
public static string FontsBaseResourceLocation { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Tables.TableStyleOptions.yml:
namespace GemBox.Spreadsheet.Tables
{

/* Specifies which options are applied to a <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> style. */
[Flags]
public enum TableStyleOptions
{

/* Do not apply any option. */
None = 0

/* Show the first column. */
FirstColumn = 1

/* Show the last column. */
LastColumn = 2

/* Show row stripe formatting for the table. */
BandedRows = 4

/* Show column stripe formatting for the table. */
BandedColumns = 8
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.AxisGridlines.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents an axis major or minor gridlines. */
public sealed class AxisGridlines : IChartObject, IColorContext
{

/* Deletes gridlines. */
public void Delete()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Charts.AxisGridlines" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets a value indicating whether gridlines are visible. */
public bool IsVisible { get; set; }

/* Gets or sets the fill formating options. */
public FillFormat Fill { get; set; }

/* Gets or sets the outline formating options. */
public LineFormat Outline { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Tables.TableRow.yml:
namespace GemBox.Spreadsheet.Tables
{

/* Represents a <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> row.
Supported in XLSX only. */
public sealed class TableRow
{

/* Gets the parent <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref>. */
public Table Parent { get; }

/* Gets the row index. */
public int Index { get; }

/* Gets the row data range. */
public CellRange DataRange { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a condition that formats only cells with values that are above or below average. */
public sealed class AboveOrBelowAverageCondition : FormatCondition, IFormatHolder<CellFormatData>
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* <p>Gets or sets a value indicating whether to format cells with values below average.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref> (formats cells with values above average).</p> */
public bool Below { get; set; }

/* <p>Gets or sets a value indicating whether to format cells with values equal to average.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref> (formats cells with values exclusively above or below average).</p> */
public bool Equal { get; set; }

/* Gets the <xref href="GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.AboveOrBelowAverage" data-throw-if-not-resolved="false"></xref> value. */
public override FormatConditionType ConditionType { get; }

/* <p>Gets or sets the number of standard deviations above or below average.</p>
<p>Only cells with values above or below average ± <xref href="GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition.StandardDeviations" data-throw-if-not-resolved="false"></xref> * <em>std</em> are formatted.</p>
<p>Default value is 0.</p> */
public int StandardDeviations { get; set; }

/* Gets the actual formatting which will be applied to a cell if its value satisfies this <xref href="GemBox.Spreadsheet.ConditionalFormatting.AboveOrBelowAverageCondition" data-throw-if-not-resolved="false"></xref>. */
public CellStyle Style { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ChartSeries.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a single chart series. */
public class ChartSeries : IChartObject, IChartDataLabelsDataProvider, IColorContext
{

/* Sets the chart series values. */
public void SetValues(IEnumerable values)

/* Sets the chart series values. */
public void SetValues(params object[] values)

/* Deletes the series. */
public void Delete()

/* Returns the <xref href="GemBox.Spreadsheet.Charts.ChartSeries.DisplayName" data-throw-if-not-resolved="false"></xref> value. */
public override string ToString()

/* Gets or sets the series name as direct value (for example, &apos;My series&apos;) or as a reference to a cell with value (for example, &apos;=Sheet1!A1&apos;). */
public string Name { get; set; }

/* Gets or sets a value indicating whether legend entry for this series instance is visible. */
public bool IsLegendEntryVisible { get; set; }

/* Gets the index of this <xref href="GemBox.Spreadsheet.Charts.ChartSeries" data-throw-if-not-resolved="false"></xref> instance in the parent <xref href="GemBox.Spreadsheet.Charts.ChartSeriesCollection" data-throw-if-not-resolved="false"></xref>.
If parent chart is a <xref href="GemBox.Spreadsheet.Charts.ComboChart" data-throw-if-not-resolved="false"></xref>&apos;s child, value represents a global index. */
public int Index { get; }

/* Gets the series display name. If <xref href="GemBox.Spreadsheet.Charts.ChartSeries.Name" data-throw-if-not-resolved="false"></xref> is direct value, then <xref href="GemBox.Spreadsheet.Charts.ChartSeries.Name" data-throw-if-not-resolved="false"></xref> value is returned; otherwise, if <xref href="GemBox.Spreadsheet.Charts.ChartSeries.Name" data-throw-if-not-resolved="false"></xref> is a cell reference, then referenced cell value is returned. */
public string DisplayName { get; }

/* Gets the settings for the data labels for an entire series. */
public ChartDataLabels DataLabels { get; }

/* Gets or sets the chart series values as a cell range reference (for example, &apos;Sheet1!A1:D1&apos;). Values from cells in the referenced range will be used as values of this series. */
public string ValuesReference { get; set; }

/* Gets the chart series values. */
public IEnumerable Values { get; }

/* Gets the chart series data points. */
public DataPointCollection DataPoints { get; }

/* Gets or sets the fill formating options. */
public virtual FillFormat Fill { get; set; }

/* Gets or sets the outline formating options. */
public virtual LineFormat Outline { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FormulaType.yml:
namespace GemBox.Spreadsheet
{

/* Represents a formula type. */
public enum FormulaType
{

/* Normal cell formula. */
Normal = 0

/* Legacy array formula, commonly referred to as CSE formula. */
Array = 1

/* Dynamic array formula. */
DynamicArray = 2

/* Data table formula. */
DataTable = 3
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.DataValidationCollection.yml:
namespace GemBox.Spreadsheet
{

/* A collection of <xref href="GemBox.Spreadsheet.DataValidation" data-throw-if-not-resolved="false"></xref> items.
Supported in XLSX only. */
public sealed class DataValidationCollection : Collection<DataValidation>, IList<DataValidation>, ICollection<DataValidation>, IList, ICollection, IReadOnlyList<DataValidation>, IReadOnlyCollection<DataValidation>, IEnumerable<DataValidation>, IEnumerable
{
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.HtmlType.yml:
namespace GemBox.Spreadsheet
{

/* Defines type of HTML export. */
public enum HtmlType
{

/* Export entire HTML document. Pictures are exported only if <xref href="GemBox.Spreadsheet.ExcelFile.Save(System.String)" data-throw-if-not-resolved="false"></xref> or <xref href="GemBox.Spreadsheet.ExcelFile.Save(System.String%2cGemBox.Spreadsheet.SaveOptions)" data-throw-if-not-resolved="false"></xref> overload is used or if <xref href="GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectoryPath" data-throw-if-not-resolved="false"></xref> is specified. */
Html = 0

/* Export HTML table and its content. Pictures are exported only if <xref href="GemBox.Spreadsheet.ExcelFile.Save(System.String)" data-throw-if-not-resolved="false"></xref> or <xref href="GemBox.Spreadsheet.ExcelFile.Save(System.String%2cGemBox.Spreadsheet.SaveOptions)" data-throw-if-not-resolved="false"></xref> overload is used or if <xref href="GemBox.Spreadsheet.HtmlSaveOptions.FilesDirectoryPath" data-throw-if-not-resolved="false"></xref> is specified. */
HtmlTable = 1

/* Export entire HTML document and images to MIME HTML (MHTML) format. Pictures are always exported. */
Mhtml = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ContainTextOperator.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition" data-throw-if-not-resolved="false"></xref> operator. */
public enum ContainTextOperator
{

/* Cell is formatted if its value contains <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition.Value" data-throw-if-not-resolved="false"></xref>. */
Contains = 0

/* Cell is formatted if its value does not contain <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition.Value" data-throw-if-not-resolved="false"></xref>. */
NotContains = 1

/* Cell is formatted if its value begins with <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition.Value" data-throw-if-not-resolved="false"></xref>. */
BeginsWith = 2

/* Cell is formatted if its value ends with <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition.Value" data-throw-if-not-resolved="false"></xref>. */
EndsWith = 3
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotTable.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a pivot table. */
public sealed class PivotTable
{

/* Calculates the values of this <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref>. */
public void Calculate()

/* Gets or sets a value indicating whether the <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> shows grand totals for columns. */
public bool ColumnGrandTotals { get; set; }

/* Gets or sets a value indicating whether the <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> shows grand totals for rows. */
public bool RowGrandTotals { get; set; }

/* Gets or sets the <xref href="System.String" data-throw-if-not-resolved="false"></xref> to be displayed in column header in compact mode. */
public string ColumnHeaderCaption { get; set; }

/* Gets or sets the <xref href="System.String" data-throw-if-not-resolved="false"></xref> to be displayed in row header in compact mode. */
public string RowHeaderCaption { get; set; }

/* Gets or sets a value indicating whether fields in the <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> are sorted in non-default order in the field list. */
public bool FieldListSortAscending { get; set; }

/* Gets or sets a value indicating how the page fields are laid out when there are multiple <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>s in the page area. */
public bool PageOverThenDown { get; set; }

/* Gets or sets a value indicating whether the classic layout should be used for <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> display. */
public bool ClassicPivotTableLayout { get; set; }

/* Gets or sets a value indicating whether drill indicators should be shown. */
public bool ShowDrill { get; set; }

/* Gets or sets the built-in style used in the body of the <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref>. */
public BuiltInPivotStyleName BuiltInStyle { get; set; }

/* Gets or sets the options to be applied to the <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> style. */
public PivotTableStyleOptions StyleOptions { get; set; }

/* Gets or sets the <xref href="System.String" data-throw-if-not-resolved="false"></xref> to be displayed in cells that contain errors. */
public string ErrorCaption { get; set; }

/* Gets or sets the <xref href="System.String" data-throw-if-not-resolved="false"></xref> to be displayed in cells with no value. */
public string MissingCaption { get; set; }

/* Gets the <xref href="GemBox.Spreadsheet.PivotTables.PivotCache" data-throw-if-not-resolved="false"></xref> associated with this <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref>. */
public PivotCache PivotCache { get; }

/* Gets the name of the <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref>. */
public string Name { get; set; }

/* Gets the pivot table <xref href="GemBox.Spreadsheet.PivotTables.PivotTableFilter" data-throw-if-not-resolved="false"></xref>. */
public PivotTableFilter Filter { get; }

/* Gets the location of this <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> in the worksheet. */
public ExcelCell TopLeftCell { get; }

/* Gets the location of the data in this <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref>. */
public CellRange DataRange { get; }

/* <p>Gets a <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> object that represents all the data fields in this <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref>.</p>
<p>It contains non-<xref uid="langword_csharp_null" name="null" href=""></xref> value only if there are two or more data fields in the <xref href="GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" data-throw-if-not-resolved="false"></xref>.</p>
<p>It is only used to add <xref href="GemBox.Spreadsheet.PivotTables.PivotTable.DataPivotField" data-throw-if-not-resolved="false"></xref> to the <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> row/column area.</p>
<p>By default, it is added in the row area (automatically, when there are two or more data fields in the <xref href="GemBox.Spreadsheet.PivotTables.PivotTable.DataFields" data-throw-if-not-resolved="false"></xref>).</p> */
public PivotField DataPivotField { get; }

/* Gets the collection of all (visible and hidden) <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>s. */
public PivotFieldCollection PivotFields { get; }

/* Gets the collection of all <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>s that are currently showing as row fields. */
public PivotAreaFieldCollection RowFields { get; }

/* Gets the collection of all <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>s that are currently shown as column fields. */
public PivotAreaFieldCollection ColumnFields { get; }

/* Gets the collection of all <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>s that are currently showing as page fields. */
public PivotAreaFieldCollection PageFields { get; }

/* Gets the collection of all <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>s that are currently shown as data fields. */
public PivotAreaFieldCollection DataFields { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a condition that formats only cells with top or bottom ranked values. */
public sealed class TopOrBottomRankedCondition : FormatCondition, IFormatHolder<CellFormatData>
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* <p>Gets or sets a value indicating whether to format cells with bottom ranked values.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref> (formats cells with top ranked values).</p> */
public bool Bottom { get; set; }

/* <p>Gets or sets a value indicating whether the <xref href="GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition.Rank" data-throw-if-not-resolved="false"></xref> value is expressed as a percentage of a number of cells in the applied range.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref> (the <xref href="GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition.Rank" data-throw-if-not-resolved="false"></xref> value is expressed as a number of cells).</p> */
public bool Percent { get; set; }

/* Gets the <xref href="GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.TopOrBottomRanked" data-throw-if-not-resolved="false"></xref> value. */
public override FormatConditionType ConditionType { get; }

/* Gets or sets the number or percentage of top or bottom ranked cells which are formatted. */
public int Rank { get; set; }

/* Gets the actual formatting which will be applied to a cell if its value satisfies this <xref href="GemBox.Spreadsheet.ConditionalFormatting.TopOrBottomRankedCondition" data-throw-if-not-resolved="false"></xref>. */
public CellStyle Style { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.Length.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a length, distance or a coordinate. */
public struct Length : IComparable<Length>, IEquatable<Length>, IFormattable
{

/* Converts a length value in a specified measurement unit to a <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> instance. */
public static Length From(double value, LengthUnit unit)

/* Converts this <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> instance to a length value in a specified measurement unit. */
public double To(LengthUnit unit)

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> instance in a specified format and a measurement unit by using a specified format provider. */
public string ToString(string format, IFormatProvider formatProvider, LengthUnit unit)

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> instance in a specified format and a <xref href="GemBox.Spreadsheet.Drawing.Length.DefaultUnit" data-throw-if-not-resolved="false"></xref> by using a specified format provider. */
public string ToString(string format, IFormatProvider formatProvider)

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> instance in a specified measurement unit. */
public string ToString(LengthUnit unit)

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> instance in a <xref href="GemBox.Spreadsheet.Drawing.Length.DefaultUnit" data-throw-if-not-resolved="false"></xref>. */
public override string ToString()

/* Compares the value of this instance to a specified <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> value and returns an integer that indicates whether this instance is less than, equal to, or greater than the specified <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> value. */
public int CompareTo(Length other)

/* Determines whether the <code data-dev-comment-type="paramref" class="paramref">other</code> <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> instance. */
public bool Equals(Length other)

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref>s are equal. */
public static bool operator ==(Length first, Length second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref>s are not equal. */
public static bool operator !=(Length first, Length second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> is less than <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref>. */
public static bool operator <(Length first, Length second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> is greater than <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref>. */
public static bool operator>(Length first, Length second)

/* Converts a length value in a <xref href="GemBox.Spreadsheet.Drawing.Length.DefaultUnit" data-throw-if-not-resolved="false"></xref> to a <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> instance. */
public static implicit operator Length(double value)

/* Converts a <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> instance to a length value in a <xref href="GemBox.Spreadsheet.Drawing.Length.DefaultUnit" data-throw-if-not-resolved="false"></xref>. */
public static implicit operator double (Length value)

/* Converts a length value in an EMU (English Metric Unit) measurement unit to a <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> instance. */
public static explicit operator Length(long value)

/* Converts a <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> instance to a length value in an EMU (English Metric Unit) measurement unit. */
public static explicit operator long (Length value)

/* Gets or sets the default measurement unit that is applied globally every time <xref href="GemBox.Spreadsheet.Drawing.Length" data-throw-if-not-resolved="false"></xref> is converted from/to a <xref href="System.Double" data-throw-if-not-resolved="false"></xref> and to a <xref href="System.String" data-throw-if-not-resolved="false"></xref>. */
public static LengthUnit DefaultUnit { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.yml:
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ProtectedRangeCollection.yml:
namespace GemBox.Spreadsheet
{

/* Represents a collection of all protected ranges on the <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public sealed class ProtectedRangeCollection : IEnumerable<ProtectedRange>, IEnumerable
{

/* Adds the new <xref href="GemBox.Spreadsheet.ProtectedRange" data-throw-if-not-resolved="false"></xref> to the current <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public ProtectedRange AddNew(string title, string refersToCells, string password)

/* Adds the new <xref href="GemBox.Spreadsheet.ProtectedRange" data-throw-if-not-resolved="false"></xref> to the current <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public ProtectedRange AddNew(string title, string refersToCells)

/* Removes the <xref href="GemBox.Spreadsheet.ProtectedRange" data-throw-if-not-resolved="false"></xref> at the specified index of the <xref href="GemBox.Spreadsheet.ProtectedRangeCollection" data-throw-if-not-resolved="false"></xref>. */
public void RemoveAt(int index)

/* Removes all <xref href="GemBox.Spreadsheet.ProtectedRange" data-throw-if-not-resolved="false"></xref>s from the current <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public void Clear()

/* Returns an enumerator that iterates through the <xref href="GemBox.Spreadsheet.ProtectedRangeCollection" data-throw-if-not-resolved="false"></xref>. */
public IEnumerator<ProtectedRange> GetEnumerator()

/* Gets the number of <xref href="GemBox.Spreadsheet.ProtectedRange" data-throw-if-not-resolved="false"></xref>s actually contained in the <xref href="GemBox.Spreadsheet.ProtectedRangeCollection" data-throw-if-not-resolved="false"></xref>. */
public int Count { get; }

/* Gets the <xref href="GemBox.Spreadsheet.ProtectedRange" data-throw-if-not-resolved="false"></xref> at the specified index. */
public ProtectedRange this[int index] { get; }

/* Gets the <xref href="GemBox.Spreadsheet.ProtectedRange" data-throw-if-not-resolved="false"></xref> with the specified title or <xref uid="langword_csharp_null" name="null" href=""></xref>. */
public ProtectedRange this[string title] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.LineFormat.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents an outline style that can be applied to a number of different objects such as shapes and text. 
The line allows for the specifying of many different types of outlines including even line dashes and bevels. */
public sealed class LineFormat
{

/* <p>Gets or sets the fill of the outline.</p>
<p>Fill types <xref href="GemBox.Spreadsheet.Drawing.FillFormatType.Gradient" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.Drawing.FillFormatType.Pattern" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.Drawing.FillFormatType.Picture" data-throw-if-not-resolved="false"></xref> are currently not supported in PDF, XPS and image formats.</p> */
public FillFormat Fill { get; set; }

/* <p>Gets or sets the width to be used for the underline stroke.</p>
<p>Default value is 0.</p> */
public Length Width { get; set; }

/* <p>Gets or sets the ending caps that should be used for this line. 
This also affects the ends of line segments for dashed lines.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.Drawing.LineCapType.Square" data-throw-if-not-resolved="false"></xref>.</p> */
public LineCapType CapType { get; set; }

/* <p>Gets or sets the compound line type to be used for the underline stroke.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.Drawing.LineCompoundType.Single" data-throw-if-not-resolved="false"></xref>.</p>
<p>This member is currently not supported in PDF, XPS and image formats.</p> */
public LineCompoundType CompoundType { get; set; }

/* <p>Gets or sets the dashing scheme that should be used for this line.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.Drawing.LineDashType.Solid" data-throw-if-not-resolved="false"></xref> (no dashes).</p> */
public LineDashType DashType { get; set; }

/* <p>Gets or sets the line join type that indicates how connected lines are joined.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.Drawing.LineJoinType.Round" data-throw-if-not-resolved="false"></xref>.</p> */
public LineJoinType JoinType { get; set; }

/* <p>Gets or sets the decorations added to the head of a line.</p> */
public LineArrow BeginArrow { get; set; }

/* <p>Gets or sets the decorations added to the tail of a line.</p> */
public LineArrow EndArrow { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Vba.VbaModuleCollection.yml:
namespace GemBox.Spreadsheet.Vba
{

/* Represents the collection of <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref>. */
public sealed class VbaModuleCollection : IEnumerable<VbaModule>, IEnumerable
{

/* Creates and returns a new <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> with the given name and with the type of <xref href="GemBox.Spreadsheet.Vba.VbaModuleType.Procedural" data-throw-if-not-resolved="false"></xref>. */
public VbaModule Add(string name)

/* Removes all items from the collection. */
public void Clear()

/* Indicates whether this collection contains the <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> object with the specified <code data-dev-comment-type="paramref" class="paramref">name</code>. */
public bool Contains(string name)

/* Returns an enumerator that iterates through the collection. */
public IEnumerator<VbaModule> GetEnumerator()

/* Removes the <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> by name. */
public void Remove(string name)

/* Removes the given <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref>. */
public void Remove(VbaModule vbaModule)

/* Removes the <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> from the given index. */
public void RemoveAt(int index)

/* Tries to get the <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> with the specified <code data-dev-comment-type="paramref" class="paramref">name</code>. */
public bool TryGet(string name, out VbaModule vbaModule)

/* Creates and returns a new <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> bound to the given <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public VbaModule Add(ExcelWorksheet worksheet)

/* Creates and returns a new <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> with the given name and bound to the given <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public VbaModule Add(ExcelWorksheet worksheet, string name)

/* <p>Creates and returns a new <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> with the given name and type.</p>
<p>If the given <code data-dev-comment-type="paramref" class="paramref">vbaModuleType</code> is <xref href="GemBox.Spreadsheet.Vba.VbaModuleType.Document" data-throw-if-not-resolved="false"></xref>, returning <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> will be bound to <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref>.</p> */
public VbaModule Add(string name, VbaModuleType vbaModuleType)

/* <p>Clones and returns a new <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> from the given module.</p> */
public VbaModule AddCopy(VbaModule vbaModule)

/* Indicates whether this collection contains the <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> object with the specified <code data-dev-comment-type="paramref" class="paramref">excelWorksheet</code>. */
public bool Contains(ExcelWorksheet excelWorksheet)

/* Tries to get the <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> with the specified <code data-dev-comment-type="paramref" class="paramref">excelWorksheet</code>. */
public bool TryGet(ExcelWorksheet excelWorksheet, out VbaModule vbaModule)

/* Gets the number of elements contained. */
public int Count { get; }

/* Gets the <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> at the specified index. */
public VbaModule this[int index] { get; }

/* Gets the <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> with the given name. */
public VbaModule this[string name] { get; }

/* Gets the <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> that is bound to the given <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public VbaModule this[ExcelWorksheet worksheet] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.VerticalPageBreak.yml:
namespace GemBox.Spreadsheet
{

/* Specifies a vertical position where the new page begins when the worksheet is printed. */
public sealed class VerticalPageBreak : PageBreak, IComparable<PageBreak>
{

/* Index of the first column of the new page. */
public int Column { get; set; }

/* Index of the first row of the new page. */
public int FirstRow { get; set; }

/* Index of the last row of the new page. */
public int LastRow { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CopyOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents the options used when copying a cell range. */
public sealed class CopyOptions
{

/* Gets or sets a value indicating whether to transpose rows and columns. The default value is <xref uid="langword_csharp_false" name="false" href=""></xref>. */
public bool Transpose { get; set; }

/* Gets or sets a value indicating whether to skip blank cells. The default value is <xref uid="langword_csharp_false" name="false" href=""></xref>. */
public bool SkipBlanks { get; set; }

/* Gets or sets types of cell data to copy. The default value is <xref href="GemBox.Spreadsheet.CopyTypes.Default" data-throw-if-not-resolved="false"></xref>. */
public CopyTypes CopyTypes { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.PictureContentType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a picture file format. */
public enum PictureContentType
{

/* Unknown picture file format. */
Unknown = 0

/* Portable Network Graphics (<a href="http://www.libpng.org/pub/png/spec/">PNG</a>) file format. */
Png = 1

/* Joint Photographic Experts Group (<a href="https://www.w3.org/Graphics/JPEG/">JPEG</a>) file format. */
Jpeg = 2

/* Tagged Image File Format (<a href="https://www.adobe.io/open/standards/TIFF.html">TIFF</a>). */
Tiff = 3

/* Graphics Interchange Format (<a href="https://www.w3.org/Graphics/GIF/spec-gif89a.txt">GIF</a>) */
Gif = 4

/* Legacy native graphics format of Apple&apos;s 2D graphics library QuickDraw which is a core part of the classic Apple Macintosh operating system. */
Pict = 5
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.CategoryAxis.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents an axis used for categories. */
public sealed class CategoryAxis : ChartAxis, IChartTitleParent, IChartObject, IColorContext
{

/* Gets the axis type for <xref href="GemBox.Spreadsheet.Charts.CategoryAxis" data-throw-if-not-resolved="false"></xref> which is <xref href="GemBox.Spreadsheet.Charts.AxisType.Category" data-throw-if-not-resolved="false"></xref>. */
public override AxisType AxisType { get; }

/* Gets or sets the interval between labels that are drawn. */
public int? LabelsInterval { get; set; }

/* Gets or sets the interval between tick marks that are drawn. */
public int TickMarksInterval { get; set; }

/* Gets or sets the value indicating whether the labels should be shown as hierarchy. */
public bool MultiLevelLabels { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.LineJoinType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents values that specify how the adjacent lines are joined. */
public enum LineJoinType
{

/* A round joint specifies that lines joined together have a round join. */
Round = 0

/* A bevel joint specifies that an angle joint is used to connect lines. */
Bevel = 1

/* A miter joint specifies that a line join shall be mitered. */
Miter = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.LineArrowSize.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents the width and the length of the line end decoration (e.g., arrowhead) relative to the width of the line itself. */
public enum LineArrowSize
{

/* Small width and small length. */
Size1 = 0

/* Small width and medium length. */
Size2 = 1

/* Small width and large length. */
Size3 = 2

/* Medium width and small length. */
Size4 = 3

/* Medium width and medium length. */
Size5 = 4

/* Medium width and large length. */
Size6 = 5

/* Large width and small length. */
Size7 = 6

/* Large width and medium length. */
Size8 = 7

/* Large width and large length. */
Size9 = 8
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.LineChart.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a chart whose series values are drawn using lines. */
public sealed class LineChart : ExcelChart, IDocumentPaginatorSource, IChartTitleParent, IChartObject, IChartDataLabelsDataProvider, IColorContext
{

/* Gets the chart&apos;s series. */
public LineChartSeriesCollection Series { get; }

/* Gets the chart type for <xref href="GemBox.Spreadsheet.Charts.LineChart" data-throw-if-not-resolved="false"></xref> which is <xref href="GemBox.Spreadsheet.Charts.ChartType.Line" data-throw-if-not-resolved="false"></xref>. */
public override ChartType ChartType { get; }

/* <p>Gets or sets a value indicating whether markers will be shown on series points.</p>
<p>Value is resolved from the series. If any series has a marker than all newly added series will also have a marker.</p>
<p>When setting a value, value is propagated to all series.</p> */
public bool ShowMarkers { get; set; }

/* Gets or sets the chart grouping. */
public ChartGrouping Grouping { get; set; }

/* Gets the chart axes. */
public ChartAxes Axes { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.LineChartSeries.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a single <xref href="GemBox.Spreadsheet.Charts.LineChart" data-throw-if-not-resolved="false"></xref> series. */
public sealed class LineChartSeries : MarkerChartSeries, IChartObject, IChartDataLabelsDataProvider, IColorContext
{

/* Gets or sets the fill formating options. */
public override FillFormat Fill { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotItemCollection.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a collection of <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref>s. */
public class PivotItemCollection : IEnumerable<PivotItem>, IEnumerable
{

/* Searches for the specified <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref> and returns the zero-based index of the first occurrence within the entire collection. */
public int IndexOf(PivotItem item)

/* Determines whether an <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref> element is in the collection. */
public bool Contains(PivotItem item)

/* Adds a calculated <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref> at the end of the collection. */
public PivotItem AddCalculated(string itemName, string formula)

/* Removes the calculated <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref> from the collection. */
public void RemoveCalculated(string itemName)

/* Moves the <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref> at the specified index to a new location in the collection. */
public void Move(int oldIndex, int newIndex)

/* Returns an enumerator for the collection. */
public IEnumerator<PivotItem> GetEnumerator()

/* Gets the <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref> at the specified index. */
public PivotItem this[int index] { get; }

/* Gets the <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref> with the specified name. */
public PivotItem this[string itemName] { get; }

/* Gets the number of <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref>s contained in the collection. */
public int Count { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FilterType.yml:
namespace GemBox.Spreadsheet
{

/* Represents a filter type. */
public enum FilterType
{

/* A <xref href="GemBox.Spreadsheet.ValuesFilter" data-throw-if-not-resolved="false"></xref> type. */
Values = 0

/* A <xref href="GemBox.Spreadsheet.Top10Filter" data-throw-if-not-resolved="false"></xref> type. */
Top10 = 1

/* A <xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> type. */
Custom = 2

/* A <xref href="GemBox.Spreadsheet.DynamicFilter" data-throw-if-not-resolved="false"></xref> type. */
Dynamic = 3

/* <p>A ColorFilter type.</p>
<p>This filter is currently not supported by <strong>GemBox.Spreadsheet</strong>. It is preserved for XLSX round-trip.</p> */
Color = 4

/* <p>An IconFilter type.</p>
<p>This filter is currently not supported by <strong>GemBox.Spreadsheet</strong>. It is preserved for XLSX round-trip.</p> */
Icon = 5
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.LineArrowType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents the shape decoration that appears at the ends of lines. */
public enum LineArrowType
{

/* No end. */
NoArrow = 0

/* Triangle arrow head. */
Arrow = 1

/* Line arrow head. */
OpenArrow = 2

/* Stealth arrow head. */
StealthArrow = 3

/* Diamond. */
DiamondArrow = 4

/* Oval. */
OvalArrow = 5
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SortState.yml:
namespace GemBox.Spreadsheet
{

/* Represents sort settings and provides sort functionality. */
public sealed class SortState
{

/* Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> applied to a column (or a row, if <xref href="GemBox.Spreadsheet.SortState.LeftToRight" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>) with the specified index (relative to the <xref href="GemBox.Spreadsheet.SortState.Range" data-throw-if-not-resolved="false"></xref>). */
public SortState By(int columnRowIndex)

/* Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> applied to a column (or a row, if <xref href="GemBox.Spreadsheet.SortState.LeftToRight" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>) with the specified index (relative to the <xref href="GemBox.Spreadsheet.SortState.Range" data-throw-if-not-resolved="false"></xref>) and with the specified custom list by which order of items to sort by. */
public SortState By(int columnRowIndex, IEnumerable<string> customList)

/* Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> applied to a column (or a row, if <xref href="GemBox.Spreadsheet.SortState.LeftToRight" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>) with the specified index (relative to the <xref href="GemBox.Spreadsheet.SortState.Range" data-throw-if-not-resolved="false"></xref>) and with the specified custom list by which order of items to sort by. */
public SortState By(int columnRowIndex, params string[] customList)

/* Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> applied to a column (or a row, if <xref href="GemBox.Spreadsheet.SortState.LeftToRight" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>) with the specified index (relative to the <xref href="GemBox.Spreadsheet.SortState.Range" data-throw-if-not-resolved="false"></xref>) and with the specified order to sort by. */
public SortState By(int columnRowIndex, bool descending)

/* Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> applied to a column (or a row, if <xref href="GemBox.Spreadsheet.SortState.LeftToRight" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>) with the specified index (relative to the <xref href="GemBox.Spreadsheet.SortState.Range" data-throw-if-not-resolved="false"></xref>) and with the specified order and custom list by which order of items to sort by. */
public SortState By(int columnRowIndex, bool descending, IEnumerable<string> customList)

/* Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> applied to a column (or a row, if <xref href="GemBox.Spreadsheet.SortState.LeftToRight" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>) with the specified index (relative to the <xref href="GemBox.Spreadsheet.SortState.Range" data-throw-if-not-resolved="false"></xref>) and with the specified order and custom list by which order of items to sort by. */
public SortState By(int columnRowIndex, bool descending, params string[] customList)

/* Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> applied to a column (or a row, if <xref href="GemBox.Spreadsheet.SortState.LeftToRight" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>) with the specified index (relative to the <xref href="GemBox.Spreadsheet.SortState.Range" data-throw-if-not-resolved="false"></xref>) and with the specified comparison method to sort by. */
public SortState By(int columnRowIndex, Comparison<ExcelCell> comparison)

/* Performs the sorting of this <xref href="GemBox.Spreadsheet.SortState.Range" data-throw-if-not-resolved="false"></xref> based on this <xref href="GemBox.Spreadsheet.SortState" data-throw-if-not-resolved="false"></xref> settings. */
public void Apply()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.SortState" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the range to sort. */
public CellRange Range { get; }

/* Gets the sort levels. */
public SortLevelCollection Levels { get; }

/* <p>Gets or sets a value indicating whether the sort is case-sensitive.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool CaseSensitive { get; set; }

/* <p>Gets or sets a value indicating whether to sort from left to right (whether to sort columns instead of rows).</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool LeftToRight { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.AxisCrossType.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents the possible positions for both chart axis to cross. It does not affect secondary axis. */
public enum AxisCrossType
{

/* The opposite axis will be automatically positioned. */
Automatic = 0

/* The opposite axis will be positioned before an specific point (1-based category index for category axis or a specific value for value axis). */
Specific = 1

/* The opposite axis will be positioned after this axis maximum value or last category. */
Maximum = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Vba.VbaModuleType.yml:
namespace GemBox.Spreadsheet.Vba
{

/* Represents the type of <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref>. */
public enum VbaModuleType
{

/* A collection of subroutines and functions. */
Procedural = 0

/* A type of VBA project item that specifies a module for embedded macros and programmatic access operations that are associated with a document. */
Document = 1

/* A module that contains the definition for a new object. Each instance of a class creates a new object, and procedures that are defined in the module become properties and methods of the object. */
Class = 2

/* A VBA module that extends the methods and properties of an ActiveX control that has been registered with the project. */
Designer = 3
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ChartTitle.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a chart or axis title. */
public sealed class ChartTitle : IChartObject, IColorContext
{

/* Deletes the title. */
public void Delete()

/* Returns the <xref href="GemBox.Spreadsheet.Charts.ChartTitle.DisplayText" data-throw-if-not-resolved="false"></xref> value. */
public override string ToString()

/* Defines this chart title as rich text, enabling the usage of <xref href="GemBox.Spreadsheet.Charts.ChartTitle.RichText" data-throw-if-not-resolved="false"></xref>.
It is possible to use the <xref href="GemBox.Spreadsheet.Charts.ChartTitle.RichText" data-throw-if-not-resolved="false"></xref> property to set multiple formats to different parts of the title. */
public TextBox SetRichText()

/* Gets or sets the title text direction. */
public ChartTitleDirection Direction { get; set; }

/* Gets or sets a value indicating whether title overlaps chart&apos;s plot area or resizes it. */
public bool AllowOverlap { get; set; }

/* Gets or sets a value indicating whether title is visible. */
public bool IsVisible { get; set; }

/* Gets or sets the title text as direct value (for example, &apos;My chart title&apos;) or as a reference to a cell with value (for example, &apos;=Sheet1!A1&apos;). 
If set value is not <xref uid="langword_csharp_null" name="null" href=""></xref> nor <xref href="System.String.Empty" data-throw-if-not-resolved="false"></xref>, then <xref href="GemBox.Spreadsheet.Charts.ChartTitle.IsVisible" data-throw-if-not-resolved="false"></xref> is set to <xref uid="langword_csharp_true" name="true" href=""></xref>. */
public string Text { get; set; }

/* Gets the title&apos;s rich text, which can be used to partially format the title content. Set the rich text by using <xref href="GemBox.Spreadsheet.Charts.ChartTitle.SetRichText" data-throw-if-not-resolved="false"></xref>. */
public TextBox RichText { get; }

/* Gets the title display text. If <xref href="GemBox.Spreadsheet.Charts.ChartTitle.IsVisible" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_false" name="false" href=""></xref>, then <xref href="System.String.Empty" data-throw-if-not-resolved="false"></xref> is returned;
otherwise, if <xref href="GemBox.Spreadsheet.Charts.ChartTitle.Text" data-throw-if-not-resolved="false"></xref> is direct value, then <xref href="GemBox.Spreadsheet.Charts.ChartTitle.Text" data-throw-if-not-resolved="false"></xref> value is returned; 
otherwise, if <xref href="GemBox.Spreadsheet.Charts.ChartTitle.Text" data-throw-if-not-resolved="false"></xref> is a cell reference, then referenced cell value is returned;
otherwise, default title is returned. */
public string DisplayText { get; }

/* Gets or sets the fill formating options. */
public FillFormat Fill { get; set; }

/* Gets or sets the outline formating options. */
public LineFormat Outline { get; set; }

/* Gets or sets the text formatting options. */
public TextFormat TextFormat { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SpreadsheetException.yml:
namespace GemBox.Spreadsheet
{

/* Represents errors that can occur in the GemBox.Spreadsheet component. */
public class SpreadsheetException : Exception, ISerializable, _Exception
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.SpreadsheetException" data-throw-if-not-resolved="false"></xref> class. */
public SpreadsheetException()

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.SpreadsheetException" data-throw-if-not-resolved="false"></xref> class with a specified error message. */
public SpreadsheetException(string msg)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.SpreadsheetException" data-throw-if-not-resolved="false"></xref> class with a specified error message 
and a reference to the inner exception that is the cause of this exception. */
public SpreadsheetException(string msg, Exception inner)
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.IgnoredErrorTypes.yml:
namespace GemBox.Spreadsheet
{

/* Represents an ignored error conditions. */
[Flags]
public enum IgnoredErrorTypes
{

/* Do not ignore any error. */
None = 0

/* Ignore errors when cells contain formulas that result in an error such as &apos;<strong>#VALUE!</strong>&apos; or &apos;<strong>#DIV/0!</strong>&apos;. */
EvaluationError = 1

/* <p>Ignore errors when cells contain a value different from a calculated column formula for tables.</p>
<p>In other words, for a calculated column, a cell in that column is considered to have an error 
if its formula is different from the calculated column formula, or doesn&apos;t contain a formula at all.</p> */
CalculatedColumn = 2

/* Ignore errors when cells contain dates in text form with years represented as 2 digits. */
TwoDigitTextYear = 4

/* Ignore errors when numbers are formatted as text or are preceded by an apostrophe. */
NumberStoredAsText = 8

/* <p>Ignore errors when a formula in a region of your worksheet differs from other formulas in the same region.</p>
<p>For example, if the formula in cell A1 is &quot;=B1&quot;, and the formula in cell A3 is &quot;=B3&quot;, but the formula in cell 
A2 is not &quot;=B2&quot; but instead &quot;=C2&quot;, then A1 and A3 both refer to the cell one column to their right, but A2 does not and so 
is inconsistent with them.</p> */
Formula = 16

/* <p>Ignore errors when formulas omit certain cells in a region.</p>
<p>For example, if there is data in cells A1:A100 and formula contains the reference &quot;=SUM(A1:A98)&quot;.</p> */
FormulaRange = 32

/* Ignore errors when unlocked (editable) cells in the locked sheet contain formulas. */
UnlockedFormula = 64

/* Ignore errors when formulas refer to empty cells. */
EmptyCellReference = 128

/* <p>Ignore errors when a cell&apos;s value in a Table does not comply with the Data Validation rules specified.</p>
<p>For example, when a cell&apos;s value is inconsistent with the column data type for Tables connected to SharePoint data.</p> */
ListDataValidation = 256

/* Ignore all errors. */
All = 255
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ImageSaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents a class which stores saving options for image files. */
public sealed class ImageSaveOptions : SaveOptions, IBitmapSettings, IImageSettings
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.ImageSaveOptions" data-throw-if-not-resolved="false"></xref> class. */
public ImageSaveOptions()

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.ImageSaveOptions" data-throw-if-not-resolved="false"></xref> class for a specific image format. */
public ImageSaveOptions(ImageSaveFormat imageFormat)

/* Gets or sets the image format. */
public ImageSaveFormat Format { get; set; }

/* Gets or sets the zero-based page number of the document&apos;s page which should be saved to an image. */
public int PageNumber { get; set; }

/* <p>Gets or sets the number of pages which should be saved to a multi-frame image.</p>
<p>If image format doesn&apos;t support multiple frames, this property is ignored.</p>
<p>Default value is 1.</p>
<p>To save all pages, set value to <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.</p>
<p>Only Tagged Image File Format (TIFF) and Graphics Interchange Format (GIF) format images support multiple frames.</p> */
public int PageCount { get; set; }

/* Gets or sets the image width in pixels. */
public double Width { get; set; }

/* Gets or sets the image height in pixels. */
public double Height { get; set; }

/* Gets or sets a pixel format, which will be used for the image. */
public PixelFormat PixelFormat { get; set; }

/* <p>Gets or sets the value that indicated whether <a href="https://en.wikipedia.org/wiki/Dither">dithering</a> should be applied when converting to pixel formats <xref href="GemBox.Spreadsheet.PixelFormat.BlackWhite" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.PixelFormat.Gray2" data-throw-if-not-resolved="false"></xref>, and <xref href="GemBox.Spreadsheet.PixelFormat.Gray4" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value: <xref uid="langword_csharp_true" name="true" href=""></xref>.</p>
<p>This property is currently ignored when <xref href="GemBox.Spreadsheet.ImageSaveOptions.RenderingMode" data-throw-if-not-resolved="false"></xref> is resolved to <xref href="GemBox.Spreadsheet.RenderingMode.Skia" data-throw-if-not-resolved="false"></xref>.</p> */
public bool Dither { get; set; }

/* Gets or sets compression schema, which will be used when exporting to Tagged Image File Format (TIFF). */
public TiffCompression TiffCompression { get; set; }

/* Gets or sets a value indicating whether to save a page from the whole <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> or just <xref href="GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" data-throw-if-not-resolved="false"></xref>. */
public SelectionType SelectionType { get; set; }

/* <p>Gets or sets a value indicating whether the image should be cropped to fit the content of the sheet.</p>
<p>If this property is set to <xref uid="langword_csharp_true" name="true" href=""></xref>, only the content of the sheet is rendered, without headers or footers.</p> */
public bool CropToContent { get; set; }

/* Gets the extended save options that are not natively supported by spreadsheet formats. */
public ExtendedSaveOptions ExtendedOptions { get; }

/* Gets or sets the rendering mode used when saving the content to an image. */
public RenderingMode RenderingMode { get; set; }

/* <p>Gets or sets the horizontal dots per inch (dpi) of the image.</p>
<p>Default value is <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>, which means that component specific default value will be used (currently 300).</p> */
public double DpiX { get; set; }

/* <p>Gets or sets the vertical dots per inch (dpi) of the image.</p>
<p>Default value is <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>, which means that component specific default value will be used (currently 300).</p> */
public double DpiY { get; set; }

/* Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1. */
public double MetafileScaleFactor { get; set; }

/* Gets the content-type for image file format:
<ul><li><strong>image/png</strong> if <xref href="GemBox.Spreadsheet.ImageSaveOptions.Format" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.ImageSaveFormat.Png" data-throw-if-not-resolved="false"></xref>,</li><li><strong>image/jpeg</strong> if <xref href="GemBox.Spreadsheet.ImageSaveOptions.Format" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.ImageSaveFormat.Jpeg" data-throw-if-not-resolved="false"></xref>,</li><li><strong>image/gif</strong> if <xref href="GemBox.Spreadsheet.ImageSaveOptions.Format" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.ImageSaveFormat.Gif" data-throw-if-not-resolved="false"></xref>,</li><li><strong>image/bmp</strong> if <xref href="GemBox.Spreadsheet.ImageSaveOptions.Format" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.ImageSaveFormat.Bmp" data-throw-if-not-resolved="false"></xref>,</li><li><strong>image/tiff</strong> if <xref href="GemBox.Spreadsheet.ImageSaveOptions.Format" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.ImageSaveFormat.Tiff" data-throw-if-not-resolved="false"></xref>,</li><li><strong>image/vnd.ms-photo</strong> if <xref href="GemBox.Spreadsheet.ImageSaveOptions.Format" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.ImageSaveFormat.Wmp" data-throw-if-not-resolved="false"></xref>,</li><li><strong>image/svg+xml</strong> if <xref href="GemBox.Spreadsheet.ImageSaveOptions.Format" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.ImageSaveFormat.Svg" data-throw-if-not-resolved="false"></xref>.</li></ul> */
public override string ContentType { get; }

/* Gets limitations for saving to image file formats. */
public override FileFormatLimitations Limitations { get; }

/* Occurs when saving progress of a file has changed. */
public event EventHandler<OperationProgressChangedEventArgs> ProgressChanged
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FixedWidthLoadOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for loading from Fixed-Width Text file format. */
public sealed class FixedWidthLoadOptions : LoadOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.FixedWidthLoadOptions" data-throw-if-not-resolved="false"></xref> class. */
public FixedWidthLoadOptions(IEnumerable<FixedWidthColumn> columns)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.FixedWidthLoadOptions" data-throw-if-not-resolved="false"></xref> class. */
public FixedWidthLoadOptions(params FixedWidthColumn[] columns)

/* Gets or sets a value indicating whether numbers will be parsed and stored as <xref href="System.Double" data-throw-if-not-resolved="false"></xref> value when loading Fixed-Width Text file. If <xref uid="langword_csharp_false" name="false" href=""></xref>, numbers will be loaded as strings. */
public bool ParseNumbers { get; set; }

/* Gets or sets a value indicating number styles permitted in strings when parsing them to numeric types. */
public NumberStyles NumberStyles { get; set; }

/* Gets the list of column definitions for Fixed-Width Text file. */
public IList<FixedWidthColumn> Columns { get; }

/* Gets or sets the index of the first row of data being loaded from Fixed-Width Text file. */
public int StartRow { get; set; }

/* Gets or sets the format provider for the Fixed-Width Text file. */
public IFormatProvider FormatProvider { get; set; }

/* Gets or sets the encoding for the Fixed-Width Text file. */
public Encoding Encoding { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ValuesFilter.yml:
namespace GemBox.Spreadsheet
{

/* Represents a filter that filters by a list of values. */
public sealed class ValuesFilter : Filter
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ValuesFilter" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* <p>Sets the list of values to filter by.</p>
<p>The list can contain <xref uid="langword_csharp_null" name="null" href=""></xref>, <xref href="System.String" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> values.</p> */
public void SetValues(IEnumerable items)

/* <p>Sets the list of values to filter by.</p>
<p>The list can contain <xref uid="langword_csharp_null" name="null" href=""></xref>, <xref href="System.String" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> values.</p> */
public void SetValues(params object[] items)

/* Gets the <xref href="GemBox.Spreadsheet.FilterType.Values" data-throw-if-not-resolved="false"></xref> value. */
public override FilterType FilterType { get; }

/* <p>Gets the list of values to filter by.</p>
<p>The list can contain <xref uid="langword_csharp_null" name="null" href=""></xref>, <xref href="System.String" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> values.</p> */
public IList Values { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CellRange.yml:
namespace GemBox.Spreadsheet
{

/* Cell range is a rectangular group of worksheet cells. */
public class CellRange : AbstractRange, IFormattedStringProvider, IEnumerable<ExcelCell>, IEnumerable
{

/* Sets array formula (also known as CSE formula) to the range of cells. */
public void SetArrayFormula(string formula)

/* <p>Changes the range&apos;s column widths to fit the contents.</p>
<p>Use this method instead of multiple calls to <xref href="GemBox.Spreadsheet.ExcelColumn.AutoFit" data-throw-if-not-resolved="false"></xref> method if auto-fitting multiple columns.</p> */
public void AutoFitColumnWidth()

/* <p>Changes the range&apos;s row heights to fit the contents.</p>
<p>Use this method instead of multiple calls to <xref href="GemBox.Spreadsheet.ExcelRow.AutoFit" data-throw-if-not-resolved="false"></xref> method if auto-fitting multiple rows.</p> */
public void AutoFitRowHeight(bool autoFitMergedRanges = false)

/* <p>Gets the <xref href="GemBox.Spreadsheet.SortState" data-throw-if-not-resolved="false"></xref> active on the parent worksheet (<xref href="GemBox.Spreadsheet.ExcelWorksheet.Sort" data-throw-if-not-resolved="false"></xref>) if active <xref href="GemBox.Spreadsheet.SortState.Range" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref> and parameter <code data-dev-comment-type="paramref" class="paramref">active</code> is <xref uid="langword_csharp_true" name="true" href=""></xref>; otherwise, a new <xref href="GemBox.Spreadsheet.SortState" data-throw-if-not-resolved="false"></xref> instance, which is set as active on the parent worksheet if parameter <code data-dev-comment-type="paramref" class="paramref">active</code> is <xref uid="langword_csharp_true" name="true" href=""></xref>.</p>
<p><xref href="GemBox.Spreadsheet.SortState" data-throw-if-not-resolved="false"></xref> is used to store sort settings and to apply sort on this range of cells.</p> */
public SortState Sort(bool active)

/* <p>Gets the <xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> active on the parent worksheet (<xref href="GemBox.Spreadsheet.ExcelWorksheet.Filter" data-throw-if-not-resolved="false"></xref>) or Table (<xref href="GemBox.Spreadsheet.Tables.Table.Filter" data-throw-if-not-resolved="false"></xref>) if active <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref>; otherwise, a new <xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> instance, which is set as active on the parent worksheet or table.</p>
<p><xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> is used to store filter settings and to apply filter on this range of cells.</p> */
public AutoFilter Filter()

/* <p>Gets the <xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> active on the parent worksheet (<xref href="GemBox.Spreadsheet.ExcelWorksheet.Filter" data-throw-if-not-resolved="false"></xref>) or Table (<xref href="GemBox.Spreadsheet.Tables.Table.Filter" data-throw-if-not-resolved="false"></xref>) if active <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref> and parameter <code data-dev-comment-type="paramref" class="paramref">active</code> is <xref uid="langword_csharp_true" name="true" href=""></xref>; otherwise, a new <xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> instance, which is set as active on the parent worksheet or table if parameter <code data-dev-comment-type="paramref" class="paramref">active</code> is <xref uid="langword_csharp_true" name="true" href=""></xref>.</p>
<p><xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> is used to store filter settings and to apply filter on this range of cells.</p> */
public AutoFilter Filter(bool active)

/* Returns an enumerator for the <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref> (all cells). */
public IEnumerator<ExcelCell> GetEnumerator()

/* Returns enumerator for the <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref> (only allocated cells). */
public CellRangeEnumerator GetReadEnumerator()

/* Returns new cell range using absolute indexing. */
public CellRange GetSubrangeAbsolute(int firstAbsoluteRow, int firstAbsoluteColumn, int lastAbsoluteRow, int lastAbsoluteColumn)

/* Returns new cell range using relative indexing. */
public CellRange GetSubrangeRelative(int relativeRow, int relativeColumn, int width, int height)

/* Returns new cell range using start and end position. */
public CellRange GetSubrange(string firstCell, string lastCell)

/* Returns new cell range using A1 style notation. */
public CellRange GetSubrange(string reference)

/* Copies this cell range to another position in the same worksheet or in another worksheet. */
[ComVisible(true)]
public void CopyTo(string topLeftCell)

/* Copies this cell range to another position in the same worksheet or in another worksheet with specified copy options. */
[ComVisible(false)]
public void CopyTo(string topLeftCell, CopyOptions copyOptions)

/* Copies this cell range to another worksheet. */
[ComVisible(false)]
public void CopyTo(ExcelWorksheet destinationWorksheet, string topLeftCell)

/* Copies this cell range to another worksheet with specified copy options. */
[ComVisible(false)]
public void CopyTo(ExcelWorksheet destinationWorksheet, string topLeftCell, CopyOptions copyOptions)

/* Copies this cell range to another position in the same worksheet. */
[ComVisible(false)]
public void CopyTo(int absoluteRow, int absoluteColumn)

/* Copies this cell range to another position in the same worksheet with specified copy options. */
[ComVisible(false)]
public void CopyTo(int absoluteRow, int absoluteColumn, CopyOptions copyOptions)

/* Copies this cell range to another worksheet. */
[ComVisible(false)]
public void CopyTo(ExcelWorksheet destinationWorksheet, int absoluteRow, int absoluteColumn)

/* Copies this cell range to another worksheet with specified copy options. */
[ComVisible(false)]
public void CopyTo(ExcelWorksheet destinationWorksheet, int absoluteRow, int absoluteColumn, CopyOptions copyOptions)

/* Checks if this cell range overlaps with another cell range. */
public bool Overlaps(CellRange range)

/* Finds the first occurrence of the specified text in the current cell range. */
public bool FindText(string text, out int row, out int column)

/* Finds the first occurrence of the specified text in the current cell range. */
public bool FindText(string text, bool matchCase, out int row, out int column)

/* Finds the first occurrence of the specified text in the current cell range. */
public bool FindText(string text, bool matchCase, bool matchEntireCellContents, out int row, out int column)

/* Finds the first occurrence of the specified text in the current cell range. */
public bool FindText(string text, out ExcelCell cell)

/* Finds the first occurrence of the specified text in the current cell range. */
public bool FindText(string text, bool matchCase, out ExcelCell cell)

/* Finds the first occurrence of the specified text in the current cell range. */
public bool FindText(string text, bool matchCase, bool matchEntireCellContents, out ExcelCell cell)

/* Finds the first occurrence which matches the specified <xref href="System.Text.RegularExpressions.Regex" data-throw-if-not-resolved="false"></xref> in the current cell range. */
public bool FindText(Regex regex, out int row, out int column)

/* Finds the first occurrence which matches the specified <xref href="System.Text.RegularExpressions.Regex" data-throw-if-not-resolved="false"></xref> in the current cell range. */
public bool FindText(Regex regex, out ExcelCell cell)

/* Finds all occurrences which match the specified <xref href="System.Text.RegularExpressions.Regex" data-throw-if-not-resolved="false"></xref> in the current cell range. */
public IEnumerable<ExcelCell> FindAllText(string text)

/* Finds all occurrences which match the specified <xref href="System.Text.RegularExpressions.Regex" data-throw-if-not-resolved="false"></xref> in the current cell range. */
public IEnumerable<ExcelCell> FindAllText(string text, bool matchCase)

/* Finds all occurrences which match the specified <xref href="System.Text.RegularExpressions.Regex" data-throw-if-not-resolved="false"></xref> in the current cell range. */
public IEnumerable<ExcelCell> FindAllText(string text, bool matchCase, bool matchEntireCellContents)

/* Finds all occurrences which match the specified <xref href="System.Text.RegularExpressions.Regex" data-throw-if-not-resolved="false"></xref> in the current cell range. */
public IEnumerable<ExcelCell> FindAllText(Regex regex)

/* Inserts a range by shifting cells in the specified direction. */
public override void Insert(InsertShiftDirection direction)

/* Removes a range by shifting cells in the specified direction. */
public override void Remove(RemoveShiftDirection direction)

/* Calculates formula for every excel cell in this range. */
public override void Calculate()

/* Selects a worksheet region to which the cell range belongs to. */
public CellRange GetCurrentRegion()

/* Creates subtotals for the current cell range. */
public void Subtotal(int groupBy, ConsolidationFunction function, int[] totalList)

/* Creates subtotals for the current cell range. */
public void Subtotal(int groupBy, ConsolidationFunction function, int[] totalList, bool replace)

/* Creates subtotals for the current cell range. */
public void Subtotal(int groupBy, ConsolidationFunction function, int[] totalList, bool replace, bool pageBreaks)

/* Creates subtotals for the current cell range. */
public void Subtotal(int groupBy, ConsolidationFunction function, int[] totalList, bool replace, bool pageBreaks, bool summaryBelowData)

/* Converts position string (&quot;A1&quot;, &quot;BN27&quot;, etc.) to row and column index. */
public static void PositionToRowColumn(string position, out int row, out int column)

/* Converts row and column index to position string (&quot;A1&quot;, &quot;BN27&quot;, etc.). */
public static string RowColumnToPosition(int row, int column)

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref>s are equal. */
public static bool operator ==(CellRange first, CellRange second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref>s are not equal. */
public static bool operator !=(CellRange first, CellRange second)

/* Gets index of the first (topmost) row. */
public int FirstRowIndex { get; }

/* Gets index of the first (leftmost) column. */
public int FirstColumnIndex { get; }

/* Gets index of the last (bottommost) row. */
public int LastRowIndex { get; }

/* Gets index of the last (rightmost) column. */
public int LastColumnIndex { get; }

/* Gets width of this cell range, in columns. */
public int Width { get; }

/* Gets height of this cell range, in rows. */
public int Height { get; }

/* Gets name of the first (top-left) cell in this cell range. */
public string StartPosition { get; }

/* Gets name of the last (bottom-right) cell in this cell range. */
public string EndPosition { get; }

/* Returns <xref uid="langword_csharp_true" name="true" href=""></xref> is any cell in this cell range is merged; otherwise, <xref uid="langword_csharp_false" name="false" href=""></xref>. */
public bool IsAnyCellMerged { get; }

/* Gets excel cell at the specified index. */
public ExcelCell this[int contextIndex] { get; }

/* Gets excel cell at the specified relative position. */
public ExcelCell this[int relativeRow, int relativeColumn] { get; }

/* Gets excel cell with the specified full or partial name. */
public ExcelCell this[string contextName] { get; }

/* Gets or sets whether cells in this range are merged. */
public virtual bool Merged { get; set; }

/* Gets or sets cell value on one or more excel cells. */
public override object Value { get; set; }

/* Gets or sets comment */
public override ExcelComment Comment { get; set; }

/* Gets or sets hyperlink */
public override SpreadsheetHyperlink Hyperlink { get; set; }

/* Gets or sets formula string. */
public override string Formula { get; set; }

/* Gets or sets a formula string in R1C1 notation. */
public override string FormulaR1C1 { get; set; }

/* Gets indexing mode used for cell range. */
public RangeIndexingMode IndexingMode { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Top10Filter.yml:
namespace GemBox.Spreadsheet
{

/* Represents a filter that filters by a top N (percent or number of items). */
public sealed class Top10Filter : Filter
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Top10Filter" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* <p>Gets or sets a value indicating whether or not to filter by top order. A <xref uid="langword_csharp_false" name="false" href=""></xref> value filters by bottom order.</p>
<p>Default value is <xref uid="langword_csharp_true" name="true" href=""></xref>.</p> */
public bool Top { get; set; }

/* <p>Gets or sets a value indicating whether or not to filter by percent value of the column. A <xref uid="langword_csharp_false" name="false" href=""></xref> value filters by number of items.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool Percent { get; set; }

/* Gets the <xref href="GemBox.Spreadsheet.FilterType.Top10" data-throw-if-not-resolved="false"></xref> value. */
public override FilterType FilterType { get; }

/* Gets or sets the top or bottom value to use as the filter criteria. For example &quot;Filter by Top 10 Percent&quot; or &quot;Filter by Top 5 Items&quot;. */
public double Value { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PdfPermissions.yml:
namespace GemBox.Spreadsheet
{

/* Defines operations that are allowed to a user on an encrypted PDF document. */
[Flags]
public enum PdfPermissions
{

/* Disallows all operations. */
None = 0

/* Allows printing. */
Printing = 2

/* Allows high resolution printing. */
HighResolutionPrinting = 6

/* Allows changing the document. */
ChangingTheDocument = 8

/* Allows copying the content. */
ContentCopying = 16

/* Allow accessibility software to use the document contents. */
ContentAccessibilityEnabled = 32

/* If this is disabled, inserting, deleting or rotating pages, or creating bookmarks and thumbnails is prohibited. */
DocumentAssembly = 64

/* Allows adding or modifying text annotations, filling of interactive form fields (including signature fields). */
ModifyAnnotations = 128

/* Allows all operations. */
All = 254
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelRow.yml:
namespace GemBox.Spreadsheet
{

/* Excel row contains row options and cell range with row cells. */
public sealed class ExcelRow : ExcelColumnRowBase, IExcelEditor<ExcelColumnRowBaseData>, IFormatHolder<CellFormatData>
{

/* Gets the height of row in arbitrary length unit. */
public double GetHeight(LengthUnit lengthUnit)

/* Sets the height of row in arbitrary length unit. */
public void SetHeight(double value, LengthUnit lengthUnit)

/* Automatically fits row height to the minimum size required for all lines in the row cells to be visible. */
public void AutoFit()

/* Automatically fits row height to the minimum size required for all lines in the row cells to be visible. */
public void AutoFit(bool autoFitMergedRanges)

/* Gets only currently allocated cells for this row. */
public ExcelCellCollection AllocatedCells { get; }

/* Gets or sets row height. */
public int Height { get; set; }

/* Gets a value indicating whether this row height is automatically fitted. */
public bool IsAutoFitted { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.DigitalSignatureSaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents a class that stores details for signing a workbook with a digital signature. */
public abstract class DigitalSignatureSaveOptions : IDigitalId
{

/* <p>Gets or sets the X.509 certificate.</p>
<p>Value must be of type System.Security.Cryptography.X509Certificates.X509Certificate2.</p> */
public object Certificate { get; set; }

/* Gets or sets the byte array that contains data from an X.509 certificate. */
public byte[] CertificateBytes { get; set; }

/* Gets or sets the file path to the X.509 certificate. */
public string CertificatePath { get; set; }

/* Gets or sets a value indicating whether private keys are stored in the local computer store rather than the current user store. */
public bool UseMachineKeySet { get; set; }

/* Gets or sets the password required to access the X.509 certificate data. */
public string CertificatePassword { get; set; }

/* Gets or sets the reason for the signing. */
public string Reason { get; set; }

/* Gets or sets the signature. */
public ExcelDrawing Signature { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CsvLoadOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for loading from Character Separated Values file format. */
public sealed class CsvLoadOptions : LoadOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.CsvLoadOptions" data-throw-if-not-resolved="false"></xref> class. */
public CsvLoadOptions(CsvType csvType)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.CsvLoadOptions" data-throw-if-not-resolved="false"></xref> class. */
public CsvLoadOptions(char separator)

/* Gets or sets a value indicating whether values in CSV file can be quoted. Default value is <xref uid="langword_csharp_true" name="true" href=""></xref>. */
public bool HasQuotedValues { get; set; }

/* Gets or sets a value indicating the text is formula if it starts with &apos;=&apos;. Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>. */
public bool HasFormulas { get; set; }

/* Gets or sets a value indicating whether a new line character can be inside quotes. Default value is <xref uid="langword_csharp_true" name="true" href=""></xref>. */
public bool AllowNewLineInQuotes { get; set; }

/* Gets or sets a value indicating whether numbers will be parsed and stored as <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values when loading CSV file. If <xref uid="langword_csharp_false" name="false" href=""></xref>, numbers will be loaded as strings. Default value is <xref uid="langword_csharp_true" name="true" href=""></xref>. */
public bool ParseNumbers { get; set; }

/* Gets or sets a value indicating number styles permitted in strings when parsing them to numeric types. */
public NumberStyles NumberStyles { get; set; }

/* <p>Gets or sets the streaming mode that allows streamlined reading of <xref href="GemBox.Spreadsheet.ExcelRow" data-throw-if-not-resolved="false"></xref>s of each <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> of a loaded <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value: <xref href="GemBox.Spreadsheet.LoadStreamingMode.None" data-throw-if-not-resolved="false"></xref>.</p> */
public LoadStreamingMode StreamingMode { get; set; }

/* Gets or sets a value indicating whether dates will be parsed and stored as <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> values when loading a CSV file. 
If <xref uid="langword_csharp_false" name="false" href=""></xref>, numbers will be loaded as strings. 
Default value is <xref uid="langword_csharp_true" name="true" href=""></xref>. */
public bool ParseDates { get; set; }

/* Gets or sets a value indicating DateTime styles permitted in strings when parsing them to DateTimes. Default value is <xref href="System.Globalization.DateTimeStyles.None" data-throw-if-not-resolved="false"></xref>. */
public DateTimeStyles DateTimeStyles { get; set; }

/* Gets or sets an list of formats to be used when parsing cell values to <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> (provided that <xref href="GemBox.Spreadsheet.CsvLoadOptions.ParseDates" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>). */
public IList<string> DateTimeFormats { get; set; }

/* Gets or sets character that serves as value delimiter. */
public char Separator { get; set; }

/* Gets or sets value delimiter type, see <xref href="GemBox.Spreadsheet.CsvType" data-throw-if-not-resolved="false"></xref>. */
public CsvType? Type { get; set; }

/* Gets or sets the format provider for the CSV file. */
public IFormatProvider ParseFormatProvider { get; set; }

/* Gets or sets the encoding for the CSV file. */
public Encoding Encoding { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ExcelChartCollection.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a collection of <xref href="GemBox.Spreadsheet.Charts.ExcelChart" data-throw-if-not-resolved="false"></xref>s in the worksheet. */
public sealed class ExcelChartCollection : ExcelDrawingCollection<ExcelChart>, IList<ExcelChart>, ICollection<ExcelChart>, IEnumerable<ExcelChart>, IExcelChartCollection, IExcelDrawingCollection, IEnumerable
{

/* Adds a new chart to the worksheet which doesn&apos;t move nor sizes with cells. */
public ExcelChart Add(ChartType chartType, double left, double top, double width, double height, LengthUnit unit)

/* Adds a new chart to the worksheet which doesn&apos;t move nor sizes with cells. */
public ExcelChart Add(ChartType chartType, ChartGrouping chartGrouping, double left, double top, double width, double height, LengthUnit unit)

/* Adds a new chart to the worksheet which doesn&apos;t move nor sizes with cells. */
public T Add<T>(double left, double top, double width, double height, LengthUnit unit)
    where T : ExcelChart

/* Adds a new chart to the worksheet which doesn&apos;t move nor sizes with cells. */
public T Add<T>(ChartGrouping chartGrouping, double left, double top, double width, double height, LengthUnit unit)
    where T : ExcelChart

/* Adds a new chart to the worksheet which moves but doesn&apos;t size with cells. */
public ExcelChart Add(ChartType chartType, AnchorCell positionFrom, double width, double height, LengthUnit unit)

/* Adds a new chart to the worksheet which moves but doesn&apos;t size with cells. */
public ExcelChart Add(ChartType chartType, ChartGrouping chartGrouping, AnchorCell positionFrom, double width, double height, LengthUnit unit)

/* Adds a new chart to the worksheet which moves but doesn&apos;t size with cells. */
public T Add<T>(AnchorCell positionFrom, double width, double height, LengthUnit unit)
    where T : ExcelChart

/* Adds a new chart to the worksheet which moves but doesn&apos;t size with cells. */
public T Add<T>(ChartGrouping chartGrouping, AnchorCell positionFrom, double width, double height, LengthUnit unit)
    where T : ExcelChart

/* Adds a new chart to the worksheet which moves but doesn&apos;t size with cells. */
public ExcelChart Add(ChartType chartType, string positionFromCell, double width, double height, LengthUnit unit)

/* Adds a new chart to the worksheet which moves but doesn&apos;t size with cells. */
public ExcelChart Add(ChartType chartType, ChartGrouping chartGrouping, string positionFromCell, double width, double height, LengthUnit unit)

/* Adds a new chart to the worksheet which moves but doesn&apos;t size with cells. */
public T Add<T>(string positionFromCell, double width, double height, LengthUnit unit)
    where T : ExcelChart

/* Adds a new chart to the worksheet which moves but doesn&apos;t size with cells. */
public T Add<T>(ChartGrouping chartGrouping, string positionFromCell, double width, double height, LengthUnit unit)
    where T : ExcelChart

/* Adds a new chart to the worksheet which moves and sizes with cells. */
public ExcelChart Add(ChartType chartType, AnchorCell positionFrom, AnchorCell positionTo)

/* Adds a new chart to the worksheet which moves and sizes with cells. */
public ExcelChart Add(ChartType chartType, ChartGrouping chartGrouping, AnchorCell positionFrom, AnchorCell positionTo)

/* Adds a new chart to the worksheet which moves and sizes with cells. */
public T Add<T>(AnchorCell positionFrom, AnchorCell positionTo)
    where T : ExcelChart

/* Adds a new chart to the worksheet which moves and sizes with cells. */
public T Add<T>(ChartGrouping chartGrouping, AnchorCell positionFrom, AnchorCell positionTo)
    where T : ExcelChart

/* Adds a new chart to the worksheet which moves and sizes with cells. */
public ExcelChart Add(ChartType chartType, string positionFromCell, string positionToCell)

/* Adds a new chart to the worksheet which moves and sizes with cells. */
public ExcelChart Add(ChartType chartType, ChartGrouping chartGrouping, string positionFromCell, string positionToCell)

/* Adds a new chart to the worksheet which moves and sizes with cells. */
public T Add<T>(string positionFromCell, string positionToCell)
    where T : ExcelChart

/* Adds a new chart to the worksheet which moves and sizes with cells. */
public T Add<T>(ChartGrouping chartGrouping, string positionFromCell, string positionToCell)
    where T : ExcelChart

/* Gets the chart at the specified index and casts it to the specified chart subtype deriving from <xref href="GemBox.Spreadsheet.Charts.ExcelChart" data-throw-if-not-resolved="false"></xref>. */
public T Get<T>(int index)
    where T : ExcelChart
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.ComboBox.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a Combo Box Form Control. */
public class ComboBox : ExcelFormControl, IDocumentPaginatorSource
{

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.FormControlType.ComboBox" data-throw-if-not-resolved="false"></xref> value. */
public override FormControlType FormControlType { get; }

/* Gets or sets a CellRange which is used as the input range for this combo box. */
public CellRange InputRange { get; set; }

/* Gets or sets the cell which holds the value of this combo box. */
public ExcelCell CellLink { get; set; }

/* Gets or sets the value that specifies the maximum number of lines in the dropdown before scrollbars are added. */
public int DropDownLines { get; set; }

/* Gets the selected value in the combo box. */
public object SelectedValue { get; }

/* Gets or sets the index of the selected item in the combo box. */
public int SelectedIndex { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextSpacing.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents inter-paragraph and inter-line spacing specified either in percentages of the text size or as an absolute value. */
public struct TextSpacing : IEquatable<TextSpacing>
{

/* Text spacing is absent (zero). */
public static readonly TextSpacing None

/* Text spacing that is equivalent to 100% of the text size. */
public static readonly TextSpacing Single

/* Text spacing that is equivalent to 150% of the text size. */
public static readonly TextSpacing OnePointFiveLines

/* Text spacing that is equivalent to 200% of the text size. */
public static readonly TextSpacing Double

/* Creates a text spacing instance from the specified absolute value. */
public static TextSpacing Exactly(Length value)

/* <p>Creates a text spacing instance from the specified percentage value.</p>
<p>
If <code data-dev-comment-type="paramref" class="paramref">percent</code> parameter is equal to 1, then returned text spacing is equal to <xref href="GemBox.Spreadsheet.Drawing.TextSpacing.Single" data-throw-if-not-resolved="false"></xref>.
If <code data-dev-comment-type="paramref" class="paramref">percent</code> parameter is equal to 1.5, then returned text spacing is equal to <xref href="GemBox.Spreadsheet.Drawing.TextSpacing.OnePointFiveLines" data-throw-if-not-resolved="false"></xref>.
If <code data-dev-comment-type="paramref" class="paramref">percent</code> parameter is equal to 2, then returned text spacing is equal to <xref href="GemBox.Spreadsheet.Drawing.TextSpacing.Double" data-throw-if-not-resolved="false"></xref>.
</p> */
public static TextSpacing Multiple(double percent)

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Drawing.TextSpacing" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Determines whether the <code data-dev-comment-type="paramref" class="paramref">other</code> <xref href="GemBox.Spreadsheet.Drawing.TextSpacing" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.Drawing.TextSpacing" data-throw-if-not-resolved="false"></xref> instance. */
public bool Equals(TextSpacing other)

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.Drawing.TextSpacing" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.Drawing.TextSpacing" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.Drawing.TextSpacing" data-throw-if-not-resolved="false"></xref>s are equal. */
public static bool operator ==(TextSpacing first, TextSpacing second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.Drawing.TextSpacing" data-throw-if-not-resolved="false"></xref>s are not equal. */
public static bool operator !=(TextSpacing first, TextSpacing second)

/* Gets the text spacing value. */
public Length Value { get; }

/* Gets the text spacing percentage. */
public double Percent { get; }

/* Gets a value indicating whether this text spacing is specified in percentages. */
public bool IsPercent { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.PictureCompressionType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Specifies the amount of compression that has been used
for a particular binary large image or picture (blip). */
public enum PictureCompressionType
{

/* No compression was used. */
None = 0

/* Compression size suitable for inclusion with email. */
Email = 1

/* Compression size suitable for high quality printing. */
HighQualityPrint = 2

/* Compression size suitable for printing. */
Print = 3

/* Compression size suitable for viewing on screen. */
Screen = 4
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ScatterChartSeriesCollection.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a collection of <xref href="GemBox.Spreadsheet.Charts.ScatterChartSeries" data-throw-if-not-resolved="false"></xref> objects. */
public sealed class ScatterChartSeriesCollection : ChartSeriesCollection<ScatterChartSeries>, IList, ICollection, IChartObject, IList<ScatterChartSeries>, ICollection<ScatterChartSeries>, IEnumerable<ScatterChartSeries>, IEnumerable
{
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PaperType.yml:
namespace GemBox.Spreadsheet
{

/* Specifies the paper type. */
public enum PaperType
{

/* Custom paper type. */
Custom = 0

/* Letter (8.5 inch X 11 inch). */
Letter = 1

/* Legal (8.5 inch X 14 inch). */
Legal = 5

/* Executive (7.25 inch X 10.5 inch). */
Executive = 7

/* A3 (11.69 inch X 16.54 inch). */
A3 = 8

/* A4 (8.27 inch X 11.69 inch). */
A4 = 9

/* A5 (5.83 inch X 8.27 inch). */
A5 = 11

/* B4 (JIS, 10.12 inch X 14.33 inch). */
B4 = 12

/* 11x17 (11 inch X 17 inch). */
Paper11x17 = 17

/* Envelope DL (4.33 inch X 8.66 inch). */
EnvelopeDL = 27

/* Envelope C5 (6.38 inch X 9.02 inch). */
EnvelopeC5 = 28

/* B5 (ISO, 6.93 inch X 9.84 inch). */
B5 = 34

/* A2 (16.54 inch X 23.39 inch). */
A2 = 66

/* A6 (4.13 inch X 5.83 inch). */
A6 = 70
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PositioningMode.yml:
namespace GemBox.Spreadsheet
{

/* Option that specify the moving and sizing behavior of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.) in the worksheet. */
public enum PositioningMode
{

/* <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.) will not move nor size with cells. */
FreeFloating = 0

/* <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.) will move but not size with cells. */
Move = 1

/* <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.) will move and size with cells. */
MoveAndSize = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SortLevel.yml:
namespace GemBox.Spreadsheet
{

/* Represents sort settings for a single sort level. */
public sealed class SortLevel : IFormatHolder<CellFormatData>
{

/* <p>Sets the custom list by which order of items to sort by.</p> */
public void SetCustomList(IEnumerable<string> items)

/* <p>Sets the custom list by which order of items to sort by.</p> */
public void SetCustomList(params string[] items)

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* <p>Gets or sets a value indicating whether to sort the values in the descending order.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool Descending { get; set; }

/* <p>Gets or sets the column (or the row, if <xref href="GemBox.Spreadsheet.SortState.LeftToRight" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>) index relative to the <xref href="GemBox.Spreadsheet.SortState.Range" data-throw-if-not-resolved="false"></xref> that this sort level applies to.</p>
<p>Value is equal to or greater than zero and less than <xref href="GemBox.Spreadsheet.CellRange.Width" data-throw-if-not-resolved="false"></xref> (or <xref href="GemBox.Spreadsheet.CellRange.Height" data-throw-if-not-resolved="false"></xref>, if <xref href="GemBox.Spreadsheet.SortState.LeftToRight" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>) of the <xref href="GemBox.Spreadsheet.SortState.Range" data-throw-if-not-resolved="false"></xref>.</p> */
public int ColumnRowIndex { get; set; }

/* <p>Gets the custom list by which order of items to sort by.</p>
<p>If <xref href="GemBox.Spreadsheet.SortLevel.Descending" data-throw-if-not-resolved="false"></xref> is set to <xref uid="langword_csharp_true" name="true" href=""></xref>, then sorting will be performed based on the reverse order of items.</p> */
public IList<string> CustomList { get; }

/* <p>Gets or sets the comparison method that compares two <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref>s.</p>
<p>Default value is default comparison method based on the settings of this sort level.</p> */
public Comparison<ExcelCell> Comparison { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Security.Certificate.yml:
namespace GemBox.Spreadsheet.Security
{

/* Represents an <a href="https://tools.ietf.org/html/rfc5280#section-4">X.509 certificate</a> sent to others so that they can verify your digital signature with a public key contained in the certificate. */
public class Certificate : IDigitalId
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.Security.Certificate" data-throw-if-not-resolved="false"></xref> class from a file with the specified file name. */
public Certificate(string fileName)

/* <p>Initializes a new instance of the <xref href="GemBox.Spreadsheet.Security.Certificate" data-throw-if-not-resolved="false"></xref> class from the specified source.</p>
<p>The certificate source is an instance of a <xref href="System.Security.Cryptography.X509Certificates.X509Certificate2" data-throw-if-not-resolved="false"></xref>.</p> */
public Certificate(object source)

/* Gets the copy of raw data of a <xref href="GemBox.Spreadsheet.Security.Certificate" data-throw-if-not-resolved="false"></xref>. */
public byte[] GetRawData()

/* Determines whether the specified <xref href="GemBox.Spreadsheet.Security.Certificate" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.Security.Certificate" data-throw-if-not-resolved="false"></xref> instance. */
public bool Equals(Certificate other)

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.Security.Certificate" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.Security.Certificate" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Security.Certificate" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the subject distinguished name from the certificate. */
public string Subject { get; }

/* Gets the value of a <strong>Common Name</strong> attribute from <xref href="GemBox.Spreadsheet.Security.Certificate.Subject" data-throw-if-not-resolved="false"></xref>&apos;s distinguished name. */
public string SubjectCommonName { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.AbstractRange.yml:
namespace GemBox.Spreadsheet
{

/* Base class for classes representing one or more excel cells. */
public abstract class AbstractRange : IFormattedStringProvider
{

/* Calculates formula for one or more excel cells. */
public abstract void Calculate()

/* Inserts a range by shifting cells in the specified direction. */
public abstract void Insert(InsertShiftDirection direction)

/* Removes a range by shifting cells in the specified direction. */
public abstract void Remove(RemoveShiftDirection direction)

/* Returns a <xref href="GemBox.Spreadsheet.FormattedCharacterRange" data-throw-if-not-resolved="false"></xref> object that represents a range of characters within the cell text.
The range starts at a specified character position. */
public FormattedCharacterRange GetCharacters(int startIndex)

/* Returns a <xref href="GemBox.Spreadsheet.FormattedCharacterRange" data-throw-if-not-resolved="false"></xref> object that represents a range of characters within the cell text.
The range starts at a specified character position and has a specified length. */
public FormattedCharacterRange GetCharacters(int startIndex, int length)

/* Replaces all occurrences of the specified text with another text in the current <xref href="GemBox.Spreadsheet.AbstractRange" data-throw-if-not-resolved="false"></xref>. */
public bool ReplaceText(string oldValue, string newValue)

/* Replaces all occurrences of the specified text with another text in the current <xref href="GemBox.Spreadsheet.AbstractRange" data-throw-if-not-resolved="false"></xref>. */
public bool ReplaceText(string oldValue, string newValue, bool matchCase)

/* Replaces all occurrences of the specified text with another text in the current <xref href="GemBox.Spreadsheet.AbstractRange" data-throw-if-not-resolved="false"></xref>. */
public bool ReplaceText(string oldValue, string newValue, bool matchCase, bool matchEntireCellContents)

/* Replaces all matches of the specified <xref href="System.Text.RegularExpressions.Regex" data-throw-if-not-resolved="false"></xref> with specified text in the current <xref href="GemBox.Spreadsheet.AbstractRange" data-throw-if-not-resolved="false"></xref>. */
public bool ReplaceText(Regex regex, string replacement)

/* Clears the range (content, formatting, comment, hyperlink or all). */
public void Clear(ClearOptions options)

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.AbstractRange" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the name of <xref href="GemBox.Spreadsheet.AbstractRange" data-throw-if-not-resolved="false"></xref> instance. */
public string Name { get; }

/* Gets or sets comment. */
public abstract ExcelComment Comment { get; set; }

/* Gets or sets hyperlink. */
public abstract SpreadsheetHyperlink Hyperlink { get; set; }

/* Gets or sets formula string. */
public abstract string Formula { get; set; }

/* Gets or sets a formula string in R1C1 notation. */
public abstract string FormulaR1C1 { get; set; }

/* Gets or sets cell value on one or more excel cells. */
public abstract object Value { get; set; }

/* Gets or sets the cell formatting of one or more cells. */
public CellStyle Style { get; set; }

/* Returns all <xref href="GemBox.Spreadsheet.FormattedCharacterRange" data-throw-if-not-resolved="false"></xref> objects that represents a range of characters within the cell text. */
public IEnumerable<FormattedCharacterRange> CharacterRanges { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationError.yml:
namespace GemBox.Spreadsheet.CalculationEngine
{

/* Spreadsheet calculation error type enumeration. */
public enum SpreadsheetCalculationError
{

/* Divide by zero error. */
DivideByZero = 0

/* Undefined function or identifier. */
Name = 1

/* Value cannot be converted to number or number is out of defined range. */
Number = 2

/* Incompatible argument type error. */
Value = 3

/* Cell reference evaluation error. */
Reference = 4

/* Null value error. */
Null = 5

/* Designated value is not available. */
NotAvailable = 6

/* Spill range is not blank. */
Spill = 7

/* Error on calculation or invalid parameter passed to function. */
Calc = 8
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.UniqueOrDuplicateCondition.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a condition that formats only cells with unique or duplicate values. */
public sealed class UniqueOrDuplicateCondition : FormatCondition, IFormatHolder<CellFormatData>
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.UniqueOrDuplicateCondition" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* <p>Gets or sets a value indicating whether to format cells with duplicate values.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref> (formats cells with unique values).</p> */
public bool Duplicate { get; set; }

/* Gets the <xref href="GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.UniqueOrDuplicate" data-throw-if-not-resolved="false"></xref> value. */
public override FormatConditionType ConditionType { get; }

/* Gets the actual formatting which will be applied to a cell if its value satisfies this <xref href="GemBox.Spreadsheet.ConditionalFormatting.UniqueOrDuplicateCondition" data-throw-if-not-resolved="false"></xref>. */
public CellStyle Style { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.HtmlSaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for saving to HyperText Markup Language File (HTML) format. */
public sealed class HtmlSaveOptions : SaveOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.HtmlSaveOptions" data-throw-if-not-resolved="false"></xref> class. */
public HtmlSaveOptions()

/* Gets or sets a value indicating whether to save the whole <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> or just <xref href="GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" data-throw-if-not-resolved="false"></xref>. */
public SelectionType SelectionType { get; set; }

/* Gets or sets the relative directory that will be used when referencing <xref href="GemBox.Spreadsheet.ExcelPicture" data-throw-if-not-resolved="false"></xref>s and <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>s files in the HTML. */
public string FilesDirectorySrcPath { get; set; }

/* Gets or sets the physical directory where <xref href="GemBox.Spreadsheet.ExcelPicture" data-throw-if-not-resolved="false"></xref>s and <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>s files will be saved. */
public string FilesDirectoryPath { get; set; }

/* Gets or sets the type of export. */
public HtmlType HtmlType { get; set; }

/* Gets or sets a value indicating whether each td HTML element should contain data-cell attribute with cell address for this cell. */
public bool WriteCellAddress { get; set; }

/* Gets or sets a value indicating whether images are embedded directly within the HTML file in form of Base64 encoding. */
public bool EmbedImages { get; set; }

/* Gets the content-type for HTML file format:
<ul><li><strong>message/rfc822</strong> if <xref href="GemBox.Spreadsheet.HtmlSaveOptions.HtmlType" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.HtmlType.Mhtml" data-throw-if-not-resolved="false"></xref>, otherwise</li><li><strong>&quot;text/html; charset=&quot; + <xref href="GemBox.Spreadsheet.HtmlSaveOptions.Encoding" data-throw-if-not-resolved="false"></xref>.<xref href="System.Text.Encoding.WebName" data-throw-if-not-resolved="false"></xref></strong>.</li></ul> */
public override string ContentType { get; }

/* Gets or sets the encoding for the Html file. */
public Encoding Encoding { get; set; }

/* Gets limitations for saving to HTML file format. */
public override FileFormatLimitations Limitations { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a base class for a collections of <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject" data-throw-if-not-resolved="false"></xref>s used in conditional formatting. */
public abstract class ConditionalObjectCollection : IEnumerable
{

/* Returns an enumerator that iterates through the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection" data-throw-if-not-resolved="false"></xref>. */
public IEnumerator<ConditionalObject> GetEnumerator()

/* Gets the number of conditional objects contained in the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection" data-throw-if-not-resolved="false"></xref>. */
public int Count { get; }

/* Gets the conditional object at the specified index. */
public ConditionalObject this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ComboChart.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a chart that combines different chart types in a single chart. */
public sealed class ComboChart : ExcelChart, IDocumentPaginatorSource, IChartTitleParent, IChartObject, IChartDataLabelsDataProvider, IColorContext, IExcelChartCollection, IExcelDrawingCollection, IEnumerable<ExcelChart>, IEnumerable
{

/* Determines whether the <xref href="GemBox.Spreadsheet.Charts.ComboChart" data-throw-if-not-resolved="false"></xref> contains the specified child chart. */
public bool Contains(ExcelChart item)

/* Determines the index of the specified child chart. */
public int IndexOf(ExcelChart item)

/* Adds a new child chart to <xref href="GemBox.Spreadsheet.Charts.ComboChart" data-throw-if-not-resolved="false"></xref>. */
public ExcelChart Add(ChartType chartType)

/* Adds a new child chart to <xref href="GemBox.Spreadsheet.Charts.ComboChart" data-throw-if-not-resolved="false"></xref>. */
public ExcelChart Add(ChartType chartType, ChartGrouping chartGrouping)

/* Adds a new child chart to <xref href="GemBox.Spreadsheet.Charts.ComboChart" data-throw-if-not-resolved="false"></xref>. */
public T Add<T>()
    where T : ExcelChart

/* Adds a new child chart to <xref href="GemBox.Spreadsheet.Charts.ComboChart" data-throw-if-not-resolved="false"></xref>. */
public T Add<T>(ChartGrouping chartGrouping)
    where T : ExcelChart

/* Removes the specified child chart from the <xref href="GemBox.Spreadsheet.Charts.ComboChart" data-throw-if-not-resolved="false"></xref>. */
public bool Remove(ExcelChart item)

/* Removes the child chart at the specified index. */
public void RemoveAt(int index)

/* Returns an enumerator that iterates through child charts. */
public IEnumerator<ExcelChart> GetEnumerator()

/* Gets the chart type for <xref href="GemBox.Spreadsheet.Charts.ComboChart" data-throw-if-not-resolved="false"></xref> which is <xref href="GemBox.Spreadsheet.Charts.ChartType.Combo" data-throw-if-not-resolved="false"></xref>. */
public override ChartType ChartType { get; }

/* Gets the number of child charts contained in the <xref href="GemBox.Spreadsheet.Charts.ComboChart" data-throw-if-not-resolved="false"></xref>. */
public int Count { get; }

/* Gets the child chart at the specified index. */
public ExcelChart this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextParagraphCollection.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a collection of <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>s. */
public class TextParagraphCollection : IEnumerable<TextParagraph>, IEnumerable
{

/* Returns an enumerator that iterates through the <xref href="GemBox.Spreadsheet.Drawing.TextParagraphCollection" data-throw-if-not-resolved="false"></xref>. */
public IEnumerator<TextParagraph> GetEnumerator()

/* Adds a new paragraph to the text box. */
public TextParagraph Add()

/* Removes the first occurrence of a specific <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref> from the collection. */
public bool Remove(TextParagraph item)

/* Removes the <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref> at the specified index of the collection. */
public void RemoveAt(int index)

/* Determines whether a <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref> is in the collection. */
public bool Contains(TextParagraph item)

/* Searches for the specified <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref> and returns the zero-based index of the first occurrence within the entire collection. */
public int IndexOf(TextParagraph item)

/* Removes all <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>s from the collection. */
public void Clear()

/* Gets  the <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref> at the specified index. */
public TextParagraph this[int index] { get; }

/* Gets the number of <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>s contained in the collection. */
public int Count { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Style.yml:
namespace GemBox.Spreadsheet
{

/* Represents a workbook (master) style which can be shared by multiple cells. */
public sealed class Style : CellStyle, IFormatHolder<CellFormatData>
{

/* Gets or sets a value indicating whether this style is hidden in the application UI. */
public bool Hidden { get; set; }

/* Gets or sets a value indicating whether the number formatting specified for this style will be used when this style is applied to a cell. */
public bool IncludeNumber { get; set; }

/* Gets or sets a value indicating whether the alignment formatting specified for this style will be used when this style is applied to a cell. */
public bool IncludeAlignment { get; set; }

/* Gets or sets a value indicating whether the font formatting specified for this style will be used when this style is applied to a cell. */
public bool IncludeFont { get; set; }

/* Gets or sets a value indicating whether the border formatting specified for this style will be used when this style is applied to a cell. */
public bool IncludeBorder { get; set; }

/* Gets or sets a value indicating whether the fill formatting specified for this style will be used when this style is applied to a cell. */
public bool IncludeFill { get; set; }

/* Gets or sets a value indicating whether the protection formatting specified for this style will be used when this style is applied to a cell. */
public bool IncludeProtection { get; set; }

/* Gets or sets the language for this style. */
public CultureInfo Language { get; set; }

/* Gets or sets the name of this style. */
public string Name { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.DataPointCollection.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a collection of chart series data points. */
public sealed class DataPointCollection : IEnumerable<DataPoint>, IEnumerable, IChartObject
{

/* Returns an enumerator that iterates through data points. */
public IEnumerator<DataPoint> GetEnumerator()

/* Gets the data point at the specified index. */
public DataPoint this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.WinFormsUtilities.yml:
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection-1.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a base class for a collections of <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject" data-throw-if-not-resolved="false"></xref>-derived instances used in conditional formatting. */
public abstract class ConditionalObjectCollection<T> : ConditionalObjectCollection, IEnumerable<T>, IEnumerable where T : ConditionalObject
{

/* Returns an enumerator that iterates through the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection%601" data-throw-if-not-resolved="false"></xref>. */
public IEnumerator<T> GetEnumerator()

/* Gets the number of conditional objects contained in the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalObjectCollection%601" data-throw-if-not-resolved="false"></xref>. */
public int Count { get; }

/* Gets the conditional object at the specified index. */
public T this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.IgnoredErrorCollection.yml:
namespace GemBox.Spreadsheet
{

/* Represents a collection of an ignored errors in the worksheet. */
public sealed class IgnoredErrorCollection : IEnumerable<IgnoredError>, IEnumerable
{

/* Adds a new instance of an <xref href="GemBox.Spreadsheet.IgnoredError" data-throw-if-not-resolved="false"></xref> which instructs application to ignore all errors specified in the <code data-dev-comment-type="paramref" class="paramref">errorTypes</code> parameter on the sequence of references to cell ranges specified in the <code data-dev-comment-type="paramref" class="paramref">appliesTo</code> parameter. */
public IgnoredError Add(string appliesTo, IgnoredErrorTypes errorTypes)

/* Removes the specified <xref href="GemBox.Spreadsheet.IgnoredError" data-throw-if-not-resolved="false"></xref> from the <xref href="GemBox.Spreadsheet.IgnoredErrorCollection" data-throw-if-not-resolved="false"></xref>. */
public bool Remove(IgnoredError ignoredError)

/* Removes the <xref href="GemBox.Spreadsheet.IgnoredError" data-throw-if-not-resolved="false"></xref> at the specified index of the <xref href="GemBox.Spreadsheet.IgnoredErrorCollection" data-throw-if-not-resolved="false"></xref>. */
public void RemoveAt(int index)

/* Removes all <xref href="GemBox.Spreadsheet.IgnoredError" data-throw-if-not-resolved="false"></xref>s from the <xref href="GemBox.Spreadsheet.IgnoredErrorCollection" data-throw-if-not-resolved="false"></xref>. */
public void Clear()

/* Returns an enumerator that iterates through the <xref href="GemBox.Spreadsheet.IgnoredErrorCollection" data-throw-if-not-resolved="false"></xref>. */
public IEnumerator<IgnoredError> GetEnumerator()

/* Gets the number of <xref href="GemBox.Spreadsheet.IgnoredError" data-throw-if-not-resolved="false"></xref>s contained in the <xref href="GemBox.Spreadsheet.IgnoredErrorCollection" data-throw-if-not-resolved="false"></xref>. */
public int Count { get; }

/* Gets the <xref href="GemBox.Spreadsheet.IgnoredError" data-throw-if-not-resolved="false"></xref> at the specified index. */
public IgnoredError this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* <p>Represents a collection of a conditional formatting rules.</p>
<p>Rules are applied in the order they appear in the collection (first rule has highest priority and last rule has lowest priority).</p>
<p>Newly added rules are inserted at the beginning of the collection so they are first applied.</p> */
public sealed class ConditionalFormatRuleCollection : IEnumerable<ConditionalFormatRule>, IEnumerable
{

/* Adds a &apos;<strong>2-Color Scale</strong>&apos; conditional formatting rule applied to a specified sequence of references to cell ranges. */
public ColorScaleCondition Add2ColorScale(string appliesTo)

/* Adds a &apos;<strong>3-Color Scale</strong>&apos; conditional formatting rule applied to a specified sequence of references to cell ranges. */
public ColorScaleCondition Add3ColorScale(string appliesTo)

/* Adds a &apos;<strong>Data Bar</strong>&apos; conditional formatting rule applied to a specified sequence of references to cell ranges. */
public DataBarCondition AddDataBar(string appliesTo)

/* Adds an &apos;<strong>Icon Set</strong>&apos; conditional formatting rule applied to a specified sequence of references to cell ranges. */
public IconSetCondition AddIconSet(string appliesTo)

/* Adds a &apos;<strong>Cells with Cell Value</strong>&apos; conditional formatting rule applied to a specified sequence of references to cell ranges. */
public ContainValueCondition AddContainValue(string appliesTo, ContainValueOperator operator, object value)

/* Adds a &apos;<strong>Cells with Cell Value</strong>&apos; conditional formatting rule applied to a specified sequence of references to cell ranges. */
public ContainValueCondition AddContainValue(string appliesTo, ContainValueOperator operator, object value, object value2)

/* Adds a &apos;<strong>Cells with Specific Text</strong>&apos; conditional formatting rule applied to a specified sequence of references to cell ranges. */
public ContainTextCondition AddContainText(string appliesTo, ContainTextOperator operator, string value)

/* Adds a &apos;<strong>Cells with Dates Occurring</strong>&apos; conditional formatting rule applied to a specified sequence of references to cell ranges. */
public ContainDateCondition AddContainDate(string appliesTo, ContainDateOperator operator)

/* Adds a &apos;<strong>Cells with Blanks</strong>&apos; or &apos;<strong>Cells with No Blanks</strong>&apos; or &apos;<strong>Cells with Errors</strong>&apos; or &apos;<strong>Cells with No Errors</strong>&apos; conditional formatting rule applied to a specified sequence of references to cell ranges. */
public ContainCondition AddContain(string appliesTo, ContainConditionType containConditionType)

/* Adds a &apos;<strong>Top or Bottom Ranked</strong>&apos; conditional formatting rule applied to a specified sequence of references to cell ranges. */
public TopOrBottomRankedCondition AddTopOrBottomRanked(string appliesTo, bool bottom, int rank)

/* Adds an &apos;<strong>Above or Below Average</strong>&apos; conditional formatting rule applied to a specified sequence of references to cell ranges. */
public AboveOrBelowAverageCondition AddAboveOrBelowAverage(string appliesTo, bool below)

/* Adds a &apos;<strong>Unique or Duplicate</strong>&apos; conditional formatting rule applied to a specified sequence of references to cell ranges. */
public UniqueOrDuplicateCondition AddUniqueOrDuplicate(string appliesTo, bool duplicate)

/* Adds a &apos;<strong>Formula</strong>&apos; conditional formatting rule applied to a specified sequence of references to cell ranges. */
public FormulaCondition AddFormula(string appliesTo, string formula)

/* Removes the specified <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule" data-throw-if-not-resolved="false"></xref> from the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection" data-throw-if-not-resolved="false"></xref>. */
public bool Remove(ConditionalFormatRule rule)

/* Removes a <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule" data-throw-if-not-resolved="false"></xref> associated with the specified <xref href="GemBox.Spreadsheet.ConditionalFormatting.FormatCondition" data-throw-if-not-resolved="false"></xref> from the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection" data-throw-if-not-resolved="false"></xref>. */
public bool Remove(FormatCondition condition)

/* Removes the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule" data-throw-if-not-resolved="false"></xref> at the specified index of the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection" data-throw-if-not-resolved="false"></xref>. */
public void RemoveAt(int index)

/* Moves the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule" data-throw-if-not-resolved="false"></xref> at the specified index to a new location in the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection" data-throw-if-not-resolved="false"></xref>. */
public void Move(int oldIndex, int newIndex)

/* Returns an enumerator that iterates through the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection" data-throw-if-not-resolved="false"></xref>. */
public IEnumerator<ConditionalFormatRule> GetEnumerator()

/* Calculates conditional formatting for all rules in this collection. */
public void Calculate()

/* Removes all elements from the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection" data-throw-if-not-resolved="false"></xref>. */
public void Clear()

/* Gets the number of <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule" data-throw-if-not-resolved="false"></xref>s contained in the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRuleCollection" data-throw-if-not-resolved="false"></xref>. */
public int Count { get; }

/* Gets the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule" data-throw-if-not-resolved="false"></xref> at the specified index. */
public ConditionalFormatRule this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Tables.BuiltInTableStyleName.yml:
namespace GemBox.Spreadsheet.Tables
{

/* Represents a <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> built-in styles. */
public enum BuiltInTableStyleName
{

/* No built-in style. */
None = 0

/* &apos;<strong>TableStyleLight1</strong>&apos; built-in style. */
TableStyleLight1 = 1

/* &apos;<strong>TableStyleLight2</strong>&apos; built-in style. */
TableStyleLight2 = 2

/* &apos;<strong>TableStyleLight3</strong>&apos; built-in style. */
TableStyleLight3 = 3

/* &apos;<strong>TableStyleLight4</strong>&apos; built-in style. */
TableStyleLight4 = 4

/* &apos;<strong>TableStyleLight5</strong>&apos; built-in style. */
TableStyleLight5 = 5

/* &apos;<strong>TableStyleLight6</strong>&apos; built-in style. */
TableStyleLight6 = 6

/* &apos;<strong>TableStyleLight7</strong>&apos; built-in style. */
TableStyleLight7 = 7

/* &apos;<strong>TableStyleLight8</strong>&apos; built-in style. */
TableStyleLight8 = 8

/* &apos;<strong>TableStyleLight9</strong>&apos; built-in style. */
TableStyleLight9 = 9

/* &apos;<strong>TableStyleLight10</strong>&apos; built-in style. */
TableStyleLight10 = 10

/* &apos;<strong>TableStyleLight11</strong>&apos; built-in style. */
TableStyleLight11 = 11

/* &apos;<strong>TableStyleLight12</strong>&apos; built-in style. */
TableStyleLight12 = 12

/* &apos;<strong>TableStyleLight13</strong>&apos; built-in style. */
TableStyleLight13 = 13

/* &apos;<strong>TableStyleLight14</strong>&apos; built-in style. */
TableStyleLight14 = 14

/* &apos;<strong>TableStyleLight15</strong>&apos; built-in style. */
TableStyleLight15 = 15

/* &apos;<strong>TableStyleLight16</strong>&apos; built-in style. */
TableStyleLight16 = 16

/* &apos;<strong>TableStyleLight17</strong>&apos; built-in style. */
TableStyleLight17 = 17

/* &apos;<strong>TableStyleLight18</strong>&apos; built-in style. */
TableStyleLight18 = 18

/* &apos;<strong>TableStyleLight19</strong>&apos; built-in style. */
TableStyleLight19 = 19

/* &apos;<strong>TableStyleLight20</strong>&apos; built-in style. */
TableStyleLight20 = 20

/* &apos;<strong>TableStyleLight21</strong>&apos; built-in style. */
TableStyleLight21 = 21

/* &apos;<strong>TableStyleMedium1</strong>&apos; built-in style. */
TableStyleMedium1 = 22

/* &apos;<strong>TableStyleMedium2</strong>&apos; built-in style. */
TableStyleMedium2 = 23

/* &apos;<strong>TableStyleMedium3</strong>&apos; built-in style. */
TableStyleMedium3 = 24

/* &apos;<strong>TableStyleMedium4</strong>&apos; built-in style. */
TableStyleMedium4 = 25

/* &apos;<strong>TableStyleMedium5</strong>&apos; built-in style. */
TableStyleMedium5 = 26

/* &apos;<strong>TableStyleMedium6</strong>&apos; built-in style. */
TableStyleMedium6 = 27

/* &apos;<strong>TableStyleMedium7</strong>&apos; built-in style. */
TableStyleMedium7 = 28

/* &apos;<strong>TableStyleMedium8</strong>&apos; built-in style. */
TableStyleMedium8 = 29

/* &apos;<strong>TableStyleMedium9</strong>&apos; built-in style. */
TableStyleMedium9 = 30

/* &apos;<strong>TableStyleMedium10</strong>&apos; built-in style. */
TableStyleMedium10 = 31

/* &apos;<strong>TableStyleMedium11</strong>&apos; built-in style. */
TableStyleMedium11 = 32

/* &apos;<strong>TableStyleMedium12</strong>&apos; built-in style. */
TableStyleMedium12 = 33

/* &apos;<strong>TableStyleMedium13</strong>&apos; built-in style. */
TableStyleMedium13 = 34

/* &apos;<strong>TableStyleMedium14</strong>&apos; built-in style. */
TableStyleMedium14 = 35

/* &apos;<strong>TableStyleMedium15</strong>&apos; built-in style. */
TableStyleMedium15 = 36

/* &apos;<strong>TableStyleMedium16</strong>&apos; built-in style. */
TableStyleMedium16 = 37

/* &apos;<strong>TableStyleMedium17</strong>&apos; built-in style. */
TableStyleMedium17 = 38

/* &apos;<strong>TableStyleMedium18</strong>&apos; built-in style. */
TableStyleMedium18 = 39

/* &apos;<strong>TableStyleMedium19</strong>&apos; built-in style. */
TableStyleMedium19 = 40

/* &apos;<strong>TableStyleMedium20</strong>&apos; built-in style. */
TableStyleMedium20 = 41

/* &apos;<strong>TableStyleMedium21</strong>&apos; built-in style. */
TableStyleMedium21 = 42

/* &apos;<strong>TableStyleMedium22</strong>&apos; built-in style. */
TableStyleMedium22 = 43

/* &apos;<strong>TableStyleMedium23</strong>&apos; built-in style. */
TableStyleMedium23 = 44

/* &apos;<strong>TableStyleMedium24</strong>&apos; built-in style. */
TableStyleMedium24 = 45

/* &apos;<strong>TableStyleMedium25</strong>&apos; built-in style. */
TableStyleMedium25 = 46

/* &apos;<strong>TableStyleMedium26</strong>&apos; built-in style. */
TableStyleMedium26 = 47

/* &apos;<strong>TableStyleMedium27</strong>&apos; built-in style. */
TableStyleMedium27 = 48

/* &apos;<strong>TableStyleMedium28</strong>&apos; built-in style. */
TableStyleMedium28 = 49

/* &apos;<strong>TableStyleDark1</strong>&apos; built-in style. */
TableStyleDark1 = 50

/* &apos;<strong>TableStyleDark2</strong>&apos; built-in style. */
TableStyleDark2 = 51

/* &apos;<strong>TableStyleDark3</strong>&apos; built-in style. */
TableStyleDark3 = 52

/* &apos;<strong>TableStyleDark4</strong>&apos; built-in style. */
TableStyleDark4 = 53

/* &apos;<strong>TableStyleDark5</strong>&apos; built-in style. */
TableStyleDark5 = 54

/* &apos;<strong>TableStyleDark6</strong>&apos; built-in style. */
TableStyleDark6 = 55

/* &apos;<strong>TableStyleDark7</strong>&apos; built-in style. */
TableStyleDark7 = 56

/* &apos;<strong>TableStyleDark8</strong>&apos; built-in style. */
TableStyleDark8 = 57

/* &apos;<strong>TableStyleDark9</strong>&apos; built-in style. */
TableStyleDark9 = 58

/* &apos;<strong>TableStyleDark10</strong>&apos; built-in style. */
TableStyleDark10 = 59

/* &apos;<strong>TableStyleDark11</strong>&apos; built-in style. */
TableStyleDark11 = 60
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotAreaFieldCollection.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a collection of visible (row, column, page or data) <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>s. */
public sealed class PivotAreaFieldCollection : PivotFieldBaseCollection, IEnumerable<PivotField>, IEnumerable
{

/* Adds the <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> to this area collection. */
public PivotField Add(int fieldIndex)

/* Adds the <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> to this area collection. */
public PivotField Add(string fieldName)

/* Adds the <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> to this area collection. */
public PivotField Add(PivotField pivotField)

/* Removes <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> at the specified index from this area collection. */
public void Remove(int fieldIndex)

/* Removes <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> with the specified name from this area collection. */
public void Remove(string fieldName)

/* Removes <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> from this area collection. */
public void Remove(PivotField pivotField)

/* Moves the <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> at the specified index to a new location in the collection. */
public void Move(int oldIndex, int newIndex)

/* Removes all <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>s from this area collection. */
public void Clear()
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.BuiltInDocumentProperties.yml:
namespace GemBox.Spreadsheet
{

/* Enumeration of available built-in document properties. */
public enum BuiltInDocumentProperties
{

/* Title of the document. */
Title = 0

/* Name of the document&apos;s author. */
Author = 1

/* Subject of the document. */
Subject = 2

/* Document comments. */
Comments = 3

/* Category of the document. */
Category = 4

/* Status of the document. */
Status = 5

/* Document keywords. */
Keywords = 6

/* Name of the last author. */
LastSavedBy = 7

/* Manager. */
Manager = 8

/* Company. */
Company = 9

/* Base hyperlink. */
HyperlinkBase = 10

/* Application. */
Application = 11

/* UTC time of creation of the document. */
DateContentCreated = 12

/* UTC time on which the document was last modified/saved. */
DateLastSaved = 13

/* UTC time on which the document was last printed. */
DateLastPrinted = 14
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelRowColumnCollectionBase.yml:
namespace GemBox.Spreadsheet
{

/* Base class for row and column collections. */
public abstract class ExcelRowColumnCollectionBase : ExcelRowColumnCellCollectionBase, IEnumerable
{
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.LengthUnit.yml:
namespace GemBox.Spreadsheet
{

/* Represents the measurement unit for measuring length or distance. */
public enum LengthUnit
{

/* English Metric Unit (914 400 EMUs = 1 <xref href="GemBox.Spreadsheet.LengthUnit.Inch" data-throw-if-not-resolved="false"></xref>, 360 000 EMUs = 1 <xref href="GemBox.Spreadsheet.LengthUnit.Centimeter" data-throw-if-not-resolved="false"></xref>, 12 700 EMUs = 1 <xref href="GemBox.Spreadsheet.LengthUnit.Point" data-throw-if-not-resolved="false"></xref>). */
Emu = 0

/* Twentieth of a point (20 twips = 1 <xref href="GemBox.Spreadsheet.LengthUnit.Point" data-throw-if-not-resolved="false"></xref>). */
Twip = 1

/* Point (72 points = 1 <xref href="GemBox.Spreadsheet.LengthUnit.Inch" data-throw-if-not-resolved="false"></xref>). */
Point = 2

/* Device-independent or logical pixel (96 device-independent pixels = 1 inch). */
Pixel = 3

/* Millimeter (10 millimeters = 1 <xref href="GemBox.Spreadsheet.LengthUnit.Centimeter" data-throw-if-not-resolved="false"></xref>). */
Millimeter = 4

/* Centimeter (2.54 centimeters = 1 <xref href="GemBox.Spreadsheet.LengthUnit.Inch" data-throw-if-not-resolved="false"></xref>). */
Centimeter = 6

/* Inch (1 inch = 2.54 <xref href="GemBox.Spreadsheet.LengthUnit.Centimeter" data-throw-if-not-resolved="false"></xref>s). */
Inch = 7

/* Device-dependent or physical pixel (<xref href="GemBox.Spreadsheet.ExcelViewOptions.Dpi" data-throw-if-not-resolved="false"></xref> device-dependent pixels = 1 inch). */
DevicePixel = 8

/* <p>Character width is the maximum digit width of the numbers 0, 1, 2, ..., 9 as rendered in the <xref href="GemBox.Spreadsheet.CellStyleCollection.Normal" data-throw-if-not-resolved="false"></xref> style&apos;s font (see <xref href="GemBox.Spreadsheet.ExcelFile.MaximumDigitWidth" data-throw-if-not-resolved="false"></xref>).</p>
<p>The unit of the column width in MS Excel user interface is <xref href="GemBox.Spreadsheet.LengthUnit.CharacterWidth" data-throw-if-not-resolved="false"></xref>.</p>
<p>The value in <xref href="GemBox.Spreadsheet.LengthUnit.CharacterWidth" data-throw-if-not-resolved="false"></xref> unit always contains at most 2 decimal digits.</p>
<div class="NOTE"><h5>note</h5><p>The <xref href="GemBox.Spreadsheet.LengthUnit.CharacterWidth" data-throw-if-not-resolved="false"></xref> should not be used in <xref href="GemBox.Spreadsheet.LengthUnitConverter.Convert(System.Double%2cGemBox.Spreadsheet.LengthUnit%2cGemBox.Spreadsheet.LengthUnit)" data-throw-if-not-resolved="false"></xref> method. Instead, it should be used in <xref href="GemBox.Spreadsheet.ExcelColumn.GetWidth(GemBox.Spreadsheet.LengthUnit)" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.ExcelColumn.SetWidth(System.Double%2cGemBox.Spreadsheet.LengthUnit)" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.ExcelWorksheet.GetDefaultColumnWidth(GemBox.Spreadsheet.LengthUnit)" data-throw-if-not-resolved="false"></xref>, and <xref href="GemBox.Spreadsheet.ExcelWorksheet.SetDefaultColumnWidth(System.Double%2cGemBox.Spreadsheet.LengthUnit)" data-throw-if-not-resolved="false"></xref> methods.</p></div> */
CharacterWidth = 11
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.XpsSaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for saving to XML Paper Specification file format. */
public sealed class XpsSaveOptions : SaveOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.XpsSaveOptions" data-throw-if-not-resolved="false"></xref> class. */
public XpsSaveOptions()

/* Gets or sets a value indicating whether to save the whole <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> or just <xref href="GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" data-throw-if-not-resolved="false"></xref>. */
public SelectionType SelectionType { get; set; }

/* Gets or sets the rendering mode used when saving the content to an XML Paper Specification (XPS) file. */
public RenderingMode RenderingMode { get; set; }

/* Gets or sets the scaling factor for rendering metafile (WMF and EMF) images. Greater scaling factor improves quality but also increases file size. Default value is 1. */
public double MetafileScaleFactor { get; set; }

/* Gets the content-type for XPS file format: <strong>application/vnd.ms-xpsdocument</strong>. */
public override string ContentType { get; }

/* Gets limitations for saving to XPS file format. */
public override FileFormatLimitations Limitations { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Security.DigitalSignatureCommitmentType.yml:
namespace GemBox.Spreadsheet.Security
{

/* Represents a commitment type when signing the document. */
public enum DigitalSignatureCommitmentType
{

/* No commitment type */
None = 0

/* Created this document */
Created = 1

/* Approved this document */
Approved = 2

/* Created and approved this document */
CreatedAndApproved = 3
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ContainCondition.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a condition that formats only cells that contain value which satisfies the specified criteria. */
public class ContainCondition : FormatCondition, IFormatHolder<CellFormatData>
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainCondition" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainCondition" data-throw-if-not-resolved="false"></xref> type. */
public ContainConditionType ContainConditionType { get; }

/* Gets the <xref href="GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.Contain" data-throw-if-not-resolved="false"></xref> value. */
public override sealed FormatConditionType ConditionType { get; }

/* Gets the actual formatting which will be applied to a cell if its value satisfies this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainCondition" data-throw-if-not-resolved="false"></xref>. */
public CellStyle Style { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExtractToDataTableOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for extracting data from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> to <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>. */
public sealed class ExtractToDataTableOptions
{

/* Initializes an instance of <xref href="GemBox.Spreadsheet.ExtractToDataTableOptions" data-throw-if-not-resolved="false"></xref> class. */
public ExtractToDataTableOptions(int startRow, int startColumn, int numberOfRows)

/* Initializes an instance of <xref href="GemBox.Spreadsheet.ExtractToDataTableOptions" data-throw-if-not-resolved="false"></xref> class. */
public ExtractToDataTableOptions(string startCell, int numberOfRows)

/* Gets or sets the index of the first row of data being extracted from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int StartRow { get; set; }

/* Gets or sets the index of the first column of data being extracted from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int StartColumn { get; set; }

/* Gets or sets the number of rows being extracted from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int NumberOfRows { get; set; }

/* Gets the collection used for mapping <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> columns to <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> columns. */
public DataColumnMappingCollection MappingCollection { get; }

/* Gets or sets <xref href="GemBox.Spreadsheet.ExtractToDataTableOptions.ExtractDataOptions" data-throw-if-not-resolved="false"></xref>. */
public ExtractDataOptions ExtractDataOptions { get; set; }

/* Event that fires when converting <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref> value to <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> cell value. */
public event EventHandler<ExcelCellToDataTableCellConvertingEventArgs> ExcelCellToDataTableCellConverting
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.WinFormsUtilities.SearchingDirection.yml:
namespace GemBox.Spreadsheet.WinFormsUtilities
{

/* Represents a direction in which the header row will be searched. */
public enum SearchingDirection
{

/* Search from top to bottom. */
TopToBottom = 0

/* Search from bottom to top. */
BottomToTop = 1
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.UnderlineStyle.yml:
namespace GemBox.Spreadsheet
{

/* Represents the different types of possible underline formatting used in <xref href="GemBox.Spreadsheet.ExcelFont.UnderlineStyle" data-throw-if-not-resolved="false"></xref> member. */
public enum UnderlineStyle
{

/* No underline. */
None = 0

/* Single-line underlining under each character in the cell. */
Single = 1

/* Double-line underlining under each character in the cell. */
Double = 2

/* <p>Single-line accounting underlining under each character in the cell.</p>
<p>This option is currently not supported in PDF, XPS and image file formats and defaults to <xref href="GemBox.Spreadsheet.UnderlineStyle.Single" data-throw-if-not-resolved="false"></xref>.</p> */
SingleAccounting = 33

/* <p>Double-line accounting underlining under each character in the cell.</p>
<p>This option is currently not supported in PDF, XPS and image file formats and defaults to <xref href="GemBox.Spreadsheet.UnderlineStyle.Double" data-throw-if-not-resolved="false"></xref>.</p> */
DoubleAccounting = 34
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ChartLegendPosition.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Specifies the possible positions for a legend. */
public enum ChartLegendPosition
{

/* Specifies that the legend shall be drawn at the right of the chart. */
Right = 0

/* Specifies that the legend shall be drawn at the top of the chart. */
Top = 1

/* Specifies that the legend shall be drawn at the bottom of the chart. */
Bottom = 2

/* Specifies that the legend shall be drawn at the left of the chart. */
Left = 3

/* Specifies that the legend shall be drawn at the top right of the chart. */
TopRight = 4
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextParagraphFormat.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a set of formatting properties that can be applied to a <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>. */
public sealed class TextParagraphFormat
{

/* <p>Gets or sets the alignment that is to be applied to the paragraph.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.Drawing.HorizontalAlignment.Left" data-throw-if-not-resolved="false"></xref>.</p> */
public HorizontalAlignment Alignment { get; set; }

/* <p>Gets or sets the indentation before text of the <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>.</p>
<p>This is specified in addition to the <xref href="GemBox.Spreadsheet.Drawing.TextBoxFormat.InternalMarginLeft" data-throw-if-not-resolved="false"></xref> and applies only to this <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>.
That is the <xref href="GemBox.Spreadsheet.Drawing.TextBoxFormat.InternalMarginLeft" data-throw-if-not-resolved="false"></xref> and the <xref href="GemBox.Spreadsheet.Drawing.TextParagraphFormat.IndentationBeforeText" data-throw-if-not-resolved="false"></xref> are additive with respect to the text position.</p>
<p>Default value is 0.</p> */
public Length IndentationBeforeText { get; set; }

/* <p>Gets or sets the special indentation that is applied to the first line of text in the <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>.</p>
<p>Positive value specifies <em>First line</em> indentation, negative values specifies <em>Hanging</em> indentation and value of zero is considered to be at the same location as <xref href="GemBox.Spreadsheet.Drawing.TextParagraphFormat.IndentationBeforeText" data-throw-if-not-resolved="false"></xref> property.</p>
<p>Default value is 0.</p> */
public Length IndentationSpecial { get; set; }

/* <p>Gets or sets the amount of vertical white space that is present before a <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>. This space is specified in either percentage or absolute value via <xref href="GemBox.Spreadsheet.Drawing.TextSpacing" data-throw-if-not-resolved="false"></xref> structure.</p>
<p>Default value is equal to <xref href="GemBox.Spreadsheet.Drawing.TextSpacing.None" data-throw-if-not-resolved="false"></xref>.</p>
<p>Percentage based value is currently not supported in PDF, XPS and image formats and 0 point value is exported instead.</p> */
public TextSpacing SpacingBefore { get; set; }

/* <p>Gets or sets the amount of vertical white space that is present after a <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>. This space is specified in either percentage or absolute value via <xref href="GemBox.Spreadsheet.Drawing.TextSpacing" data-throw-if-not-resolved="false"></xref> structure.</p>
<p>Default value is equal to <xref href="GemBox.Spreadsheet.Drawing.TextSpacing.None" data-throw-if-not-resolved="false"></xref>.</p>
<p>Percentage based value is currently not supported in PDF, XPS and image formats and 0 point value is exported instead.</p> */
public TextSpacing SpacingAfter { get; set; }

/* <p>Gets or sets the vertical line spacing that is to be used within a <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>. This can be specified in two different ways, percentage spacing and absolute spacing via <xref href="GemBox.Spreadsheet.Drawing.TextSpacing" data-throw-if-not-resolved="false"></xref> structure.</p>
<p>Default value is equal to <xref href="GemBox.Spreadsheet.Drawing.TextSpacing.Single" data-throw-if-not-resolved="false"></xref>.</p> */
public TextSpacing SpacingLine { get; set; }

/* When true, this is a right-to-left paragraph. */
public bool RightToLeft { get; set; }

/* Gets the paragraph&apos;s list (bulleted or numbered) formatting options. */
public TextListFormat List { get; }

/* <p>Gets or sets the default character formatting options for all <xref href="GemBox.Spreadsheet.Drawing.TextElement" data-throw-if-not-resolved="false"></xref>s within a containing <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>.</p>
<p>These options are used when child <xref href="GemBox.Spreadsheet.Drawing.TextElement" data-throw-if-not-resolved="false"></xref> doesn&apos;t have a specific character formatting options from <xref href="GemBox.Spreadsheet.Drawing.TextElement.Format" data-throw-if-not-resolved="false"></xref> specified. </p> */
public TextFormat Character { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelCommentCollection.yml:
namespace GemBox.Spreadsheet
{

/* Collection of comments (<xref href="GemBox.Spreadsheet.ExcelComment" data-throw-if-not-resolved="false"></xref>). */
public sealed class ExcelCommentCollection : IEnumerable<ExcelComment>, IEnumerable
{

/* Removes all comments. */
public void Clear()

/* Removes the comment at the specified index. */
public void RemoveAt(int index)

/* Removes the first occurrence of a specific <xref href="GemBox.Spreadsheet.ExcelComment" data-throw-if-not-resolved="false"></xref> from the collection. */
public bool Remove(ExcelComment item)

/* Returns an enumerator for the collection. */
public IEnumerator<ExcelComment> GetEnumerator()

/* Gets the comment at the specified index. */
public ExcelComment this[int index] { get; }

/* Gets the number of comments contained in the collection. */
public int Count { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextParagraph.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a paragraph of text. */
public class TextParagraph : IColorContext
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the paragraph text elements. */
public TextElementCollection Elements { get; }

/* Gets or sets the paragraph&apos;s formatting options. */
public TextParagraphFormat Format { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.DataBarAxisPosition.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a data bar axis position. */
public enum DataBarAxisPosition
{

/* The axis position for the data bar is calculated automatically (variable position based on negative values). */
Automatic = 0

/* The axis position for the data bar is the midpoint of the cell. */
Midpoint = 1

/* There is no axis for the data bar. */
None = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.VerticalPageBreakCollection.yml:
namespace GemBox.Spreadsheet
{

/* Collection of vertical page breaks (<xref href="GemBox.Spreadsheet.VerticalPageBreak" data-throw-if-not-resolved="false"></xref>). */
public sealed class VerticalPageBreakCollection : PageBreakCollection<VerticalPageBreak>, IEnumerable<VerticalPageBreak>, IEnumerable
{

/* Adds a new vertical page break left to the specified column. */
public void Add(int column)

/* Adds a new vertical page break left to the specified column and within specified rows. */
public void Add(int column, int firstRow, int lastRow)

/* Gets or sets the vertical page break at the specified index. */
public VerticalPageBreak this[int index] { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Tables.yml:
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.WinFormsUtilities.DataGridViewConverter.yml:
namespace GemBox.Spreadsheet.WinFormsUtilities
{

/* <xref href="GemBox.Spreadsheet.WinFormsUtilities.DataGridViewConverter" data-throw-if-not-resolved="false"></xref> is used for importing <xref href="System.Windows.Forms.DataGridView" data-throw-if-not-resolved="false"></xref> control into <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> and
exporting a <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref> from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> into <xref href="System.Windows.Forms.DataGridView" data-throw-if-not-resolved="false"></xref> control. */
public static class DataGridViewConverter
{

/* Imports data from <xref href="System.Windows.Forms.DataGridView" data-throw-if-not-resolved="false"></xref> control into <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> using specified <xref href="GemBox.Spreadsheet.WinFormsUtilities.ImportFromDataGridViewOptions" data-throw-if-not-resolved="false"></xref>. */
public static void ImportFromDataGridView(ExcelWorksheet worksheet, DataGridView dataGridView, ImportFromDataGridViewOptions options)

/* Imports data from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> to <xref href="System.Windows.Forms.DataGridView" data-throw-if-not-resolved="false"></xref> using specified <xref href="GemBox.Spreadsheet.WinFormsUtilities.ExportToDataGridViewOptions" data-throw-if-not-resolved="false"></xref>. */
public static void ExportToDataGridView(ExcelWorksheet worksheet, DataGridView dataGridView, ExportToDataGridViewOptions options)
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ContainValueOperator.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition" data-throw-if-not-resolved="false"></xref> operator. */
public enum ContainValueOperator
{

/* Cell is formatted if its value is between <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value2" data-throw-if-not-resolved="false"></xref>. */
Between = 0

/* Cell is formatted if its value is not between <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value2" data-throw-if-not-resolved="false"></xref>. */
NotBetween = 1

/* Cell is formatted if its value is equal to <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value" data-throw-if-not-resolved="false"></xref>. */
Equal = 2

/* Cell is formatted if its value is not equal to <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value" data-throw-if-not-resolved="false"></xref>. */
NotEqual = 3

/* Cell is formatted if its value is greater than <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value" data-throw-if-not-resolved="false"></xref>. */
GreaterThan = 4

/* Cell is formatted if its value is less than <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value" data-throw-if-not-resolved="false"></xref>. */
LessThan = 5

/* Cell is formatted if its value is greater than or equal to <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value" data-throw-if-not-resolved="false"></xref>. */
GreaterThanOrEqual = 6

/* Cell is formatted if its value is less than or equal to <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainValueCondition.Value" data-throw-if-not-resolved="false"></xref>. */
LessThanOrEqual = 7
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.WinFormsUtilities.ImportFromDataGridViewOptions.yml:
namespace GemBox.Spreadsheet.WinFormsUtilities
{

/* Represents options for importing data from <xref href="System.Windows.Forms.DataGridView" data-throw-if-not-resolved="false"></xref> to <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public sealed class ImportFromDataGridViewOptions
{

/* Initializes an instance of <xref href="GemBox.Spreadsheet.WinFormsUtilities.ImportFromDataGridViewOptions" data-throw-if-not-resolved="false"></xref> class. */
public ImportFromDataGridViewOptions()

/* Initializes an instance of <xref href="GemBox.Spreadsheet.WinFormsUtilities.ImportFromDataGridViewOptions" data-throw-if-not-resolved="false"></xref> class. */
public ImportFromDataGridViewOptions(int startRow, int startColumn)

/* Initializes an instance of <xref href="GemBox.Spreadsheet.WinFormsUtilities.ImportFromDataGridViewOptions" data-throw-if-not-resolved="false"></xref> class. */
public ImportFromDataGridViewOptions(string startCell)

/* Gets or sets the index of the first row of imported data in <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int StartRow { get; set; }

/* Gets or sets the index of the first column of imported data in <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int StartColumn { get; set; }

/* Gets or sets a value indicating whether to import column headers into first row. */
public bool ColumnHeaders { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Tables.TableCollection.yml:
namespace GemBox.Spreadsheet.Tables
{

/* A collection of <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> items.
Supported in XLSX only. */
public sealed class TableCollection : IEnumerable<Table>, IEnumerable
{

/* Gets the collection enumerator. */
public IEnumerator<Table> GetEnumerator()

/* Adds a new <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> to the collection. */
public Table Add(string name, string range, bool hasHeaders)

/* Adds a new <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> to the collection. */
public Table Add(string name, CellRange range, bool hasHeaders)

/* Removes the <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> at the specified index. */
public void RemoveAt(int index, RemoveShiftDirection direction)

/* Removes the specified <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref>. */
public bool Remove(Table table, RemoveShiftDirection direction)

/* Gets the <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> at the specified index. */
public Table this[int index] { get; }

/* Gets <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> described by name from the collection. */
public Table this[string name] { get; }

/* Gets the number of <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref>s contained in the collection. */
public int Count { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Filter.yml:
namespace GemBox.Spreadsheet
{

/* Represents a base class for filters contained in <xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref>. */
public abstract class Filter
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Filter" data-throw-if-not-resolved="false"></xref> instance. */
public abstract override string ToString()

/* Gets the filter type. */
public abstract FilterType FilterType { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotFieldDisplayFormat.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a data <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> display format. */
public enum PivotFieldDisplayFormat
{

/* No calculation. */
Normal = 0

/* The difference from the value of the Base item in the Base field. */
Difference = 1

/* Data calculated as ((value in cell) x (Grand Total of Grand Totals)) / ((Grand Row Total) x (Grand Column Total)). */
Index = 2

/* Percentage of the value of the Base item in the Base field. */
Percent = 3

/* Percentage difference from the value of the Base item in the Base field. */
PercentageOfDifference = 4

/* Percentage of the total for the column or series. */
PercentageOfColumn = 5

/* Percentage of the total for the row or category. */
PercentageOfRow = 6

/* Percentage of the grand total of all the data or data points in the report. */
PercentageOfTotal = 7

/* Percentage of the total of the specified parent Base field. */
PercentageOfParent = 8

/* Percentage of the total of the parent column. */
PercentageOfParentColumn = 9

/* Percentage of the total of the parent row. */
PercentageOfParentRow = 10

/* Rank largest to smallest. */
PercentageOfRunningTotal = 11

/* Data for successive items in the Base field as a running total. */
RunTotal = 12

/* Rank smallest to largest. */
RankAscending = 13

/* Rank largest to smallest. */
RankDecending = 14
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PageBreak.yml:
namespace GemBox.Spreadsheet
{

/* Base class for all page breaks. */
public abstract class PageBreak : IComparable<PageBreak>
{

/* Compares the value of this instance to a specified <xref href="GemBox.Spreadsheet.PageBreak" data-throw-if-not-resolved="false"></xref> value and returns an integer that indicates whether this instance is earlier than, the same as, or later than the specified <xref href="GemBox.Spreadsheet.PageBreak" data-throw-if-not-resolved="false"></xref> value. */
public virtual int CompareTo(PageBreak other)
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.EmptyCellDisplayMode.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Specifies the possible ways to display empty cell values (cells with <xref href="GemBox.Spreadsheet.ExcelCell.Value" data-throw-if-not-resolved="false"></xref> equal to <xref uid="langword_csharp_null" name="null" href=""></xref>). */
public enum EmptyCellDisplayMode
{

/* Specifies that empty cell values shall be treated as zero. */
Zero = 0

/* Specifies that empty cell values shall be left as a gap. */
Gaps = 1

/* Specifies that empty cell values shall be spanned with a line. */
ConnectDataPointsWithLine = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PdfConformanceLevel.yml:
namespace GemBox.Spreadsheet
{

/* Represents levels of conformance for PDF documents. */
public enum PdfConformanceLevel
{

/* No conformance. */
None = 0

/* <p>
PDF/A-1 is based on PDF version 1.4, which first appeared in 2001. All resources (images, graphics, typographic characters) must be embedded 
within the PDF/A document itself. A PDF/A file requires precise, platform-independent colour data using ICC profiles, and XMP for the document 
metadata. Transparent elements, some forms of compression (LZW, JPEG2000), PDF layers, and certain actions or JavaScript are forbidden. A PDF/A 
file must not be password-protected. PDF/A-1 expressly supports embedded digital signatures and the use of hyperlinks.
</p>
<p>
Level A (Accessible) meets all requirements for the standard, including the logical structure of the document and its correct reading order. 
Text must be extractable and the logical structure must match the natural reading order. Fonts used must meet stringent requirements. 
This PDF/A level can usually only be met by converting born-digital documents.
</p> */
PdfA1a = 16641

/* <p>
PDF/A-1 is based on PDF version 1.4, which first appeared in 2001. All resources (images, graphics, typographic characters) must be embedded 
within the PDF/A document itself. A PDF/A file requires precise, platform-independent colour data using ICC profiles, and XMP for the document 
metadata. Transparent elements, some forms of compression (LZW, JPEG2000), PDF layers, and certain actions or JavaScript are forbidden. A PDF/A 
file must not be password-protected. PDF/A-1 expressly supports embedded digital signatures and the use of hyperlinks.
</p>
<p>
Level B (Basic) guarantees that the content of the document can be unambiguously reproduced. Level B files are easier to create than Level A, but 
Level B does not guarantee 100% text extraction or searchability. It does not necessarily mean that the content can be reused without any problems. 
Scanned paper documents can usually be converted to PDF/A Conformance Level B without any extra work.
</p> */
PdfA1b = 16897

/* <p>
PDF/A-2 was published in 2011 as &quot;ISO 19005-2&quot;. Based on PDF version 1.7, which has since been standardised as &quot;ISO 32000-1&quot;, it makes use of 
this version’s new features. This means PDF/A-2 allows JPEG2000 compression, transparent elements and PDF layers. PDF/A-2 also allows you to 
embed OpenType fonts and supports PAdES(PDF Advanced Electronic Signatures)-compliant digital signatures. One particularly important innovation 
is the &quot;container&quot; function: PDF/A files can be embedded within a PDF/A-2 document.
</p>
<p>
Level A (Accessible) meets all requirements for the standard, including the logical structure of the document and its correct reading order. 
Text must be extractable and the logical structure must match the natural reading order. Fonts used must meet stringent requirements. 
This PDF/A level can usually only be met by converting born-digital documents.
</p> */
PdfA2a = 16642

/* <p>
PDF/A-2 was published in 2011 as &quot;ISO 19005-2&quot;. Based on PDF version 1.7, which has since been standardised as &quot;ISO 32000-1&quot;, it makes use of 
this version’s new features. This means PDF/A-2 allows JPEG2000 compression, transparent elements and PDF layers. PDF/A-2 also allows you to 
embed OpenType fonts and supports PAdES(PDF Advanced Electronic Signatures)-compliant digital signatures. One particularly important innovation 
is the &quot;container&quot; function: PDF/A files can be embedded within a PDF/A-2 document.
</p>
<p>
Level B (Basic) guarantees that the content of the document can be unambiguously reproduced. Level B files are easier to create than Level A, but 
Level B does not guarantee 100% text extraction or searchability. It does not necessarily mean that the content can be reused without any problems. 
Scanned paper documents can usually be converted to PDF/A Conformance Level B without any extra work.
</p> */
PdfA2b = 16898

/* <p>
PDF/A-2 was published in 2011 as &quot;ISO 19005-2&quot;. Based on PDF version 1.7, which has since been standardised as &quot;ISO 32000-1&quot;, it makes use of 
this version’s new features. This means PDF/A-2 allows JPEG2000 compression, transparent elements and PDF layers. PDF/A-2 also allows you to 
embed OpenType fonts and supports PAdES(PDF Advanced Electronic Signatures)-compliant digital signatures. One particularly important innovation 
is the &quot;container&quot; function: PDF/A files can be embedded within a PDF/A-2 document.
</p>
<p>
Level U (Unicode) was introduced along with PDF/A-2. It expands Conformance Level B to specify that all text can be mapped to standard Unicode character codes.
</p> */
PdfA2u = 21762

/* <p>
PDF/A-3 has been available since October 2012. A PDF/A-3 document allows you to embed any file format desired – not just PDF/A documents. 
For example, a PDF/A-3 file can contain the original file from which it was generated. The PDF/A standard does not regulate the suitability of 
these embedded files for archiving.
</p>
<p>
Level A (Accessible) meets all requirements for the standard, including the logical structure of the document and its correct reading order. 
Text must be extractable and the logical structure must match the natural reading order. Fonts used must meet stringent requirements. 
This PDF/A level can usually only be met by converting born-digital documents.
</p> */
PdfA3a = 16643

/* <p>
PDF/A-3 has been available since October 2012. A PDF/A-3 document allows you to embed any file format desired – not just PDF/A documents. 
For example, a PDF/A-3 file can contain the original file from which it was generated. The PDF/A standard does not regulate the suitability of 
these embedded files for archiving.
</p>
<p>
Level B (Basic) guarantees that the content of the document can be unambiguously reproduced. Level B files are easier to create than Level A, but 
Level B does not guarantee 100% text extraction or searchability. It does not necessarily mean that the content can be reused without any problems. 
Scanned paper documents can usually be converted to PDF/A Conformance Level B without any extra work.
</p> */
PdfA3b = 16899

/* <p>
PDF/A-3 has been available since October 2012. A PDF/A-3 document allows you to embed any file format desired – not just PDF/A documents. 
For example, a PDF/A-3 file can contain the original file from which it was generated. The PDF/A standard does not regulate the suitability of 
these embedded files for archiving.
</p>
<p>
Level U (Unicode) was introduced along with PDF/A-2. It expands Conformance Level B to specify that all text can be mapped to standard Unicode character codes.
</p> */
PdfA3u = 21763
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CellStyle.yml:
namespace GemBox.Spreadsheet
{

/* Represents cell formatting. */
public class CellStyle
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.CellStyle" data-throw-if-not-resolved="false"></xref> class not associated with any workbook. */
public CellStyle()

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.CellStyle" data-throw-if-not-resolved="false"></xref> class which references default (<strong><xref href="GemBox.Spreadsheet.CellStyleCollection.Normal" data-throw-if-not-resolved="false"></xref></strong>) style from the specified workbook. */
public CellStyle(ExcelFile workbook)

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.CellStyle" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* <p>Gets or sets the number format which indicates how to format and render the numeric value of a cell.</p>
<p>Default value is <strong>General</strong>.</p>
<p>If set to <xref uid="langword_csharp_null" name="null" href=""></xref>, number format will be resolved from referenced workbook style.</p> */
public string NumberFormat { get; set; }

/* Gets a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents the format code for the numeric value in the language of the user. */
public string NumberFormatLocal { get; }

/* <p>Gets or sets the horizontal alignment.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.HorizontalAlignmentStyle.General" data-throw-if-not-resolved="false"></xref>.</p> */
public HorizontalAlignmentStyle HorizontalAlignment { get; set; }

/* <p>Gets or sets the vertical alignment.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.VerticalAlignmentStyle.Bottom" data-throw-if-not-resolved="false"></xref>.</p> */
public VerticalAlignmentStyle VerticalAlignment { get; set; }

/* <p>Gets or sets the number of spaces (of the <strong><xref href="GemBox.Spreadsheet.CellStyleCollection.Normal" data-throw-if-not-resolved="false"></xref></strong> style font) of indentation for text in a cell.</p>
<p>The number of spaces to indent is calculated as following: Number of spaces to indent = <xref href="GemBox.Spreadsheet.CellStyle.Indent" data-throw-if-not-resolved="false"></xref> * 3.</p>
<p>Default value is 0.</p> */
public int Indent { get; set; }

/* <p>Gets or sets the text rotation in degrees (1/360th of a full circle).</p>
<p>Value must be between -90 and 90 and specifies counterclockwise rotation of the text from the normal position. The first letter of the text is considered the center-point of the arc.</p>
<p>Default value is 0.</p> */
public int Rotation { get; set; }

/* <p>Gets or sets a value indicating whether text orientation is vertical.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool IsTextVertical { get; set; }

/* <p>Gets or sets a value indicating whether the text in a cell should be line-wrapped within the cell.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool WrapText { get; set; }

/* <p>Gets or sets a value indicating whether the displayed text in the cell should be shrunk to fit the cell width. Not applicable when a cell contains multiple lines of text.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool ShrinkToFit { get; set; }

/* <p>Gets or sets the font.</p>
<p>If set to <xref uid="langword_csharp_null" name="null" href=""></xref>, font will be resolved from referenced workbook style.</p> */
public ExcelFont Font { get; set; }

/* <p>Gets or sets the borders.</p>
<p>If set to <xref uid="langword_csharp_null" name="null" href=""></xref>, borders will be resolved from referenced workbook style.</p> */
public CellBorders Borders { get; set; }

/* <p>Gets or sets the fill (cell background).</p>
<p>If set to <xref uid="langword_csharp_null" name="null" href=""></xref>, fill will be resolved from referenced workbook style.</p>
<p>Fill can be either pattern or gradient.</p>
<p>Gradient fill is currently supported in XLSX and partially in rendering formats (PDF, XPS and image formats).</p> */
public ExcelFillPattern FillPattern { get; set; }

/* <p>Gets or sets a value indicating whether the cell is locked.</p>
<p>Default value is <xref uid="langword_csharp_true" name="true" href=""></xref>.</p> */
public bool Locked { get; set; }

/* <p>Gets or sets a value indicating whether the contents of the cell will not be displayed in the formula bar.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool FormulaHidden { get; set; }

/* <p>If <xref href="GemBox.Spreadsheet.CellStyle" data-throw-if-not-resolved="false"></xref> is workbook <xref href="GemBox.Spreadsheet.Style" data-throw-if-not-resolved="false"></xref>, gets or sets the name of the style; otherwise, gets the name of the referenced workbook <xref href="GemBox.Spreadsheet.Style" data-throw-if-not-resolved="false"></xref> from which this <xref href="GemBox.Spreadsheet.CellStyle" data-throw-if-not-resolved="false"></xref> inherits formatting.</p>
<p>Default value is <strong>Normal</strong>.</p> */
public string Name { get; }

/* <p>Gets or sets a value indicating whether the text string in a cell should be prefixed by a single quote mark (e.g., &apos;text). Use it to store numeric value of a cell as text.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool QuotePrefix { get; set; }

/* Gets or sets a value indicating whether the reading order of the cell is left-to-right, right-to-left, or context dependent. */
public TextDirection TextDirection { get; set; }

/* Gets a value indicating whether the referenced workbook style is default (<strong><xref href="GemBox.Spreadsheet.CellStyleCollection.Normal" data-throw-if-not-resolved="false"></xref></strong>) and there are no additional modifications of cell formatting. */
public bool IsDefault { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.DynamicFilter.yml:
namespace GemBox.Spreadsheet
{

/* Represents a dynamic filter criteria that can change, either with the data itself (e.g., &quot;above average&quot;) or with the current system date (e.g., show values for &quot;today&quot;). */
public sealed class DynamicFilter : Filter
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.DynamicFilter" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets the dynamic filter type. */
public DynamicFilterType DynamicFilterType { get; set; }

/* Gets the <xref href="GemBox.Spreadsheet.FilterType.Dynamic" data-throw-if-not-resolved="false"></xref> value. */
public override FilterType FilterType { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CellStyleCollection.yml:
namespace GemBox.Spreadsheet
{

/* Represents a collection of workbook (master) <xref href="GemBox.Spreadsheet.Style" data-throw-if-not-resolved="false"></xref>s. */
public sealed class CellStyleCollection : IEnumerable<Style>, IEnumerable
{

/* Adds an empty <xref href="GemBox.Spreadsheet.Style" data-throw-if-not-resolved="false"></xref> instance to the <xref href="GemBox.Spreadsheet.CellStyleCollection" data-throw-if-not-resolved="false"></xref>. */
public Style Add(string name)

/* Removes style with the specified name from the workbook. */
public bool Remove(string name)

/* Removes built-in style with the specified name from the workbook. */
public bool Remove(BuiltInCellStyleName name)

/* Determines whether the <xref href="GemBox.Spreadsheet.CellStyleCollection" data-throw-if-not-resolved="false"></xref> contains a <xref href="GemBox.Spreadsheet.Style" data-throw-if-not-resolved="false"></xref> instance with specific name. */
public bool Contains(string styleName)

/* Returns an enumerator that iterates through the <xref href="GemBox.Spreadsheet.CellStyleCollection" data-throw-if-not-resolved="false"></xref>. */
public IEnumerator<Style> GetEnumerator()

/* Gets the &apos;<strong>Normal</strong>&apos; style. */
public Style Normal { get; }

/* Gets the number of <xref href="GemBox.Spreadsheet.Style" data-throw-if-not-resolved="false"></xref>s contained in the collection. */
public int Count { get; }

/* <p>Gets the <xref href="GemBox.Spreadsheet.Style" data-throw-if-not-resolved="false"></xref> that corresponds to given name.</p>
<p>If <xref href="GemBox.Spreadsheet.CellStyleCollection" data-throw-if-not-resolved="false"></xref> doesn&apos;t contain correspondent style, then new style will be added and returned.</p> */
public Style this[string styleName] { get; }

/* <p>Gets the <xref href="GemBox.Spreadsheet.Style" data-throw-if-not-resolved="false"></xref> that corresponds to given <xref href="GemBox.Spreadsheet.BuiltInCellStyleName" data-throw-if-not-resolved="false"></xref>.</p>
<p>If <xref href="GemBox.Spreadsheet.CellStyleCollection" data-throw-if-not-resolved="false"></xref> doesn&apos;t contain correspondent style, then new style will be added and returned.</p> */
public Style this[BuiltInCellStyleName styleName] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.ListType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a list type of a bulleted or numbered <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref>. */
public enum ListType
{

/* <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref> is not part of a list and its content is not preceded by any content. */
None = 0

/* <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref> is part of a list and its content is preceded by a bullet character. */
Bullet = 1

/* <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref> is part of a list and its content is preceded by a picture bullet. */
Picture = 2

/* <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref> is part of a list and its content is preceded by a automatically generated number. */
Number = 3
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelWorksheet.yml:
namespace GemBox.Spreadsheet
{

/* Excel worksheet is a table with additional properties, identified by a unique name. */
public sealed class ExcelWorksheet
{

/* Gets the default column width in arbitrary length unit. */
public double GetDefaultColumnWidth(LengthUnit lengthUnit)

/* Sets the default column width in arbitrary length unit. */
public void SetDefaultColumnWidth(double value, LengthUnit lengthUnit)

/* Clears this worksheet. */
public void Clear()

/* Inserts a <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> into the current worksheet. */
public int InsertDataTable(DataTable dataTable)

/* Inserts a <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> into the current worksheet. */
public int InsertDataTable(DataTable dataTable, InsertDataTableOptions options)

/* Extracts data to <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> with specified extract options, see <xref href="GemBox.Spreadsheet.ExtractToDataTableOptions" data-throw-if-not-resolved="false"></xref>. */
public void ExtractToDataTable(DataTable dataTable, ExtractToDataTableOptions options)

/* Calculates formula for every excel cell in this worksheet. */
public void Calculate()

/* Creates a <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> and fills it with data from this <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> in a manner specified by
create options, see <xref href="GemBox.Spreadsheet.CreateDataTableOptions" data-throw-if-not-resolved="false"></xref>. */
public DataTable CreateDataTable(CreateDataTableOptions options)

/* Calculates cell range that is used in the worksheet. */
public CellRange GetUsedCellRange(bool ignoreCellsWithoutValue)

/* Iterates all rows and finds maximum number of used columns. */
public int CalculateMaxUsedColumns()

/* Sets the worksheet background picture. */
public void SetBackgroundPicture(MemoryStream pictureStream, ExcelPictureFormat pictureFormat)

/* Sets the worksheet background picture. */
public void SetBackgroundPicture(string picturePath)

/* Removes the worksheet background picture. */
public void DeleteBackgroundPicture()

/* Gets worksheet type. */
public SheetType Type { get; }

/* Gets worksheet zero-based index. */
public int Index { get; }

/* Gets the worksheet pictures. */
public ExcelPictureCollection Pictures { get; }

/* Gets the worksheet charts. Not supported in XLS. */
public ExcelChartCollection Charts { get; }

/* Gets the worksheet shapes. */
public ExcelShapeCollection Shapes { get; }

/* Gets the worksheet form controls. */
public ExcelFormControlCollection FormControls { get; }

/* Gets the worksheet embedded objects. Supported only in XLSX. */
public ExcelEmbeddedObjectCollection EmbeddedObjects { get; }

/* Gets the worksheet background picture stream. */
public MemoryStream BackgroundPictureStream { get; }

/* Gets the worksheet background picture format. */
public ExcelPictureFormat BackgroundPictureFormat { get; }

/* Gets the collection that expresses all data validation information for cells in a sheet which have data validation features applied. */
public DataValidationCollection DataValidations { get; }

/* Gets <xref href="GemBox.Spreadsheet.NamedRangeCollection" data-throw-if-not-resolved="false"></xref> 
containing descriptive names which are used to represent cells, ranges of cells, 
formulas, or constant values. */
public NamedRangeCollection NamedRanges { get; }

/* Gets hyperlinks in this sheet. */
public SpreadsheetHyperlinkCollection Hyperlinks { get; }

/* Gets comments in this sheet. */
public ExcelCommentCollection Comments { get; }

/* Gets or sets worksheet name. */
public string Name { get; set; }

/* Gets collection of all rows (<xref href="GemBox.Spreadsheet.ExcelRow" data-throw-if-not-resolved="false"></xref>) in the worksheet. */
public ExcelRowCollection Rows { get; }

/* Gets collection of all columns (<xref href="GemBox.Spreadsheet.ExcelColumn" data-throw-if-not-resolved="false"></xref>) in the worksheet. */
public ExcelColumnCollection Columns { get; }

/* Gets all the cells in the sheet. */
public CellRange Cells { get; }

/* <p>Gets or sets the active <xref href="GemBox.Spreadsheet.SortState" data-throw-if-not-resolved="false"></xref>.
Returns <xref uid="langword_csharp_null" name="null" href=""></xref> if no <xref href="GemBox.Spreadsheet.SortState" data-throw-if-not-resolved="false"></xref> is active.</p>
<p><xref href="GemBox.Spreadsheet.SortState" data-throw-if-not-resolved="false"></xref> is used to store sort settings and to apply sort on a range of cells.</p>
<p>Active <xref href="GemBox.Spreadsheet.SortState" data-throw-if-not-resolved="false"></xref> is loaded from and saved to XLSX file.</p> */
public SortState Sort { get; set; }

/* <p>Gets or sets the active <xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref>.
Returns <xref uid="langword_csharp_null" name="null" href=""></xref> if no <xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> is active.</p>
<p><xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> is used to store filter settings and to apply filter on a range of cells.</p>
<p>Active <xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> is loaded from and saved to XLSX file.</p> */
public AutoFilter Filter { get; set; }

/* <p>Gets the conditional formatting rules applied on cell ranges of this sheet.</p>
<p>Currently supported in XLS and XLS only.</p> */
public ConditionalFormatRuleCollection ConditionalFormatting { get; }

/* <p>Gets the ignored errors applied on cell ranges of this sheet.</p> */
public IgnoredErrorCollection IgnoredErrors { get; }

/* Gets or sets the worksheet protection flag. */
public bool Protected { get; set; }

/* Gets or sets worksheet protection properties. This settings will be used only if <xref href="GemBox.Spreadsheet.ExcelWorksheet.Protected" data-throw-if-not-resolved="false"></xref> is set to <xref uid="langword_csharp_true" name="true" href=""></xref>;
Otherwise it will be ignored. */
public WorksheetProtection ProtectionSettings { get; }

/* Gets the protected ranges. Supported in XLSX and XLSB only. */
public ProtectedRangeCollection ProtectedRanges { get; }

/* Gets or sets the worksheet visible property. */
public SheetVisibility Visibility { get; set; }

/* Gets or sets the default column width. */
public int DefaultColumnWidth { get; set; }

/* Gets or sets the default row height in twips (1/20th of a point). Not supported in ODS. */
public int DefaultRowHeight { get; set; }

/* Gets collection of all horizontal page breaks 
(<xref href="GemBox.Spreadsheet.HorizontalPageBreak" data-throw-if-not-resolved="false"></xref>) in the worksheet. */
public HorizontalPageBreakCollection HorizontalPageBreaks { get; }

/* Gets collection of all vertical page breaks 
(<xref href="GemBox.Spreadsheet.VerticalPageBreak" data-throw-if-not-resolved="false"></xref>) in the worksheet. */
public VerticalPageBreakCollection VerticalPageBreaks { get; }

/* Gets the parent <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> of this <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> instance. */
public ExcelFile Parent { get; }

/* <p>Gets or sets the name of the <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> that is bound to this <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>.</p> */
public string CodeName { get; set; }

/* Contains MS Excel print and print related options. */
public ExcelPrintOptions PrintOptions { get; }

/* Contains MS Excel display and view related options. */
public ExcelViewOptions ViewOptions { get; }

/* Gets or sets headers/footers for the sheet. */
public SheetHeaderFooter HeadersFooters { get; set; }

/* Returns true if worksheet has headers/footers. */
public bool HasHeadersFooters { get; }

/* Gets or sets the panes in the worksheet. */
public WorksheetPanes Panes { get; set; }

/* Returns true if worksheet has split or freeze panes. */
public bool HasSplitOrFreezePanes { get; }

/* <p>Gets the selected ranges of cells in the worksheet.</p>
<p>Supported only in XLSX and XLSB.</p> */
public CellRangeCollection SelectedRanges { get; }

/* <p>Gets or sets the worksheet tab color.</p>
<p>Supported only in XLSX, XLSB and HTML.</p> */
public SpreadsheetColor TabColor { get; set; }

/* <p>Gets the collection of all <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref>s contained in this worksheet.</p>
<p>Currently supported in XLSX only.</p> */
public PivotTableCollection PivotTables { get; }

/* Gets the collection of all <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref>s contained in this worksheet. */
public TableCollection Tables { get; }

/* <p>Gets a value indicating whether the worksheet is in filter mode.</p>
<p>Supported only in XLSX and XLSB.</p> */
public bool FilterMode { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.DefinedNameCollection.yml:
namespace GemBox.Spreadsheet
{

/* Collection of defined names that are not directly related with one cell range. */
public sealed class DefinedNameCollection : IEnumerable<DefinedName>, IEnumerable
{

/* Adds a copy of another defined name to collection and return index of the new defined name. */
public int AddCopy(DefinedName source)

/* Adds defined name to collection and returns index of that defined name. */
public int AddDefinedName(string name, string value, int localSheetIndex)

/* Removes the defined name described by name from collection. */
public void RemoveDefinedName(string definedName)

/* Removes the defined name described by index from collection. */
public void RemoveDefinedNameAt(int index)

/* Removes all elements from defined names collection. */
public void Clear()

/* Returns an <xref href="System.Collections.Generic.IEnumerator%601" data-throw-if-not-resolved="false"></xref> for the collection. */
public IEnumerator<DefinedName> GetEnumerator()

/* Returns the number of defined names in collection. */
public int Count { get; }

/* Gets or sets defined name described by index from collection. */
public DefinedName this[int index] { get; set; }

/* Gets defined name described by name from collection. */
public DefinedName this[string definedName] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.XlsxSaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represent options for saving to XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later). */
public sealed class XlsxSaveOptions : SaveOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.XlsxSaveOptions" data-throw-if-not-resolved="false"></xref> class. */
public XlsxSaveOptions()

/* Specifies type of generated file. Set this property only if you want to override default type. */
public XlsxType? Type { get; set; }

/* Gets or sets the password used to protect / encrypt the workbook. */
public string Password { get; set; }

/* Gets or sets a value indicating whether to use ZIP64 extensions when saving an XLSX file. */
public bool EnableZip64 { get; set; }

/* Gets the digital signature options. */
public IList<XlsxDigitalSignatureSaveOptions> DigitalSignatures { get; }

/* Gets limitations for saving to XLSX file format. */
public override FileFormatLimitations Limitations { get; }

/* Gets or sets the saved images DPI. */
public int ImageDpi { get; set; }

/* Gets the content-type for XLSX file format:
<ul><li><strong>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</strong> if <xref href="GemBox.Spreadsheet.XlsxSaveOptions.Type" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.XlsxType.Xlsx" data-throw-if-not-resolved="false"></xref>,</li><li><strong>application/vnd.ms-excel.sheet.macroenabled.12</strong> if <xref href="GemBox.Spreadsheet.XlsxSaveOptions.Type" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.XlsxType.Xlsm" data-throw-if-not-resolved="false"></xref>,</li><li><strong>application/vnd.openxmlformats-officedocument.spreadsheetml.template</strong> if <xref href="GemBox.Spreadsheet.XlsxSaveOptions.Type" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.XlsxType.Xltx" data-throw-if-not-resolved="false"></xref>,</li><li><strong>application/vnd.ms-excel.template.macroenabled.12</strong> if <xref href="GemBox.Spreadsheet.XlsxSaveOptions.Type" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.XlsxType.Xltm" data-throw-if-not-resolved="false"></xref>.</li></ul> */
public override string ContentType { get; }

/* Occurs when the saving progress of a file has changed. */
public event EventHandler<OperationProgressChangedEventArgs> ProgressChanged
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelFile.yml:
namespace GemBox.Spreadsheet
{

/* Excel file contains one or more worksheets (<xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>)
and workbook related properties and methods. */
public sealed class ExcelFile : IDocumentPaginatorSource
{

/* Initializes an empty (no worksheets) instance of the ExcelFile class. */
public ExcelFile()

/* Gets a value indicating whether the objects of specified type can be assigned 
to <xref href="GemBox.Spreadsheet.ExcelCell.Value" data-throw-if-not-resolved="false"></xref> property. */
public static bool SupportsType(Type type)

/* Makes a deep clone of this <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> instance. */
public ExcelFile Clone()

/* Autodetects CSV separator. If there&apos;s no separators in the input stream returns (char)0. */
public static char AutoDetectCsvSeparator(Stream stream)

/* Autodetects CSV separator. If there&apos;s no separators in the input stream returns (char)0. */
public static char AutoDetectCsvSeparator(StreamReader sr, int rowsToTest, char[] possibleSeparators)

/* Calculates formula for every excel cell in all worksheets. */
public void Calculate()

/* Loads a spreadsheet from a file with the specified path. */
public static ExcelFile Load(string path)

/* Loads a spreadsheet from a file with the specified path. */
public static ExcelFile Load(string path, LoadOptions options)

/* Loads a spreadsheet from the specified stream. This method tries to dynamically determine the file format.
If you know the file format, it is more reliable and faster to use <xref href="GemBox.Spreadsheet.ExcelFile.Load(System.IO.Stream%2cGemBox.Spreadsheet.LoadOptions)" data-throw-if-not-resolved="false"></xref> method. */
public static ExcelFile Load(Stream stream)

/* Loads a spreadsheet from the specified stream. */
public static ExcelFile Load(Stream stream, LoadOptions options)

/* Loads a spreadsheet from CSV data using the specified reader. */
public static ExcelFile Load(TextReader reader, CsvLoadOptions options)

/* Saves the spreadsheet to a file with the specified path. */
[ComVisible(true)]
public void Save(string path)

/* Saves the spreadsheet to a file with the specified path. */
[ComVisible(false)]
public void Save(string path, SaveOptions options)

/* Saves the spreadsheet to the specified stream. */
[ComVisible(false)]
public void Save(Stream stream, SaveOptions options)

/* Save the spreadsheet to CSV format using the specified writer. */
[ComVisible(false)]
public void Save(TextWriter writer, CsvSaveOptions options)

/* Save the spreadsheet to HTML format using the specified writer. */
[ComVisible(false)]
public void Save(XmlWriter writer, HtmlSaveOptions options)

/* Saves the spreadsheet to a System.Web.HttpResponse or System.Web.HttpResponseBase output stream or a System.Net.Http.HttpResponseMessage and sets appropriate HTTP response headers (Content-Type and Content-Disposition). Use this method in ASP.NET application to send the spreadsheet to a client browser. File format is resolved from <code data-dev-comment-type="paramref" class="paramref">fileName</code> extension. See remarks why <code data-dev-comment-type="paramref" class="paramref">httpResponse</code> parameter is of type <xref href="System.Object" data-throw-if-not-resolved="false"></xref>. */
[ComVisible(false)]
public void Save(object httpResponse, string fileName)

/* Saves the spreadsheet to a System.Web.HttpResponse or System.Web.HttpResponseBase output stream or a System.Net.Http.HttpResponseMessage and sets appropriate HTTP response headers (Content-Type and Content-Disposition). Use this method in ASP.NET application to send the spreadsheet to a client browser. File format is defined with <code data-dev-comment-type="paramref" class="paramref">options</code> parameter. See remarks why <code data-dev-comment-type="paramref" class="paramref">httpResponse</code> parameter is of type <xref href="System.Object" data-throw-if-not-resolved="false"></xref>. */
[ComVisible(false)]
public void Save(object httpResponse, string fileName, SaveOptions options)

/* Converts this <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> instance to an <xref href="System.Windows.Xps.Packaging.XpsDocument" data-throw-if-not-resolved="false"></xref> instance. */
public XpsDocument ConvertToXpsDocument(XpsSaveOptions options)

/* Converts single page specified in <code data-dev-comment-type="paramref" class="paramref">options</code> of this <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> instance to an <xref href="System.Windows.Media.ImageSource" data-throw-if-not-resolved="false"></xref> instance. */
public ImageSource ConvertToImageSource(ImageSaveOptions options)

/* Prints the document to the default printer. */
public void Print()

/* Prints the document to the specified printer. */
public void Print(string printerName)

/* Prints the document to the specified printer according to specified options. */
public void Print(string printerName, PrintOptions options)

/* Gets the workbook paginator. */
public ExcelFilePaginator GetPaginator()

/* Gets the workbook paginator based on the specified <code data-dev-comment-type="paramref" class="paramref">options</code>. */
public ExcelFilePaginator GetPaginator(PaginatorOptions options)

/* <p>Gets or sets the maximum digit width of the numbers 0, 1, 2, ..., 9 as rendered in the <xref href="GemBox.Spreadsheet.CellStyleCollection.Normal" data-throw-if-not-resolved="false"></xref> style&apos;s font.</p>
<p>The <xref href="GemBox.Spreadsheet.ExcelFile.MaximumDigitWidth" data-throw-if-not-resolved="false"></xref> is critically important for getting and setting <a href="https://docs.microsoft.com/en-us/dotnet/api/documentformat.openxml.spreadsheet.column">column widths</a>.</p>
<p>You should set the <xref href="GemBox.Spreadsheet.ExcelFile.MaximumDigitWidth" data-throw-if-not-resolved="false"></xref> to zero, so it gets automatically reinitialized upon next retreival, if any of the following is changed:</p>
<ul><li>The <xref href="GemBox.Spreadsheet.FontSettings.FontsBaseUri" data-throw-if-not-resolved="false"></xref>.</li><li>The <xref href="GemBox.Spreadsheet.ExcelViewOptions.Dpi" data-throw-if-not-resolved="false"></xref>.</li><li>The <xref href="GemBox.Spreadsheet.CellStyleCollection.Normal" data-throw-if-not-resolved="false"></xref> style&apos;s font.</li></ul>
<p>The automatically initialized value might differ from MS Excel&apos;s value (usually by 1 pixel). In that case you can override the automatically initialized value by manually setting a value.</p> */
public int MaximumDigitWidth { get; set; }

/* Gets or sets a value indicating whether the formula address references are automatically updated. */
public bool AutomaticFormulaUpdate { get; set; }

/* Gets workbook protection properties. 
Supported in XLSX only. */
public WorkbookProtection ProtectionSettings { get; }

/* Collection of all worksheets (<xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>) in a workbook. */
public ExcelWorksheetCollection Worksheets { get; }

/* <p>Represents the <xref href="GemBox.Spreadsheet.Vba.VbaProject" data-throw-if-not-resolved="false"></xref> contained in the <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref>.</p>
<p>If the <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> does not have <xref href="GemBox.Spreadsheet.Vba.VbaProject" data-throw-if-not-resolved="false"></xref> contained, it will be created on accessing this property.</p> */
public VbaProject VbaProject { get; }

/* <p>Gets or sets the name of the <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> that is bound to this <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref>.</p> */
public string CodeName { get; set; }

/* Gets or sets the workbook protection flag. */
public bool Protected { get; set; }

/* Maximum number of affected cells in group set methods. */
public int GroupMethodsAffectedCellsLimit { get; set; }

/* Gets or sets whether 1904 date system is used. */
public bool Use1904DateSystem { get; set; }

/* Gets <xref href="GemBox.Spreadsheet.ExcelFile.DocumentProperties" data-throw-if-not-resolved="false"></xref> of this <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref>. */
public DocumentProperties DocumentProperties { get; }

/* Gets the collection of defined names that are not directly related with one cell range.
Supported only in XLSX, XLSB, XLS and XML. */
public DefinedNameCollection DefinedNames { get; }

/* <p>Gets the collection of <xref href="GemBox.Spreadsheet.PivotTables.PivotCache" data-throw-if-not-resolved="false"></xref>s defined in this <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> instance.</p>
<p>Currently supported in XLSX only.</p> */
public PivotCacheCollection PivotCaches { get; }

/* Gets the collection of workbook (master) <xref href="GemBox.Spreadsheet.Style" data-throw-if-not-resolved="false"></xref>s defined for this <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> instance. */
public CellStyleCollection Styles { get; }

/* Gets the calculation engine options. */
public CalculationOptions CalculationOptions { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CalculationEngine.SpreadsheetCalculationException.yml:
namespace GemBox.Spreadsheet.CalculationEngine
{

/* Represents errors that can occur in GemBox.Spreadsheet formula calculation process. */
public sealed class SpreadsheetCalculationException : SpreadsheetException, ISerializable, _Exception
{

/* Gets the string value for provided calculation error type. */
public static string GetErrorValue(SpreadsheetCalculationError error)

/* Adds additional exception data to the <xref href="System.Runtime.Serialization.SerializationInfo" data-throw-if-not-resolved="false"></xref>. */
[SecurityCritical]
public override void GetObjectData(SerializationInfo info, StreamingContext context)

/* Gets the calculation error type. */
public SpreadsheetCalculationError Error { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.VerticalAlignment.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents an enumeration of available vertical alignments for text. */
public enum VerticalAlignment
{

/* Align the text to the top of the bounding rectangle. */
Top = 0

/* Align the text to the middle of the bounding rectangle. */
Middle = 1

/* Align the text to the bottom of the bounding rectangle. */
Bottom = 2

/* <p>Anchor the text so that it is justified vertically.</p>
<p>When text is horizontal, this spaces out the actual lines of text and is almost always identical in behavior to <xref href="GemBox.Spreadsheet.Drawing.VerticalAlignment.Distributed" data-throw-if-not-resolved="false"></xref> (special case: if only 1 line, then aligned to <xref href="GemBox.Spreadsheet.Drawing.VerticalAlignment.Top" data-throw-if-not-resolved="false"></xref>).</p>
<p>When text is vertical, then it justifies the letters vertically. This is different than <xref href="GemBox.Spreadsheet.Drawing.VerticalAlignment.Distributed" data-throw-if-not-resolved="false"></xref>, because in some cases such as very little text in a line, it does not justify.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.VerticalAlignment.Middle" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
Justify = 3

/* <p>Align the text so that it is distributed vertically.</p>
<p>When text is horizontal, this spaces out the actual lines of text and is almost always identical in behavior to <xref href="GemBox.Spreadsheet.Drawing.VerticalAlignment.Justify" data-throw-if-not-resolved="false"></xref> (special case: if only 1 line, then aligned to <xref href="GemBox.Spreadsheet.Drawing.VerticalAlignment.Middle" data-throw-if-not-resolved="false"></xref>).</p>
<p>When text is vertical, then it distributes the letters vertically. This is different than <xref href="GemBox.Spreadsheet.Drawing.VerticalAlignment.Justify" data-throw-if-not-resolved="false"></xref>, because it always forces distribution of the words, even if there are only one or two words in a line.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.VerticalAlignment.Middle" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
Distributed = 4
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SortLevelCollection.yml:
namespace GemBox.Spreadsheet
{

/* Represents a collection of sort levels. */
public sealed class SortLevelCollection : IEnumerable<SortLevel>, IEnumerable
{

/* Gets the sort level applied to a column (or a row, if <xref href="GemBox.Spreadsheet.SortState.LeftToRight" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>) with the specified index (relative to the <xref href="GemBox.Spreadsheet.SortState.Range" data-throw-if-not-resolved="false"></xref>) or <xref uid="langword_csharp_null" name="null" href=""></xref> if such sort level doesn&apos;t exist. */
public SortLevel Get(int columnRowIndex)

/* Inserts a new <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> applied to a column (or a row, if <xref href="GemBox.Spreadsheet.SortState.LeftToRight" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>) with the specified index into the <xref href="GemBox.Spreadsheet.SortLevelCollection" data-throw-if-not-resolved="false"></xref> at the specified index. */
public SortLevel Insert(int index, int columnRowIndex)

/* Adds a new <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> applied to a column (or a row, if <xref href="GemBox.Spreadsheet.SortState.LeftToRight" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>) with the specified index into the <xref href="GemBox.Spreadsheet.SortLevelCollection" data-throw-if-not-resolved="false"></xref>. */
public SortLevel Add(int columnRowIndex)

/* Removes the specific <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> from the <xref href="GemBox.Spreadsheet.SortLevelCollection" data-throw-if-not-resolved="false"></xref>. */
public bool Remove(SortLevel sortLevel)

/* Removes a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> applied to a column (or a row, if <xref href="GemBox.Spreadsheet.SortState.LeftToRight" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>) with the specified index from the <xref href="GemBox.Spreadsheet.SortLevelCollection" data-throw-if-not-resolved="false"></xref>. */
public bool Remove(int columnRowIndex)

/* Removes the <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> at the specified index of the <xref href="GemBox.Spreadsheet.SortLevelCollection" data-throw-if-not-resolved="false"></xref>. */
public void RemoveAt(int index)

/* Moves the <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> at the specified index to a new location in the <xref href="GemBox.Spreadsheet.SortLevelCollection" data-throw-if-not-resolved="false"></xref>. */
public void Move(int oldIndex, int newIndex)

/* Removes all <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref>s from the <xref href="GemBox.Spreadsheet.SortLevelCollection" data-throw-if-not-resolved="false"></xref>. */
public void Clear()

/* Returns an enumerator that iterates through the sort levels. */
public IEnumerator<SortLevel> GetEnumerator()

/* Gets the number of sort levels actually contained in the <xref href="GemBox.Spreadsheet.SortLevelCollection" data-throw-if-not-resolved="false"></xref>. */
public int Count { get; }

/* Gets the <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> at the specified index. */
public SortLevel this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ScatterChartSeries.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a single <xref href="GemBox.Spreadsheet.Charts.ScatterChart" data-throw-if-not-resolved="false"></xref> series. */
public sealed class ScatterChartSeries : MarkerChartSeries, IChartObject, IChartDataLabelsDataProvider, IColorContext
{

/* Sets the scatter chart series x values. */
public void SetXValues(IEnumerable values)

/* Sets the scatter chart series x values. */
public void SetXValues(params object[] values)

/* Gets or sets the fill formating options. */
public override FillFormat Fill { get; set; }

/* Gets or sets the scatter chart series x values as a cell range reference (for example, &apos;Sheet1!A1:D1&apos;). Values from cells in the referenced range will be used as x values of this series. */
public string XValuesReference { get; set; }

/* Gets the scatter chart series x values. */
public IEnumerable XValues { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CsvType.yml:
namespace GemBox.Spreadsheet
{

/* Formatting type for CSV files. */
public enum CsvType
{

/* Comma delimited CSV (most frequently used). */
CommaDelimited = 0

/* Semicolon delimited CSV (used by Excel if current culture specifies comma as decimal separator). */
SemicolonDelimited = 1

/* Tab delimited CSV. */
TabDelimited = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ScatterChart.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a chart whose series values are drawn using horizontal rectangles. */
public sealed class ScatterChart : ExcelChart, IDocumentPaginatorSource, IChartTitleParent, IChartObject, IChartDataLabelsDataProvider, IColorContext
{

/* Scatter chart doesn&apos;t support category labels. Please use <xref href="GemBox.Spreadsheet.Charts.ScatterChartSeries" data-throw-if-not-resolved="false"></xref> to set x or y values. */
public override void SetCategoryLabels(IEnumerable<string> categoryLabels)

/* Gets the chart&apos;s series. */
public ScatterChartSeriesCollection Series { get; }

/* Gets or sets a value indicating whether the series lines will be smooth or straight. */
public bool SmoothLines { get; set; }

/* Gets the chart type for <xref href="GemBox.Spreadsheet.Charts.ScatterChart" data-throw-if-not-resolved="false"></xref> which is <xref href="GemBox.Spreadsheet.Charts.ChartType.Scatter" data-throw-if-not-resolved="false"></xref>. */
public override ChartType ChartType { get; }

/* Gets the chart axes. */
public ChartAxes Axes { get; }

/* <p>Gets or sets a value indicating whether markers will be shown on series points.</p>
<p>Value is resolved from the series. If any series has a marker than all newly added series will also have a marker.</p>
<p>When setting a value, value is propagated to all series.</p> */
public bool ShowMarkers { get; set; }

/* Gets the chart&apos;s category labels. */
public override IEnumerable<string> CategoryLabels { get; }

/* Scatter chart doesn&apos;t support category labels. Please use <xref href="GemBox.Spreadsheet.Charts.ScatterChartSeries" data-throw-if-not-resolved="false"></xref> to set x or y values. */
public override string CategoryLabelsReference { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextDirection.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents an enumeration of available text directions. */
public enum TextDirection
{

/* Horizontal text. */
Horizontal = 0

/* Text is vertical orientation (each line is 90 degrees rotated clockwise, so it goes from top to bottom; each next line is to the left from the previous one). */
Rotate90 = 1

/* Text is vertical orientation (each line is 270 degrees rotated clockwise, so it goes from bottom to top; each next line is to the right from the previous one). */
Rotate270 = 2

/* <p>Text is vertical (one letter on top of another).</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.TextDirection.Rotate90" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
Stacked = 3

/* <p>Text is vertical (one letter on top of another) as for <xref href="GemBox.Spreadsheet.Drawing.TextDirection.Stacked" data-throw-if-not-resolved="false"></xref> but should be shown from right to left rather than left to right.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.TextDirection.Rotate90" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
StackedRightToLeft = 4

/* <p>A special version of <xref href="GemBox.Spreadsheet.Drawing.TextDirection.Rotate90" data-throw-if-not-resolved="false"></xref>, where some fonts are displayed as if rotated by 90 degrees while some fonts (mostly East Asian) are displayed vertical.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.TextDirection.Rotate90" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
Rotate90EastAsian = 5

/* <p>A special version of <xref href="GemBox.Spreadsheet.Drawing.TextDirection.Rotate90" data-throw-if-not-resolved="false"></xref>, where some fonts are displayed as if rotated by 90 degrees while some fonts (mostly East Asian) are displayed vertical.
The difference between this and the <xref href="GemBox.Spreadsheet.Drawing.TextDirection.Rotate90EastAsian" data-throw-if-not-resolved="false"></xref> is the text flows top down then LEFT RIGHT, instead of RIGHT LEFT.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.TextDirection.Rotate90" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
Rotate90Mongolian = 6
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.XlsbLoadOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represent options for loading from XLSB file format (Microsoft Excel Binary File Format). */
public sealed class XlsbLoadOptions : LoadOptions
{

/* Determines whether the file is an encrypted XLSB. */
public static bool IsEncrypted(string path)

/* Determines whether the file is an encrypted XLSB. */
public static bool IsEncrypted(Stream stream)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.XlsbLoadOptions" data-throw-if-not-resolved="false"></xref> class. */
public XlsbLoadOptions()

/* Gets or sets a value indicating whether to preserve XLSB file format features that are not directly supported through GemBox.Spreadsheet object model. */
public bool PreserveUnsupportedFeatures { get; set; }

/* Gets or sets the password to open protected / encrypted workbook. */
public string Password { get; set; }

/* <p>Gets or sets the streaming mode that allows streamlined reading of <xref href="GemBox.Spreadsheet.ExcelRow" data-throw-if-not-resolved="false"></xref>s of each <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> of a loaded <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value: <xref href="GemBox.Spreadsheet.LoadStreamingMode.None" data-throw-if-not-resolved="false"></xref>.</p> */
public LoadStreamingMode StreamingMode { get; set; }

/* Occurs when the loading progress of a file has changed. */
public event EventHandler<OperationProgressChangedEventArgs> ProgressChanged
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelShapeCollection.yml:
namespace GemBox.Spreadsheet
{

/* Represents a collection of <xref href="GemBox.Spreadsheet.ExcelShape" data-throw-if-not-resolved="false"></xref>s in the worksheet. */
public class ExcelShapeCollection : ExcelDrawingCollection<ExcelShape>, IExcelDrawingCollection, IList<ExcelShape>, ICollection<ExcelShape>, IEnumerable<ExcelShape>, IEnumerable
{

/* Adds a new shape to the worksheet which doesn&apos;t move nor sizes with cells. */
public ExcelShape Add(ShapeType shapeType, double left, double top, double width, double height, LengthUnit unit)

/* Adds a new shape to the worksheet which moves but doesn&apos;t size with cells. */
public ExcelShape Add(ShapeType shapeType, AnchorCell positionFrom, double width, double height, LengthUnit unit)

/* Adds a new shape to the worksheet which moves but doesn&apos;t size with cells. */
public ExcelShape Add(ShapeType shapeType, string positionFromCell, double width, double height, LengthUnit unit)

/* Adds a new shape to the worksheet which moves and sizes with cells. */
public ExcelShape Add(ShapeType shapeType, AnchorCell positionFrom, AnchorCell positionTo)

/* Adds a new shape to the worksheet which moves and sizes with cells. */
public ExcelShape Add(ShapeType shapeType, string positionFromCell, string positionToCell)
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.WorksheetSource.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a worksheet source of <xref href="GemBox.Spreadsheet.PivotTables.PivotCache" data-throw-if-not-resolved="false"></xref> data. */
public sealed class WorksheetSource : PivotCacheSource
{

/* Gets the <xref href="GemBox.Spreadsheet.PivotTables.PivotCacheSourceType.Worksheet" data-throw-if-not-resolved="false"></xref> value. */
public override PivotCacheSourceType SourceType { get; }

/* Gets the cell range that is the source of the data. */
public AbstractRange CellRange { get; }

/* Gets the named range that is the source of the data. */
public string NamedRange { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.HeaderFooterStyle.yml:
namespace GemBox.Spreadsheet
{

/* Header footer styles that are not natively supported by spreadsheet formats. */
public sealed class HeaderFooterStyle
{

/* <p>Gets the borders.</p> */
public CellBorders Borders { get; }

/* <p>Gets or sets the background color.</p> */
public SpreadsheetColor BackgroundColor { get; set; }

/* <p>Gets or sets the alignment for the left section.</p> */
public HeaderFooterAlignment LeftSectionAlignment { get; set; }

/* <p>Gets or sets the alignment for the center section.</p> */
public HeaderFooterAlignment CenterSectionAlignment { get; set; }

/* <p>Gets or sets the alignment for the right section.</p> */
public HeaderFooterAlignment RightSectionAlignment { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FixedWidthSaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for saving to Fixed-Width Text file format. */
public sealed class FixedWidthSaveOptions : SaveOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.FixedWidthSaveOptions" data-throw-if-not-resolved="false"></xref> class. */
public FixedWidthSaveOptions(IEnumerable<FixedWidthColumn> columns)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.FixedWidthSaveOptions" data-throw-if-not-resolved="false"></xref> class. */
public FixedWidthSaveOptions(params FixedWidthColumn[] columns)

/* Gets limitations for saving to Fixed-Width Text file format. */
public override FileFormatLimitations Limitations { get; }

/* Gets the content-type for Fixed-Width Text file format: <strong>&quot;text/plain; charset=&quot; + <xref href="GemBox.Spreadsheet.FixedWidthSaveOptions.Encoding" data-throw-if-not-resolved="false"></xref>.<xref href="System.Text.Encoding.WebName" data-throw-if-not-resolved="false"></xref></strong>. */
public override string ContentType { get; }

/* Gets the List of column definitions for saving data. */
public IList<FixedWidthColumn> Columns { get; }

/* Gets or sets the index of the first row of data being saved to Fixed-Width Text file. */
public int StartRow { get; set; }

/* Gets or sets the format provider for the Fixed-Width Text file. */
public IFormatProvider FormatProvider { get; set; }

/* Gets or sets the encoding for the Fixed-Width Text file. */
public Encoding Encoding { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.LineCapType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents values that specify how to cap the ends of lines. */
public enum LineCapType
{

/* Square protrudes by half line width. */
Square = 0

/* Rounded ends. Semi-circle protrudes by half line width. */
Round = 1

/* Line ends at end point. */
Flat = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.DrawingUnderlineStyle.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a text underline style. */
public enum DrawingUnderlineStyle
{

/* Do not underline the text. */
None = 0

/* Underline the text with a single line of normal thickness. */
Single = 1

/* Underline the text with two lines of normal thickness. */
Double = 2

/* <p>Underline the text with a single, thick line.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.DrawingUnderlineStyle.Single" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
Heavy = 3

/* Underline the text with a single, dotted line of normal thickness. */
Dotted = 4

/* <p>Underline the text with a single, thick, dotted line.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.DrawingUnderlineStyle.Dotted" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
DottedHeavy = 5

/* Underline the text with a single, dashed line of normal thickness. */
Dash = 6

/* <p>Underline the text with a single, dashed, thick line.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.DrawingUnderlineStyle.Dash" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
DashHeavy = 7

/* <p>Underline the text with a single line consisting of long dashes of normal thickness.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.DrawingUnderlineStyle.Dash" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
DashLong = 8

/* <p>Underline the text with a single line consisting of long, thick dashes.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.DrawingUnderlineStyle.Dash" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
DashLongHeavy = 9

/* Underline the text with a single line of normal thickness consisting of repeating dots and dashes. */
DotDash = 10

/* <p>Underline the text with a single, thick line consisting of repeating dots and dashes.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.DrawingUnderlineStyle.DotDash" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
DotDashHeavy = 11

/* Underline the text with a single line of normal thickness consisting of repeating two dots and dashes. */
DotDotDash = 12

/* <p>Underline the text with a single, thick line consisting of repeating two dots and dashes.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.DrawingUnderlineStyle.DotDotDash" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
DotDotDashHeavy = 13

/* <p>Underline the text with a single wavy line of normal thickness.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.DrawingUnderlineStyle.Single" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
Wavy = 14

/* <p>Underline the text with a single, thick wavy line.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.DrawingUnderlineStyle.Single" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
WavyHeavy = 15

/* <p>Underline the text with two wavy lines of normal thickness.</p>
<p>This value is currently not supported in PDF, XPS and image formats and <xref href="GemBox.Spreadsheet.Drawing.DrawingUnderlineStyle.Double" data-throw-if-not-resolved="false"></xref> value is exported instead.</p> */
WavyDouble = 16

/* Underline just the words and not the spaces between them. */
Words = 17
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextElementCollection.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a collection of <xref href="GemBox.Spreadsheet.Drawing.TextElement" data-throw-if-not-resolved="false"></xref>s. */
public class TextElementCollection : IEnumerable<TextElement>, IEnumerable
{

/* Adds a new run of text to the paragraph. */
public TextRun AddRun(string text)

/* Adds a new line break to the paragraph. */
public TextLineBreak AddLineBreak()

/* Removes the first occurrence of a specific <xref href="GemBox.Spreadsheet.Drawing.TextElement" data-throw-if-not-resolved="false"></xref> from the collection. */
public bool Remove(TextElement item)

/* Removes the <xref href="GemBox.Spreadsheet.Drawing.TextElement" data-throw-if-not-resolved="false"></xref> at the specified index of the collection. */
public void RemoveAt(int index)

/* Determines whether a <xref href="GemBox.Spreadsheet.Drawing.TextElement" data-throw-if-not-resolved="false"></xref> is in the collection. */
public bool Contains(TextElement item)

/* Searches for the specified <xref href="GemBox.Spreadsheet.Drawing.TextElement" data-throw-if-not-resolved="false"></xref> and returns the zero-based index of the first occurrence within the entire collection. */
public int IndexOf(TextElement item)

/* Removes all <xref href="GemBox.Spreadsheet.Drawing.TextElement" data-throw-if-not-resolved="false"></xref>s from the collection. */
public void Clear()

/* Returns an enumerator that iterates through the <xref href="GemBox.Spreadsheet.Drawing.TextElementCollection" data-throw-if-not-resolved="false"></xref>. */
public IEnumerator<TextElement> GetEnumerator()

/* Gets or sets the <xref href="GemBox.Spreadsheet.Drawing.TextElement" data-throw-if-not-resolved="false"></xref> at the specified index. */
public TextElement this[int index] { get; }

/* Gets the number of <xref href="GemBox.Spreadsheet.Drawing.TextElement" data-throw-if-not-resolved="false"></xref>s contained in the collection. */
public int Count { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CsvSaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for saving to Character Separated Values file format. */
public sealed class CsvSaveOptions : SaveOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.CsvSaveOptions" data-throw-if-not-resolved="false"></xref> class. */
public CsvSaveOptions(CsvType csvType)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.CsvSaveOptions" data-throw-if-not-resolved="false"></xref> class. */
public CsvSaveOptions(char separator)

/* Gets or sets a value indicating in which conditions values in a CSV file should be quoted. Default value is <xref href="GemBox.Spreadsheet.CsvQuoteMode.Default" data-throw-if-not-resolved="false"></xref>. */
public CsvQuoteMode QuoteMode { get; set; }

/* Gets or sets a value indicating whether values in CSV file will be formatted using <xref href="GemBox.Spreadsheet.CellStyle.NumberFormat" data-throw-if-not-resolved="false"></xref>. Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>. */
public bool UseFormattedValues { get; set; }

/* Gets limitations for saving to CSV file format. */
public override FileFormatLimitations Limitations { get; }

/* Gets the content-type for CSV file format:
<ul><li><strong>&quot;text/tab-separated-values; charset=&quot; + <xref href="GemBox.Spreadsheet.CsvSaveOptions.Encoding" data-throw-if-not-resolved="false"></xref>.<xref href="System.Text.Encoding.WebName" data-throw-if-not-resolved="false"></xref></strong> if <xref href="GemBox.Spreadsheet.CsvSaveOptions.Type" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.CsvType.TabDelimited" data-throw-if-not-resolved="false"></xref>, otherwise</li><li><strong>&quot;text/csv; charset=&quot; + <xref href="GemBox.Spreadsheet.CsvSaveOptions.Encoding" data-throw-if-not-resolved="false"></xref>.<xref href="System.Text.Encoding.WebName" data-throw-if-not-resolved="false"></xref></strong>.</li></ul> */
public override string ContentType { get; }

/* Gets or sets character that serves as value delimiter. */
public char Separator { get; set; }

/* Gets or sets value delimiter type, see <xref href="GemBox.Spreadsheet.CsvType" data-throw-if-not-resolved="false"></xref>. */
public CsvType? Type { get; set; }

/* Gets or sets the format provider for the CSV file. */
public IFormatProvider FormatProvider { get; set; }

/* Gets or sets the encoding for the CSV file. */
public Encoding Encoding { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelFilePage.yml:
namespace GemBox.Spreadsheet
{

/* Represents a workbook page. */
public sealed class ExcelFilePage
{

/* Saves the workbook page in the specified stream. */
public void Save(Stream stream, SaveOptions options)

/* Saves the workbook page to a file with the specified path. */
public void Save(string path, SaveOptions options)

/* Saves the workbook page to a file with the specified path. Path must include file extension. */
public void Save(string path)

/* Gets the page width in <xref href="GemBox.Spreadsheet.LengthUnit.Point" data-throw-if-not-resolved="false"></xref>s. */
public double Width { get; }

/* Gets the page height in <xref href="GemBox.Spreadsheet.LengthUnit.Point" data-throw-if-not-resolved="false"></xref>s. */
public double Height { get; }

/* Gets the content of the page. */
public FrameworkElement PageContent { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CalculationEngine.SpreadsheetParserException.yml:
namespace GemBox.Spreadsheet.CalculationEngine
{

/* Represents exception that can occur in GemBox.Spreadsheet formula parsing process. */
public sealed class SpreadsheetParserException : SpreadsheetException, ISerializable, _Exception
{

/* Adds additional exception data to the <xref href="System.Runtime.Serialization.SerializationInfo" data-throw-if-not-resolved="false"></xref>. */
[SecurityCritical]
public override void GetObjectData(SerializationInfo info, StreamingContext context)

/* Gets the name of the <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public string WorksheetName { get; }

/* Gets the name of the <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref>. */
public string CellName { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CsvQuoteMode.yml:
namespace GemBox.Spreadsheet
{

/* Possible conditions for when values in a CSV file should be quoted. */
public enum CsvQuoteMode
{

/* Only cells with the selected delimiter, quotation marks, or newline characters in its value will be quoted. */
Default = 0

/* All cells will be quoted regardless of value. */
Always = 1

/* Only cells with text values will be quoted. */
OnlyText = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextFormat.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a group of text formatting options. */
public sealed class TextFormat
{

/* Gets or sets the font to be used on characters within the text. */
public string Font { get; set; }

/* <p>Gets or sets a value indicating whether the text is formatted as bold.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool Bold { get; set; }

/* <p>Gets or sets a value indicating whether the text is formatted as italic.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool Italic { get; set; }

/* Gets or sets the text size. */
public Length Size { get; set; }

/* <p>Gets or sets the text underline style.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.Drawing.DrawingUnderlineStyle.None" data-throw-if-not-resolved="false"></xref>.</p> */
public DrawingUnderlineStyle UnderlineStyle { get; set; }

/* <p>Gets or sets the text strikethrough.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.Drawing.StrikethroughType.None" data-throw-if-not-resolved="false"></xref>.</p> */
public StrikethroughType Strikethrough { get; set; }

/* <p>Gets or sets the offset for both the superscript and subscript fonts. Positive value indicates superscript and negative value indicates subscript.
The size is specified using a percentage where 0.01 is equal to 1 percent of the font size and 1 is equal to 100 percent font of the font size.</p>
<p>Default value is 0.</p>
<p>This member is currently partially supported in PDF, XPS and image formats. All positive values are exported in the same superscript position and all negative values are exported in the same subscript position.</p> */
public double Offset { get; set; }

/* <p>Gets or sets the capitalization that is to be applied to the text.
This is a render-only modification and does not affect the actual characters stored in the text.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.Drawing.CapsType.None" data-throw-if-not-resolved="false"></xref>.</p> */
public CapsType Caps { get; set; }

/* <p>Gets or sets the normalization of height that is to be applied to the text.
This is a render-only modification and does not affect the actual characters stored in the text.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p>
<p>This member is currently not supported in PDF, XPS and image formats.</p> */
public bool EqualizeCharacterHeight { get; set; }

/* <p>Gets or sets the spacing between characters within the text.
Positive value indicates expanded (loose) spacing and negative value indicates condensed (tight) spacing.</p>
<p>Default value is 0.</p>
<p>This member is currently not supported in PDF, XPS and image formats.</p> */
public Length Spacing { get; set; }

/* <p>Gets or sets the minimum font size at which character kerning occurs.</p>
<p>This member is currently not supported in PDF, XPS and image formats.</p> */
public Length Kerning { get; set; }

/* Gets or sets the fill. */
public FillFormat Fill { get; set; }

/* Gets or sets the outline. */
public LineFormat Outline { get; set; }

/* Gets or sets the underline fill. */
public FillFormat UnderlineFill { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FixedWidthColumn.yml:
namespace GemBox.Spreadsheet
{

/* Class that represents column in Fixed-Width Text format. */
public sealed class FixedWidthColumn
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.FixedWidthColumn" data-throw-if-not-resolved="false"></xref> class. */
public FixedWidthColumn(int width)

/* Gets or sets the converter for converting value from file to <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref> value when loading from Fixed-Width Text file. */
public Converter<string, object> LoadConverter { get; set; }

/* Gets or sets the converter for converting <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref> value to text when saving to Fixed-Width Text file. */
public Converter<object, string> SaveConverter { get; set; }

/* Gets or sets a value that represents column width. */
public int Width { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.DateTimeGroupLevel.yml:
namespace GemBox.Spreadsheet
{

/* Represents a level of a <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref>. */
public enum DateTimeGroupLevel
{

/* The second level. */
Second = 0

/* The minute level. */
Minute = 1

/* The hour level. */
Hour = 2

/* The day level. */
Day = 3

/* The month level. */
Month = 4

/* The year level. */
Year = 5
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelViewOptions.yml:
namespace GemBox.Spreadsheet
{

/* Stores MS Excel display and view related options. */
public sealed class ExcelViewOptions
{

/* Gets or sets the DPI (dots or pixels per inch) at which the workbook should be rendered. */
public static double Dpi { get; set; }

/* Index of the first visible row in the worksheet. */
public int FirstVisibleRow { get; set; }

/* Index of the first visible column in the worksheet. */
public int FirstVisibleColumn { get; set; }

/* Gets and sets the view type. */
public ViewType ViewType { get; set; }

/* Gets or sets whether outline row buttons are displayed below groups. */
public bool OutlineRowButtonsBelow { get; set; }

/* Gets or sets whether outline column buttons are displayed on the right side of groups. */
public bool OutlineColumnButtonsRight { get; set; }

/* If true, MS Excel shows formulas. Otherwise, formula results are shown. */
public bool ShowFormulas { get; set; }

/* If true, MS Excel shows grid lines. */
public bool ShowGridLines { get; set; }

/* If true, MS Excel shows row and column headers. */
public bool ShowSheetHeaders { get; set; }

/* If true, MS Excel shows zero values. Otherwise, zero values are shown as empty cells. */
public bool ShowZeroValues { get; set; }

/* If true, MS Excel shows columns from right to left. */
public bool ShowColumnsFromRightToLeft { get; set; }

/* If true, MS Excel shows outline symbols. */
public bool ShowOutlineSymbols { get; set; }

/* If true, MS Excel shows worksheet in page break preview. Otherwise, normal view is used. */
public bool ShowInPageBreakPreview { get; set; }

/* Magnification factor in normal view. */
public int Zoom { get; set; }

/* Magnification factor in page break view. */
public int PageBreakViewZoom { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.DataValidationOperator.yml:
namespace GemBox.Spreadsheet
{

/* The relational operator used in data validation. */
public enum DataValidationOperator
{

/* Data validation which checks if a value is between two other values. */
Between = 0

/* Data validation which checks if a value is not between two other values. */
NotBetween = 1

/* Data validation which checks if a value is equal to a specified value. */
Equal = 2

/* Data validation which checks if a value is not equal to a specified value. */
NotEqual = 3

/* Data validation which checks if a value is less than a specified value. */
LessThan = 4

/* Data validation which checks if a value is less than or equal to a specified value. */
LessThanOrEqual = 5

/* Data validation which checks if a value is greater than a specified value. */
GreaterThan = 6

/* Data validation which checks if a value is greater than or equal to a specified value. */
GreaterThanOrEqual = 7
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.HtmlLoadOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for loading from HyperText Markup Language File (HTML) format. */
public sealed class HtmlLoadOptions : LoadOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.HtmlLoadOptions" data-throw-if-not-resolved="false"></xref> class. */
public HtmlLoadOptions()

/* Gets or sets a value indicating whether numbers will be parsed and stored as <xref href="System.Double" data-throw-if-not-resolved="false"></xref> value when loading HTML file. If <xref uid="langword_csharp_false" name="false" href=""></xref>, numbers will be loaded as strings. */
public bool ParseNumbers { get; set; }

/* Gets or sets a value indicating number styles permitted in strings when parsing them to numeric types. */
public NumberStyles NumberStyles { get; set; }

/* Gets or sets a value indicating whether dates will be parsed and stored as <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> values when loading a CSV file. 
If <xref uid="langword_csharp_false" name="false" href=""></xref>, numbers will be loaded as strings. Default value is <xref uid="langword_csharp_true" name="true" href=""></xref>. */
public bool ParseDates { get; set; }

/* Gets or sets a value indicating DateTime styles permitted in strings when parsing them to DateTimes. Default value is <xref href="System.Globalization.DateTimeStyles.None" data-throw-if-not-resolved="false"></xref>. */
public DateTimeStyles DateTimeStyles { get; set; }

/* Gets or sets an list of formats to be used when parsing cell values to <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> (provided that <xref href="GemBox.Spreadsheet.HtmlLoadOptions.ParseDates" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>). */
public IList<string> DateTimeFormats { get; set; }

/* <p>Gets or sets a value indicating whether the style should be inherited from the cell where the HTML is being inserted.</p>
<p>The default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool InheritCellStyle { get; set; }

/* Gets or sets a value indicating the text is formula if it starts with &apos;=&apos;. Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>. */
public bool HasFormulas { get; set; }

/* Gets or sets the format provider for the HTML file. */
public IFormatProvider ParseFormatProvider { get; set; }

/* Gets or sets the encoding for the HTML file. */
public Encoding Encoding { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextBoxFormat.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a set of formatting properties that can be applied to a <xref href="GemBox.Spreadsheet.Drawing.TextBox" data-throw-if-not-resolved="false"></xref>. */
public sealed class TextBoxFormat
{

/* <p>Gets or sets the vertical alignment of the text within an object such as a <xref href="GemBox.Spreadsheet.ExcelShape" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.Drawing.VerticalAlignment.Top" data-throw-if-not-resolved="false"></xref>.</p> */
public VerticalAlignment VerticalAlignment { get; set; }

/* <p>Gets or sets a value indicating the centering of the text box.</p>
<p>The way it works fundamentally is to determine the smallest possible &quot;bounds box&quot; for the text and then to center that &quot;bounds box&quot; accordingly.
This is different than <xref href="GemBox.Spreadsheet.Drawing.TextParagraphFormat.Alignment" data-throw-if-not-resolved="false"></xref>, which aligns the text within the &quot;bounds box&quot; for the text.</p>
<p>This property is compatible with all of the different kinds of <xref href="GemBox.Spreadsheet.Drawing.VerticalAlignment" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p>
<p>This member is currently not supported in PDF, XPS and image formats.</p> */
public bool Centered { get; set; }

/* <p>Gets or sets the text direction.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.Drawing.TextDirection.Horizontal" data-throw-if-not-resolved="false"></xref>.</p> */
public TextDirection TextDirection { get; set; }

/* <p>Gets or sets the text auto-fitting setting.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.Drawing.TextAutoFit.None" data-throw-if-not-resolved="false"></xref>.</p> */
public TextAutoFit AutoFit { get; set; }

/* <p>Gets or sets the percentage of the original font size to which each <xref href="GemBox.Spreadsheet.Drawing.TextRun" data-throw-if-not-resolved="false"></xref> in the <xref href="GemBox.Spreadsheet.Drawing.TextBox" data-throw-if-not-resolved="false"></xref> is scaled when <xref href="GemBox.Spreadsheet.Drawing.TextBoxFormat.AutoFit" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.Drawing.TextAutoFit.ShrinkTextOnOverflow" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value is 1 if <xref href="GemBox.Spreadsheet.Drawing.TextBoxFormat.AutoFit" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.Drawing.TextAutoFit.ShrinkTextOnOverflow" data-throw-if-not-resolved="false"></xref>; otherwise, <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>.</p> */
public double AutoFitShrinkTextFontScale { get; set; }

/* <p>Gets or sets the percentage amount by which the line spacing of each <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref> in the <xref href="GemBox.Spreadsheet.Drawing.TextBox" data-throw-if-not-resolved="false"></xref> is reduced when <xref href="GemBox.Spreadsheet.Drawing.TextBoxFormat.AutoFit" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.Drawing.TextAutoFit.ShrinkTextOnOverflow" data-throw-if-not-resolved="false"></xref>.</p>
<p>This property applies only to paragraphs with percentage line spacing.</p>
<p>Default value is 0 if <xref href="GemBox.Spreadsheet.Drawing.TextBoxFormat.AutoFit" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.Drawing.TextAutoFit.ShrinkTextOnOverflow" data-throw-if-not-resolved="false"></xref>; otherwise, <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>.</p> */
public double AutoFitShrinkTextLineSpaceReduction { get; set; }

/* <p>Gets or sets the left internal margin of the <xref href="GemBox.Spreadsheet.Drawing.TextBox" data-throw-if-not-resolved="false"></xref> bounding rectangle within a <xref href="GemBox.Spreadsheet.ExcelShape" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value is 0.1 inches.</p> */
public Length InternalMarginLeft { get; set; }

/* <p>Gets or sets the top internal margin of the <xref href="GemBox.Spreadsheet.Drawing.TextBox" data-throw-if-not-resolved="false"></xref> bounding rectangle within a <xref href="GemBox.Spreadsheet.ExcelShape" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value is 0.05 inches.</p> */
public Length InternalMarginTop { get; set; }

/* <p>Gets or sets the right internal margin of the <xref href="GemBox.Spreadsheet.Drawing.TextBox" data-throw-if-not-resolved="false"></xref> bounding rectangle within a <xref href="GemBox.Spreadsheet.ExcelShape" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value is 0.1 inches.</p> */
public Length InternalMarginRight { get; set; }

/* <p>Gets or sets the bottom internal margin of the <xref href="GemBox.Spreadsheet.Drawing.TextBox" data-throw-if-not-resolved="false"></xref> bounding rectangle within a <xref href="GemBox.Spreadsheet.ExcelShape" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value is 0.05 inches.</p> */
public Length InternalMarginBottom { get; set; }

/* <p>Gets or sets a value indicating whether to wrap text in shape.</p>
<p>Default value is <xref uid="langword_csharp_true" name="true" href=""></xref>.</p> */
public bool WrapText { get; set; }

/* <p>Gets or sets the number of columns of text in the bounding rectangle.</p>
<p>Default value is 1.</p>
<p>This member is currently not supported in PDF, XPS and image formats.</p> */
public int ColumnNumber { get; set; }

/* <p>Gets or sets the space between text columns when there is more than 1 column present in the <xref href="GemBox.Spreadsheet.Drawing.TextBox" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value is 0.</p>
<p>This member is currently not supported in PDF, XPS and image formats.</p> */
public Length ColumnSpacing { get; set; }

/* Specifies the rotation that is being applied to the text within the bounding box. If it not
specified, the rotation of the accompanying shape is used. If it is specified, then this is
applied independently from the shape. */
public int Rotation { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents an appearance settings of a data bar. */
public sealed class DataBarStyle
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets the data bar direction. */
public DataBarDirection Direction { get; set; }

/* <p>Gets or sets a value indicating whether the data bar <xref href="GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.FillColor" data-throw-if-not-resolved="false"></xref> is gradient or solid.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref> (data bar <xref href="GemBox.Spreadsheet.ConditionalFormatting.DataBarStyle.FillColor" data-throw-if-not-resolved="false"></xref> is solid).</p> */
public bool GradientFill { get; set; }

/* Gets or sets the data bar axis position. */
public DataBarAxisPosition AxisPosition { get; set; }

/* Gets or sets the data bar fill color. */
public SpreadsheetColor FillColor { get; set; }

/* <p>Gets or sets the data bar border color.</p>
<p>If border color <xref href="GemBox.Spreadsheet.SpreadsheetColor.IsEmpty" data-throw-if-not-resolved="false"></xref>, then data bar won&apos;t have any border.</p> */
public SpreadsheetColor BorderColor { get; set; }

/* <p>Gets or sets the data bar fill color for negative values.</p>
<p>If negative data bar fill color <xref href="GemBox.Spreadsheet.SpreadsheetColor.IsEmpty" data-throw-if-not-resolved="false"></xref>, then data bar fill color for negative values is same as for positive values.</p> */
public SpreadsheetColor NegativeFillColor { get; set; }

/* <p>Gets or sets the data bar border color for negative values.</p>
<p>If negative data bar border color <xref href="GemBox.Spreadsheet.SpreadsheetColor.IsEmpty" data-throw-if-not-resolved="false"></xref>, then data bar border color for negative values is same as for positive values.</p> */
public SpreadsheetColor NegativeBorderColor { get; set; }

/* Gets or sets the data bar axis color. */
public SpreadsheetColor AxisColor { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ChartTitleDirection.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents chart or axis title text direction. */
public enum ChartTitleDirection
{

/* Text is horizontal. */
Horizontal = 0

/* Text is vertical (each line is 90 degrees rotated clockwise, so it goes from top to bottom; each next line is to the left from the previous one). */
Rotate90 = 1

/* Text is vertical (each line is 270 degrees rotated clockwise, so it goes from bottom to top; each next line is to the right from the previous one). */
Rotate270 = 2

/* Text is vertical (one letter on top of another). */
Stacked = 3
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.WorksheetProtection.yml:
namespace GemBox.Spreadsheet
{

/* Protection settings.
Supported in XLSX, XLSB and XLS only. */
public sealed class WorksheetProtection
{

/* Sets the password for protected sheet. */
public void SetPassword(string password)

/* Gets or sets the password hash for protected sheet. */
public int PasswordHash { get; set; }

/* Gets a value indicating whether the protected sheet has a passoword. */
public bool HasPassword { get; }

/* Gets or sets if selecting locked cells is allowed.
Default value is <xref uid="langword_csharp_true" name="true" href=""></xref>. */
public bool AllowSelectingLockedCells { get; set; }

/* Gets or sets if selecting unlocked cells is allowed.
Default value is <xref uid="langword_csharp_true" name="true" href=""></xref>. */
public bool AllowSelectingUnlockedCells { get; set; }

/* Gets or sets if formatting cells is allowed. */
public bool AllowFormattingCells { get; set; }

/* Gets or sets if formatting columns is allowed. */
public bool AllowFormattingColumns { get; set; }

/* Gets or sets if formatting rows is allowed. */
public bool AllowFormattingRows { get; set; }

/* Gets or sets if inserting columns is allowed. */
public bool AllowInsertingColumns { get; set; }

/* Gets or sets if inserting rows is allowed. */
public bool AllowInsertingRows { get; set; }

/* Gets or sets if inserting hyperlinks is allowed. */
public bool AllowInsertingHyperlinks { get; set; }

/* Gets or sets if deleting columns is allowed. */
public bool AllowDeletingColumns { get; set; }

/* Gets or sets if deleting rows is allowed. */
public bool AllowDeletingRows { get; set; }

/* Gets or sets if sorting is allowed. */
public bool AllowSorting { get; set; }

/* Gets or sets if using autofilter is allowed. */
public bool AllowUsingAutoFilter { get; set; }

/* Gets or sets if using pivot table reports is allowed. */
public bool AllowUsingPivotTableReports { get; set; }

/* Gets or sets if editing objects is allowed. */
public bool AllowEditingObjects { get; set; }

/* Gets or sets if editing scenarios is allowed. */
public bool AllowEditingScenarios { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.FormControlType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a type of form control */
public enum FormControlType
{

/* <xref href="GemBox.Spreadsheet.Drawing.Button" data-throw-if-not-resolved="false"></xref> control. */
Button = 0

/* <xref href="GemBox.Spreadsheet.Drawing.ComboBox" data-throw-if-not-resolved="false"></xref> control. */
ComboBox = 1

/* <xref href="GemBox.Spreadsheet.Drawing.CheckBox" data-throw-if-not-resolved="false"></xref> control. */
CheckBox = 2

/* <xref href="GemBox.Spreadsheet.Drawing.SpinButton" data-throw-if-not-resolved="false"></xref> control. */
SpinButton = 3

/* <xref href="GemBox.Spreadsheet.Drawing.ListBox" data-throw-if-not-resolved="false"></xref> control. */
ListBox = 4

/* <xref href="GemBox.Spreadsheet.Drawing.OptionButton" data-throw-if-not-resolved="false"></xref> control. */
OptionButton = 5

/* <xref href="GemBox.Spreadsheet.Drawing.GroupBox" data-throw-if-not-resolved="false"></xref> control. */
GroupBox = 6

/* <xref href="GemBox.Spreadsheet.Drawing.Label" data-throw-if-not-resolved="false"></xref> control. */
Label = 7

/* <xref href="GemBox.Spreadsheet.Drawing.ScrollBar" data-throw-if-not-resolved="false"></xref> control. */
ScrollBar = 8

/* Currently unsupported form control. */
Unknown = 9
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FilterOperator.yml:
namespace GemBox.Spreadsheet
{

/* Operator enumerations for filtering. */
public enum FilterOperator
{

/* Show results which are equal to criteria. */
Equal = 0

/* Show results which are less than criteria. */
LessThan = 1

/* Show results which are less than or equal to criteria. */
LessThanOrEqual = 2

/* Show results which are not equal to criteria. */
NotEqual = 3

/* Show results which are greater than or equal to criteria. */
GreaterThanOrEqual = 4

/* Show results which are greater than criteria. */
GreaterThan = 5
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelDrawingMetadata.yml:
namespace GemBox.Spreadsheet
{

/* Represents a set of non-visual properties which shall be applied to the parent <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref>. */
public sealed class ExcelDrawingMetadata
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ExcelDrawingMetadata" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets a unique identifier for the current drawing within the worksheet. */
public int Id { get; }

/* Gets or sets the alternative text for the current drawing, for use by assistive technologies or applications which will not display the current drawing. */
public string Description { get; set; }

/* Gets or sets the title, caption, for the current drawing. */
public string Title { get; set; }

/* Gets or sets the name for the current drawing. */
public string Name { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExtendedSaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Extended save options that are not natively supported by spreadsheet formats. */
public sealed class ExtendedSaveOptions
{

/* <p>Gets or sets the borders for header.</p> */
public HeaderFooterStyle HeaderStyle { get; }

/* <p>Gets or sets the borders for header.</p> */
public HeaderFooterStyle FooterStyle { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ChartGrouping.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents the grouping of a chart series for each category in a chart. */
public enum ChartGrouping
{

/* Chart series are drawn on the value axis. Not applicable for <xref href="GemBox.Spreadsheet.Charts.ColumnChart" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.Charts.BarChart" data-throw-if-not-resolved="false"></xref>. */
Standard = 0

/* Chart series are drawn next to each other along the category axis. Applicable only for <xref href="GemBox.Spreadsheet.Charts.ColumnChart" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.Charts.BarChart" data-throw-if-not-resolved="false"></xref>. */
Clustered = 1

/* <p>Chart series are drawn next to each other on the value axis.</p>
<p>Use it to compare the contribution of each value to a total across categories.</p>
<p>
This value is currently supported only by <xref href="GemBox.Spreadsheet.Charts.ColumnChart" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.Charts.BarChart" data-throw-if-not-resolved="false"></xref> when exporting a chart to PDF, XPS or image file formats. This value is exported as <xref href="GemBox.Spreadsheet.Charts.ChartGrouping.Standard" data-throw-if-not-resolved="false"></xref> for all other chart types.
</p> */
Stacked = 2

/* <p>Chart series are drawn next to each other along the value axis and scaled to total 100%.</p>
<p>Use it to compare the percentage that each value contributes to a total across categories.</p>
<p>
This value is currently supported only by <xref href="GemBox.Spreadsheet.Charts.ColumnChart" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.Charts.BarChart" data-throw-if-not-resolved="false"></xref> when exporting a chart to PDF, XPS or image file formats. This value is exported as <xref href="GemBox.Spreadsheet.Charts.ChartGrouping.Standard" data-throw-if-not-resolved="false"></xref> for all other chart types.
</p> */
PercentStacked = 3
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.DrawingColor.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a color. */
public struct DrawingColor : IEquatable<DrawingColor>
{

/* Creates a new color instance from the specified color name. */
public static DrawingColor FromName(DrawingColorName name)

/* Creates a new color instance from the specified color name and luminance. */
public static DrawingColor FromName(DrawingColorName name, double luminance)

/* Creates a new color instance from the specified color name, luminance and transparency. */
public static DrawingColor FromName(DrawingColorName name, double luminance, double transparency)

/* Creates a new color instance from the specified Red, Green and Blue components. */
public static DrawingColor FromRgb(int r, int g, int b)

/* Creates a new color instance from the specified Red, Green and Blue components and transparency. */
public static DrawingColor FromRgb(int r, int g, int b, double transparency)

/* Creates a new color instance from the specified Hue, Saturation and Lightness components. */
public static DrawingColor FromHsl(int h, int s, int l)

/* Creates a new color instance from the specified Hue, Saturation and Lightness components and transparency. */
public static DrawingColor FromHsl(int h, int s, int l, double transparency)

/* Determines whether the <code data-dev-comment-type="paramref" class="paramref">other</code> <xref href="GemBox.Spreadsheet.Drawing.DrawingColor" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.Drawing.DrawingColor" data-throw-if-not-resolved="false"></xref> instance. */
public bool Equals(DrawingColor other)

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.Drawing.DrawingColor" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.Drawing.DrawingColor" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Drawing.DrawingColor" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.Drawing.DrawingColor" data-throw-if-not-resolved="false"></xref>s are equal. */
public static bool operator ==(DrawingColor first, DrawingColor second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.Drawing.DrawingColor" data-throw-if-not-resolved="false"></xref>s are not equal. */
public static bool operator !=(DrawingColor first, DrawingColor second)

/* Gets the color name. */
public DrawingColorName Name { get; }

/* Gets the color opacity (0 = fully transparent, 255 = fully opaque). */
public byte A { get; }

/* Gets the Red component (from 0 to 255). */
public byte R { get; }

/* Gets the Green component (from 0 to 255). */
public byte G { get; }

/* Gets the Blue component (from 0 to 255). */
public byte B { get; }

/* Gets the Opacity, Red, Green and Blue components in a single <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value. */
public int Argb { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotCache.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a memory cache for a <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref>. */
public sealed class PivotCache : IPivotCacheCollectionChangeProvider
{

/* Changes the worksheet source of the <xref href="GemBox.Spreadsheet.PivotTables.PivotCache" data-throw-if-not-resolved="false"></xref>. */
public void ChangeWorksheetSource(string reference)

/* Refreshes the pivot cache based on its <xref href="GemBox.Spreadsheet.PivotTables.PivotCache.CacheSource" data-throw-if-not-resolved="false"></xref>. */
public void Refresh()

/* Gets the source of the <xref href="GemBox.Spreadsheet.PivotTables.PivotCache" data-throw-if-not-resolved="false"></xref>. */
public PivotCacheSource CacheSource { get; }

/* <p>Gets or sets a value indicating whether the data should be refreshed when opening the file.</p>
<p>The default value is <xref uid="langword_csharp_true" name="true" href=""></xref>.</p> */
public bool RefreshOnLoad { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.PictureContent.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a picture that has an associated content that is either embedded in or linked to the workbook file. */
public sealed class PictureContent : IPictureContent
{

/* Gets the picture content (picture data encoded in a particular format) that is either embedded in or linked to the workbook file. */
public Content Content { get; }

/* Gets the type of the compression. */
public PictureCompressionType CompressionType { get; }

/* Gets the type of the picture content. */
public PictureContentType ContentType { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a conditional formatting rule. */
public sealed class ConditionalFormatRule
{

/* Sets a &apos;<strong>2-Color Scale</strong>&apos; formatting condition to this conditional formatting rule. */
public ColorScaleCondition Set2ColorScale()

/* Sets a &apos;<strong>3-Color Scale</strong>&apos; formatting condition to this conditional formatting rule. */
public ColorScaleCondition Set3ColorScale()

/* Sets a &apos;<strong>Data Bar</strong>&apos; formatting condition to this conditional formatting rule. */
public DataBarCondition SetDataBar()

/* Sets an &apos;<strong>Icon Set</strong>&apos; formatting condition to this conditional formatting rule. */
public IconSetCondition SetIconSet()

/* Sets a &apos;<strong>Cells with Cell Value</strong>&apos; formatting condition to this conditional formatting rule. */
public ContainValueCondition SetContainValue(ContainValueOperator operator, object value)

/* Sets a &apos;<strong>Cells with Cell Value</strong>&apos; formatting condition to this conditional formatting rule. */
public ContainValueCondition SetContainValue(ContainValueOperator operator, object value, object value2)

/* Sets a &apos;<strong>Cells with Specific Text</strong>&apos; formatting condition to this conditional formatting rule. */
public ContainTextCondition SetContainText(ContainTextOperator operator, string value)

/* Sets a &apos;<strong>Cells with Dates Occurring</strong>&apos; formatting condition to this conditional formatting rule. */
public ContainDateCondition SetContainDate(ContainDateOperator operator)

/* Sets a &apos;<strong>Cells with Blanks</strong>&apos; or &apos;<strong>Cells with No Blanks</strong>&apos; or &apos;<strong>Cells with Errors</strong>&apos; or &apos;<strong>Cells with No Errors</strong>&apos; formatting condition to this conditional formatting rule. */
public ContainCondition SetContain(ContainConditionType containConditionType)

/* Sets a &apos;<strong>Top or Bottom Ranked</strong>&apos; formatting condition to this conditional formatting rule. */
public TopOrBottomRankedCondition SetTopOrBottomRanked(bool bottom, int rank)

/* Sets an &apos;<strong>Above or Below Average</strong>&apos; formatting condition to this conditional formatting rule. */
public AboveOrBelowAverageCondition SetAboveOrBelowAverage(bool below)

/* Sets a &apos;<strong>Unique or Duplicate</strong>&apos; formatting condition to this conditional formatting rule. */
public UniqueOrDuplicateCondition SetUniqueOrDuplicate(bool duplicate)

/* Sets a &apos;<strong>Formula</strong>&apos; formatting condition to this conditional formatting rule. */
public FormulaCondition SetFormula(string formula)

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalFormatRule" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Calculates conditional formatting for this rule. */
public void Calculate()

/* Determines whether the given cell matches this rule. */
public bool Matches(ExcelCell cell)

/* Gets or sets a value indicating whether a rule with lower priority may be applied over this rule, when this rule evaluates to true. */
public bool StopIfTrue { get; set; }

/* Gets or sets the sequence of references to cell ranges over which this conditional formatting rule is applied. */
public string AppliesTo { get; set; }

/* Gets the condition specified in this conditional formatting rule. */
public FormatCondition Condition { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.HeaderFooterAlignment.yml:
namespace GemBox.Spreadsheet
{

/* Specifies the alignment of a header/footer. */
public enum HeaderFooterAlignment
{

/* Text is aligned to the left. */
Left = 0

/* Text is centered between the left and right edges. */
Center = 1

/* Text is aligned to the right. */
Right = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ValueAxis.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents an axis used for series values. */
public sealed class ValueAxis : ChartAxis, IChartTitleParent, IChartObject, IColorContext
{

/* Gets or sets the minimum value of the axis or <xref uid="langword_csharp_null" name="null" href=""></xref> if value should be automatically calculated based on chart&apos;s data. */
public double? Minimum { get; set; }

/* Gets or sets the maximum value of the axis or <xref uid="langword_csharp_null" name="null" href=""></xref> if value should be automatically calculated based on chart&apos;s data. */
public double? Maximum { get; set; }

/* Gets or sets the distance between major ticks or <xref uid="langword_csharp_null" name="null" href=""></xref> if value should be automatically calculated based on chart&apos;s data. */
public double? MajorUnit { get; set; }

/* Gets or sets the distance between minor ticks or <xref uid="langword_csharp_null" name="null" href=""></xref> if value should be automatically calculated based on chart&apos;s data. */
public double? MinorUnit { get; set; }

/* Gets the axis type for <xref href="GemBox.Spreadsheet.Charts.ValueAxis" data-throw-if-not-resolved="false"></xref> which is <xref href="GemBox.Spreadsheet.Charts.AxisType.Value" data-throw-if-not-resolved="false"></xref>. */
public override AxisType AxisType { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CellRangeEnumerator.yml:
namespace GemBox.Spreadsheet
{

/* Enumerator used for iterating cells in a <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref>. */
public sealed class CellRangeEnumerator : IEnumerator<ExcelCell>, IDisposable, IEnumerator
{

/* Releases all resources used by the <xref href="GemBox.Spreadsheet.CellRangeEnumerator" data-throw-if-not-resolved="false"></xref>. */
public void Dispose()

/* Sets the enumerator to its initial position, which is one column before 
the first cell in the cell range. */
public void Reset()

/* Advances the enumerator to the next element of the cell range. */
public bool MoveNext()

/* Parent <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref>. */
public CellRange Parent { get; }

/* Current absolute row index in the cell range. */
public int CurrentRow { get; }

/* Current absolute column index in the cell range. */
public int CurrentColumn { get; }

/* Gets the current <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref> in the cell range. */
public ExcelCell Current { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PaginatorOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options used to specify which part of the workbook to paginate. */
public sealed class PaginatorOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.PaginatorOptions" data-throw-if-not-resolved="false"></xref> class. */
public PaginatorOptions()

/* Gets or sets a value indicating whether to save the whole <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> or just <xref href="GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" data-throw-if-not-resolved="false"></xref>. */
public SelectionType SelectionType { get; set; }

/* Gets the extended save options that are not natively supported by spreadsheet formats. */
public ExtendedSaveOptions Extended { get; set; }

/* Occurs when paginating progress of a file has changed. */
public event EventHandler<OperationProgressChangedEventArgs> ProgressChanged
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.DataValidation.yml:
namespace GemBox.Spreadsheet
{

/* A single item of data validation defined on ranges of the worksheet. */
public sealed class DataValidation
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.DataValidation" data-throw-if-not-resolved="false"></xref> class. */
public DataValidation()

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.DataValidation" data-throw-if-not-resolved="false"></xref> class with specified worksheet and cell references on which this data validation will be applied. */
public DataValidation(ExcelWorksheet worksheet, IEnumerable<string> cellReferences)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.DataValidation" data-throw-if-not-resolved="false"></xref> class with specified worksheet and cell references on which this data validation will be applied. */
public DataValidation(ExcelWorksheet worksheet, params string[] cellReferences)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.DataValidation" data-throw-if-not-resolved="false"></xref> class with specified cell ranges on which this data validation will be applied. */
public DataValidation(IEnumerable<CellRange> cellRanges)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.DataValidation" data-throw-if-not-resolved="false"></xref> class with specified cell ranges on which this data validation will be applied. */
public DataValidation(params CellRange[] cellRanges)

/* Applies this data validation to a specific cell, returning true if its value is to be considered valid. */
public bool Validate(ExcelCell cell)

/* Gets or sets the type of data validation. */
public DataValidationType Type { get; set; }

/* Gets or sets the relational operator used with this data validation. */
public DataValidationOperator Operator { get; set; }

/* Gets or sets a value indicating whether the data validation treats empty or blank entries as 
valid. <xref uid="langword_csharp_true" name="true" href=""></xref> means empty entries are OK and do not violate the validation constraints. */
public bool IgnoreBlank { get; set; }

/* Gets or sets a value indicating whether to display the dropdown combo box for a <xref href="GemBox.Spreadsheet.DataValidationType.List" data-throw-if-not-resolved="false"></xref> data validation type. */
public bool InCellDropdown { get; set; }

/* Gets or sets the first formula in the DataValidation dropdown. */
public object Formula1 { get; set; }

/* Gets or sets the second formula in the DataValidation dropdown. */
public object Formula2 { get; set; }

/* Gets or sets a value indicating whether to display the input prompt message. */
public bool ShowInputMessage { get; set; }

/* Gets or sets the title bar text of input prompt. */
public string InputMessageTitle { get; set; }

/* Gets or sets the message text of input prompt. */
public string InputMessage { get; set; }

/* Gets or sets a value indicating whether to display the error alert message when an invalid
value has been entered, according to the criteria specified. */
public bool ShowErrorAlert { get; set; }

/* Gets or sets the style of error alert used for this data validation. */
public DataValidationErrorStyle ErrorStyle { get; set; }

/* Gets or sets the title bar text of error alert. */
public string ErrorTitle { get; set; }

/* Gets or sets the message text of error alert. */
public string ErrorMessage { get; set; }

/* Gets the ranges over which data validation is applied. */
public CellRangeCollection CellRanges { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.ListNumberType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents an automatic numbering scheme used in a <xref href="GemBox.Spreadsheet.Drawing.TextParagraph" data-throw-if-not-resolved="false"></xref> that is part of a <xref href="GemBox.Spreadsheet.Drawing.ListType.Number" data-throw-if-not-resolved="false"></xref> list. */
public enum ListNumberType
{

/* Number is absent. */
None = 0

/* 1 2 3 */
DecimalPlain = 1

/* 1. 2. 3. */
DecimalPeriod = 2

/* 1) 2) 3) */
DecimalRightParenthesis = 3

/* I. II. III. */
UpperRomanPeriod = 4

/* A. B. C. */
UpperLetterPeriod = 5

/* a) b) c) */
LowerLetterRightParenthesis = 6

/* a. b. c. */
LowerLetterPeriod = 7

/* i. ii. iii. */
LowerRomanPeriod = 8

/* (1) (2) (3) */
DecimalParentheses = 9
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a <xref href="GemBox.Spreadsheet.ConditionalFormatting.FormatCondition" data-throw-if-not-resolved="false"></xref> type. */
public enum FormatConditionType
{

/* Formats fill of all cells based on their values using a specified 2-point or 3-point color scale. */
ColorScale = 0

/* Formats all cells based on their values by displaying a data bar whose length is proportional to cell&apos;s value. */
DataBar = 1

/* Formats all cells based on their values by displaying an icon from the specified icon set according to cell&apos;s value. */
IconSet = 2

/* Formats only cells that contain value which satisfies the specified criteria. */
Contain = 3

/* Formats only cells with top or bottom ranked values. */
TopOrBottomRanked = 4

/* Formats only cells with values that are above or below average. */
AboveOrBelowAverage = 5

/* Formats only cells with unique or duplicate values. */
UniqueOrDuplicate = 6

/* Formats only cells for which the specified formula result evaluates to <xref uid="langword_csharp_true" name="true" href=""></xref>. */
Formula = 7
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CellRangeCollection.yml:
namespace GemBox.Spreadsheet
{

/* A collection of <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref> items. */
public sealed class CellRangeCollection : Collection<CellRange>, IList<CellRange>, ICollection<CellRange>, IList, ICollection, IReadOnlyList<CellRange>, IReadOnlyCollection<CellRange>, IEnumerable<CellRange>, IEnumerable
{

/* Adds the <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref> from the specified worksheet to the collection. */
public CellRange Add(ExcelWorksheet worksheet, string cellReference)
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConsolidationFunction.yml:
namespace GemBox.Spreadsheet
{

/* Represents a subtotal function. */
public enum ConsolidationFunction
{

/* No subtotal function specified. */
Unknown = 0

/* The &apos;<strong>AVERAGE</strong>&apos; function. */
Average = 1

/* The &apos;<strong>COUNT</strong>&apos; function. */
CountNumbers = 2

/* The &apos;<strong>COUNTA</strong>&apos; function. */
Count = 3

/* The &apos;<strong>MAX</strong>&apos; function. */
Max = 4

/* The &apos;<strong>Min</strong>&apos; function. */
Min = 5

/* The &apos;<strong>Product</strong>&apos; function. */
Product = 6

/* The &apos;<strong>STDEV.S</strong>&apos; function. */
StdDev = 7

/* The &apos;<strong>STDEV.P</strong>&apos; function. */
StdDevp = 8

/* The &apos;<strong>SUM</strong>&apos; function. */
Sum = 9

/* The &apos;<strong>VAR.S</strong>&apos; function. */
Var = 10

/* The &apos;<strong>VAR.P</strong>&apos; function. */
Varp = 11
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.HeaderFooterPage.yml:
namespace GemBox.Spreadsheet
{

/* Represents header/footer which should be shown on a specific worksheet page (first page, even pages and all other pages). */
public sealed class HeaderFooterPage
{

/* <xref href="GemBox.Spreadsheet.HeaderFooterPage" data-throw-if-not-resolved="false"></xref> constructor. */
public HeaderFooterPage()

/* Gets or sets header for this <xref href="GemBox.Spreadsheet.HeaderFooterPage" data-throw-if-not-resolved="false"></xref> instance. */
public HeaderFooter Header { get; set; }

/* Gets or sets footer for this <xref href="GemBox.Spreadsheet.HeaderFooterPage" data-throw-if-not-resolved="false"></xref> instance. */
public HeaderFooter Footer { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelPicture.yml:
namespace GemBox.Spreadsheet
{

/* Represents a picture in the worksheet. */
public sealed class ExcelPicture : ExcelDrawing, IDocumentPaginatorSource, IImageSource
{

/* Converts this <xref href="GemBox.Spreadsheet.ExcelPicture" data-throw-if-not-resolved="false"></xref> instance to a new <xref href="System.Drawing.Image" data-throw-if-not-resolved="false"></xref> instance. */
public Image ToImage()

/* Removes this <xref href="GemBox.Spreadsheet.ExcelPicture" data-throw-if-not-resolved="false"></xref> instance from the worksheet. */
public void Delete()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ExcelPicture" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the picture stream. */
public MemoryStream PictureStream { get; }

/* Gets the picture format. */
public ExcelPictureFormat PictureFormat { get; }

/* Gets or sets the transparent color in the image. By default, no transparent color is set. */
public SpreadsheetColor? TransparentColor { get; set; }

/* Gets or sets the transparency of the picture. Possible values range from 0 (full transparency) to 1 (no transparency).
The default value is 1 (no transparency). */
public double Transparency { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.yml:
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelFillPattern.yml:
namespace GemBox.Spreadsheet
{

/* Represents cell fill (background) formatting which can be either pattern or gradient. */
public sealed class ExcelFillPattern
{

/* <p>Sets the solid pattern fill with the specified fill color.</p>
<p>Sets <xref href="GemBox.Spreadsheet.ExcelFillPattern.PatternStyle" data-throw-if-not-resolved="false"></xref> to <xref href="GemBox.Spreadsheet.FillPatternStyle.Solid" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor" data-throw-if-not-resolved="false"></xref> to <code data-dev-comment-type="paramref" class="paramref">fillColor</code>.</p> */
public void SetSolid(SpreadsheetColor fillColor)

/* Sets the pattern fill. */
public void SetPattern(FillPatternStyle patternStyle, SpreadsheetColor foregroundColor, SpreadsheetColor backgroundColor)

/* Sets the gradient fill effect. */
public void SetGradient(GradientShadingStyle gradientStyle, SpreadsheetColor gradientColor1, SpreadsheetColor gradientColor2)

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ExcelFillPattern" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* <p>Gets or sets the pattern fill style.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.FillPatternStyle.None" data-throw-if-not-resolved="false"></xref>.</p>
<p>Currently supported only in XLSX, XLSB and XLS. For all other formats it defaults to either <xref href="GemBox.Spreadsheet.FillPatternStyle.None" data-throw-if-not-resolved="false"></xref> or <xref href="GemBox.Spreadsheet.FillPatternStyle.Solid" data-throw-if-not-resolved="false"></xref>.</p>
<p>If set value is not <xref href="GemBox.Spreadsheet.FillPatternStyle.None" data-throw-if-not-resolved="false"></xref>, then <xref href="GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor" data-throw-if-not-resolved="false"></xref> and/or <xref href="GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor" data-throw-if-not-resolved="false"></xref> should also be set.</p> */
public FillPatternStyle PatternStyle { get; set; }

/* <p>Gets or sets the pattern fill foreground color.</p>
<p>Default value is color created from name <xref href="GemBox.Spreadsheet.ColorName.Empty" data-throw-if-not-resolved="false"></xref>.</p> */
public SpreadsheetColor PatternForegroundColor { get; set; }

/* <p>Gets or sets the pattern fill background color.</p>
<p>Default value is color created from name <xref href="GemBox.Spreadsheet.ColorName.Empty" data-throw-if-not-resolved="false"></xref>.</p> */
public SpreadsheetColor PatternBackgroundColor { get; set; }

/* <p>Gets or sets the shading style of the gradient fill effect, if there is any gradient fill effect applied.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.GradientShadingStyle.None" data-throw-if-not-resolved="false"></xref>.</p>
<p>Gradient fill is currently supported in XLSX, XLSB and partially in rendering formats (PDF, XPS and image formats).</p> */
public GradientShadingStyle GradientStyle { get; set; }

/* <p>Gets or sets the first color of the gradient fill effect.</p>
<p>Default value is color created from name <xref href="GemBox.Spreadsheet.ColorName.Empty" data-throw-if-not-resolved="false"></xref>.</p>
<p>Gradient fill is currently supported in XLSX, XLSB and partially in rendering formats (PDF, XPS and image formats).</p> */
public SpreadsheetColor GradientColor1 { get; set; }

/* <p>Gets or sets the second color of the gradient fill effect.</p>
<p>Default value is color created from name <xref href="GemBox.Spreadsheet.ColorName.Empty" data-throw-if-not-resolved="false"></xref>.</p>
<p>Gradient fill is currently supported in XLSX, XLSB and partially in rendering formats (PDF, XPS and image formats).</p> */
public SpreadsheetColor GradientColor2 { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Tables.TableColumn.yml:
namespace GemBox.Spreadsheet.Tables
{

/* Represents a <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> column.
Supported in XLSX only. */
public sealed class TableColumn
{

/* Gets the parent <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref>. */
public Table Parent { get; }

/* Gets the colum name without filling any value if it is null */
public string NameCore { get; }

/* Gets the column index. */
public int Index { get; }

/* Gets the column range. */
public CellRange Range { get; }

/* Gets the column data range. */
public CellRange DataRange { get; }

/* Gets or sets the column name. */
public string Name { get; set; }

/* Gets or sets the totals row function. */
public TotalsRowFunction TotalsRowFunction { get; set; }

/* Gets or sets the totals row formula. */
public string TotalsRowFormula { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.DataPoint.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a chart series data point. */
public sealed class DataPoint : IChartObject, IColorContext, IChartDataLabelsDataProvider
{

/* Deletes the data point. */
public void Delete()

/* Gets or sets a value indicating whether colors should be inverted if the data point value is negative. */
public bool InvertIfNegative { get; set; }

/* Gets the settings for the data label for data point. */
public ChartDataLabels DataLabel { get; }

/* Gets the index. */
public int Index { get; }

/* Gets or sets the fill formating options. */
public FillFormat Fill { get; set; }

/* Gets or sets the outline formating options. */
public LineFormat Outline { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PageBreakCollection.yml:
namespace GemBox.Spreadsheet
{

/* Base class for page break collections. */
public abstract class PageBreakCollection : IEnumerable
{

/* Removes all page breaks. */
public void Clear()

/* Removes the page break at the specified index. */
public void RemoveAt(int index)

/* Returns an enumerator for the collection. */
public IEnumerator GetEnumerator()

/* Gets the number of page breaks contained in the collection. */
public int Count { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotCacheSource.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents an abstract source of <xref href="GemBox.Spreadsheet.PivotTables.PivotCache" data-throw-if-not-resolved="false"></xref> data. */
public abstract class PivotCacheSource
{

/* Gets the type of the <xref href="GemBox.Spreadsheet.PivotTables.PivotCache" data-throw-if-not-resolved="false"></xref> source. */
public abstract PivotCacheSourceType SourceType { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ScriptPosition.yml:
namespace GemBox.Spreadsheet
{

/* Defines the possible settings for vertical alignment of a text and is used in <xref href="GemBox.Spreadsheet.ExcelFont.ScriptPosition" data-throw-if-not-resolved="false"></xref> member to get superscript or subscript text without altering the font size. */
public enum ScriptPosition
{

/* Returns the text to the baseline, default, alignment, and returns it to the original font size. */
Normal = 0

/* <p>Specifies that text should be superscript.</p>
<p>Raises the text above the baseline and changes it to a smaller size.</p> */
Superscript = 1

/* <p>Specifies that text should be subscript.</p>
<p>Lowers the text below the baseline and changes it to a smaller size.</p> */
Subscript = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.MarkerChartSeries.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a single chart series with <xref href="GemBox.Spreadsheet.Charts.Marker" data-throw-if-not-resolved="false"></xref>. */
public abstract class MarkerChartSeries : ChartSeries, IChartObject, IChartDataLabelsDataProvider, IColorContext
{

/* Gets the marker. */
public Marker Marker { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CustomFilter.yml:
namespace GemBox.Spreadsheet
{

/* Represents a filter that specifies one or two conditions (operators and values) and whether the two conditions are joined by &apos;and&apos; or &apos;or&apos;. */
public sealed class CustomFilter : Filter
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets the operator used by the (first) filter condition. */
public FilterOperator Operator { get; set; }

/* Gets or sets the value indicating whether the two conditions have an &quot;and&quot; relationship.
<xref uid="langword_csharp_true" name="true" href=""></xref> indicates &quot;and&quot;, <xref uid="langword_csharp_false" name="false" href=""></xref> indicates &quot;or&quot; and <xref uid="langword_csharp_null" name="null" href=""></xref> indicates that second condition won&apos;t be applied. */
public bool? And { get; set; }

/* Gets or sets the operator used by the second filter condition. */
public FilterOperator Operator2 { get; set; }

/* Gets the <xref href="GemBox.Spreadsheet.FilterType.Custom" data-throw-if-not-resolved="false"></xref> value. */
public override FilterType FilterType { get; }

/* <p>Gets or sets the value used by the (first) filter condition.</p>
<p>The value&apos;s type must be supported in <xref href="GemBox.Spreadsheet.ExcelCell.Value" data-throw-if-not-resolved="false"></xref> (<xref uid="langword_csharp_null" name="null" href=""></xref> and types supported in <xref href="GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)" data-throw-if-not-resolved="false"></xref>).</p> */
public object Value { get; set; }

/* <p>Gets or sets the value used by the second filter condition.</p>
<p>The value&apos;s type must be supported in <xref href="GemBox.Spreadsheet.ExcelCell.Value" data-throw-if-not-resolved="false"></xref> (<xref uid="langword_csharp_null" name="null" href=""></xref> and types supported in <xref href="GemBox.Spreadsheet.ExcelFile.SupportsType(System.Type)" data-throw-if-not-resolved="false"></xref>).</p> */
public object Value2 { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.HorizontalPageBreak.yml:
namespace GemBox.Spreadsheet
{

/* Specifies a horizontal position where the new page begins when the worksheet is printed. */
public sealed class HorizontalPageBreak : PageBreak, IComparable<PageBreak>
{

/* Index of the first row of the new page. */
public int Row { get; set; }

/* Index of the first column of the new page. */
public int FirstColumn { get; set; }

/* Index of the last column of the new page. */
public int LastColumn { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CalculationEngine.yml:
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Vba.VbaModule.yml:
namespace GemBox.Spreadsheet.Vba
{

/* Represents the module in <xref href="GemBox.Spreadsheet.Vba.VbaProject" data-throw-if-not-resolved="false"></xref>. */
public sealed class VbaModule
{

/* Gets or sets the name of <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref>. */
public string Name { get; set; }

/* Gets or sets the code of <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref>. */
public string Code { get; set; }

/* Gets the type of <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref>. */
public VbaModuleType Type { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.MultipleBorders.yml:
namespace GemBox.Spreadsheet
{

/* Represents multiple border types of a cell. */
[Flags]
public enum MultipleBorders
{

/* No borders. */
None = 0

/* Top border. */
Top = 1

/* Bottom border. */
Bottom = 2

/* Left border. */
Left = 4

/* Right border. */
Right = 8

/* Diagonal-up border. */
DiagonalUp = 16

/* Diagonal-down border. */
DiagonalDown = 32

/* Inside horizontal borders. */
InsideHorizontal = 64

/* Inside vertical borders. */
InsideVertical = 128

/* Horizontal borders. */
Horizontal = 3

/* Vertical borders. */
Vertical = 12

/* Diagonal borders. */
Diagonal = 48

/* Outside borders. */
Outside = 15

/* Inside borders. */
Inside = 192

/* All borders except diagonal. */
All = 207
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PdfDigitalSignatureSaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents a class that stores details for signing a workbook saved to a Portable Document Format (PDF) with a digital signature. */
public class PdfDigitalSignatureSaveOptions : DigitalSignatureSaveOptions, IDigitalId, IPdfDigitalSigner
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.PdfDigitalSignatureSaveOptions" data-throw-if-not-resolved="false"></xref> class. */
public PdfDigitalSignatureSaveOptions()

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.PdfDigitalSignatureSaveOptions" data-throw-if-not-resolved="false"></xref> class from the specified signer. */
public static PdfDigitalSignatureSaveOptions FromSigner(Func<string> signatureFormatFunc, Func<int> estimatedSignatureLengthFunc, Func<Stream, byte[]> computeSignatureFunc)

/* Gets or sets a value indicating whether the signature is <strong>P</strong>DF <strong>Ad</strong>vanced <strong>E</strong>lectronic <strong>S</strong>ignature (PAdES). */
public bool IsAdvancedElectronicSignature { get; set; }

/* Gets or sets the contact information. */
public string ContactInfo { get; set; }

/* Gets or sets the CPU host name or physical location of the signing. */
public string Location { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CalculationEngine.CalculationOptions.yml:
namespace GemBox.Spreadsheet.CalculationEngine
{

/* Class represents various calculation engine options. */
public sealed class CalculationOptions
{

/* Gets or sets a value indicating whether mathematical operations should be resolved using <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values instead of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values for increased precision, at the expense of performance. */
public bool ResolveMathFunctionsWithDecimalType { get; set; }

/* Gets or sets a value indicating whether iterative calculation is enabled. */
public bool EnableIterativeCalculation { get; set; }

/* Gets or sets the maximum calculation iterations. */
public int MaximumIterations { get; set; }

/* Gets or sets the maximum calculation change. */
public double MaximumChange { get; set; }

/* Gets or sets the calculation mode. */
public CalculationMode CalculationMode { get; set; }

/* Gets or sets the value indicating whether the intermediate results of formulas should be cached.
For some files, caching can decrease the time necessary to calculate formulas. */
public bool EnableCaching { get; set; }

/* <p>Gets or sets the culture used during the calculation.</p>
<p>The default value is <xref href="System.Globalization.CultureInfo.CurrentCulture" data-throw-if-not-resolved="false"></xref>.</p> */
public CultureInfo CultureInfo { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Tables.TableAlternativeText.yml:
namespace GemBox.Spreadsheet.Tables
{

/* Represents alternative, text-based representation of the information contained in the parent <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref>. */
public sealed class TableAlternativeText
{

/* Gets or sets the alternative title. */
public string Title { get; set; }

/* Gets or sets the alternative description. */
public string Description { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CellBorder.yml:
namespace GemBox.Spreadsheet
{

/* Represents the color and line style for the single border of a cell. */
public sealed class CellBorder
{

/* Sets the border color and line style. */
public void SetBorder(SpreadsheetColor lineColor, LineStyle lineStyle)

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.CellBorder" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* <p>Gets or sets the border line color.</p>
<p>Default value is color created from name <xref href="GemBox.Spreadsheet.ColorName.Empty" data-throw-if-not-resolved="false"></xref>.</p> */
public SpreadsheetColor LineColor { get; set; }

/* <p>Gets or sets the line style for this <xref href="GemBox.Spreadsheet.CellBorder" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.LineStyle.None" data-throw-if-not-resolved="false"></xref>.</p> */
public LineStyle LineStyle { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CopyTypes.yml:
namespace GemBox.Spreadsheet
{

/* Represents types of data to copy from a cell range. */
[Flags]
public enum CopyTypes
{

/* Copy cell values. */
Values = 1

/* Copy cell formulas. */
Formulas = 2

/* Copy comments. */
Comments = 4

/* Copy hyperlinks. */
Hyperlinks = 8

/* Copy drawings (pictures, shapes, and charts). */
Drawings = 16

/* Copy data validations. */
Validations = 32

/* Copy conditional formattings. */
ConditionalFormats = 64

/* Copy cell styles. */
Styles = 128

/* Copy merged ranges. */
MergedRanges = 256

/* Copy all data except column widths and row heights. */
Default = 511

/* Copy column widths. */
ColumnWidths = 512

/* Copy row heights. */
RowHeights = 1024
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.RangeIndexingMode.yml:
namespace GemBox.Spreadsheet
{

/* Indexing modes used by <xref href="GemBox.Spreadsheet.CellRange" data-throw-if-not-resolved="false"></xref>. */
public enum RangeIndexingMode
{

/* Rectangular indexing mode. Rectangular cell range is higher than one row and wider than one column. */
Rectangular = 0

/* Horizontal indexing mode. Horizontal cell range has 
<xref href="GemBox.Spreadsheet.CellRange.Height" data-throw-if-not-resolved="false"></xref> equal to 1. */
Horizontal = 1

/* Vertical indexing mode. Vertical cell range has 
<xref href="GemBox.Spreadsheet.CellRange.Width" data-throw-if-not-resolved="false"></xref> equal to 1. */
Vertical = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a base class for conditional objects used in conditional formatting. */
public abstract class ConditionalObject
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalObject" data-throw-if-not-resolved="false"></xref> instance. */
public abstract override string ToString()

/* Gets or sets the value. */
public ConditionalValue Value { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FreeLimitReachedException.yml:
namespace GemBox.Spreadsheet
{

/* Exception that occurs when free limit is reached. */
public sealed class FreeLimitReachedException : SpreadsheetException, ISerializable, _Exception
{
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.DefinedName.yml:
namespace GemBox.Spreadsheet
{

/* Defined name class describes defined name that is not directly related with one cell range. */
public sealed class DefinedName
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.DefinedName" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets a value indicating whether the defined name object is hidden. */
public bool Hidden { get; set; }

/* Gets or sets the name of the defined name object. */
public string Name { get; set; }

/* Gets or sets the local sheet index of the defined name.
If the local sheet index is -1, defined name is global. */
public int LocalSheetIndex { get; set; }

/* Gets or sets the value of the defined name. */
public string Value { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.RenderingMode.yml:
namespace GemBox.Spreadsheet
{

/* Defines the supported rendering modes. */
public enum RenderingMode
{

/* Use either the default implementation, <xref href="GemBox.Spreadsheet.RenderingMode.WPF" data-throw-if-not-resolved="false"></xref>, or <xref href="GemBox.Spreadsheet.RenderingMode.Skia" data-throw-if-not-resolved="false"></xref> for rendering, depending on the availability and supported features. */
Default = 0

/* Use Windows Presentation Foundation (WPF) for rendering. */
WPF = 1

/* <p>Use <a href="https://skia.org/">Skia</a> (via <a href="https://www.nuget.org/packages/SkiaSharp/">SkiaSharp</a> NuGet package) for rendering and <a href="https://www.nuget.org/packages/HarfBuzzSharp/">HarfBuzz</a> <em>text-shaping engine</em> for text formatting.</p>
<div class="NOTE"><h5>note</h5><p>Make sure your project also references the appropriate <a href="https://www.nuget.org/packages?q=SkiaSharp.NativeAssets">SkiaSharp.NativeAssets.*</a> and <a href="https://www.nuget.org/packages?q=HarfBuzzSharp.NativeAssets">HarfBuzzSharp.NativeAssets.*</a> NuGet packages depending on the platform on which you are building/running your application.</p></div> */
Skia = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.yml:
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.XlsxLoadOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represent options for loading from XLSX file format (Microsoft Excel Open XML Spreadsheet; Strict Open XML Spreadsheet; Excel 2007 and later). */
public sealed class XlsxLoadOptions : LoadOptions
{

/* Determines whether the file is an encrypted XLSX. */
public static bool IsEncrypted(string path)

/* Determines whether the file is an encrypted XLSX. */
public static bool IsEncrypted(Stream stream)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.XlsxLoadOptions" data-throw-if-not-resolved="false"></xref> class. */
public XlsxLoadOptions()

/* Gets or sets a value indicating whether to preserve XLSX file format features that are not directly supported through GemBox.Spreadsheet object model. */
public bool PreserveUnsupportedFeatures { get; set; }

/* Gets or sets the password to open protected / encrypted workbook. */
public string Password { get; set; }

/* <p>Gets or sets the streaming mode that allows streamlined reading of <xref href="GemBox.Spreadsheet.ExcelRow" data-throw-if-not-resolved="false"></xref>s of each <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> of a loaded <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value: <xref href="GemBox.Spreadsheet.LoadStreamingMode.None" data-throw-if-not-resolved="false"></xref>.</p> */
public LoadStreamingMode StreamingMode { get; set; }

/* Occurs when the loading progress of a file has changed. */
public event EventHandler<OperationProgressChangedEventArgs> ProgressChanged
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.AutoFilter.yml:
namespace GemBox.Spreadsheet
{

/* Represents filter settings and provides filter functionality. */
public sealed class AutoFilter
{

/* <p>Sets a <xref href="GemBox.Spreadsheet.ValuesFilter" data-throw-if-not-resolved="false"></xref> to a column with the specified index (relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>).</p>
<p><xref href="GemBox.Spreadsheet.ValuesFilter" data-throw-if-not-resolved="false"></xref> filters by a list of values.</p>
<p>The list can contain <xref uid="langword_csharp_null" name="null" href=""></xref>, <xref href="System.String" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> values.</p> */
public AutoFilter ByValues(int columnIndex, IEnumerable values)

/* <p>Sets a <xref href="GemBox.Spreadsheet.ValuesFilter" data-throw-if-not-resolved="false"></xref> to a column with the specified index (relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>).</p>
<p><xref href="GemBox.Spreadsheet.ValuesFilter" data-throw-if-not-resolved="false"></xref> filters by a list of values.</p>
<p>The list can contain <xref uid="langword_csharp_null" name="null" href=""></xref>, <xref href="System.String" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> values.</p> */
public AutoFilter ByValues(int columnIndex, params object[] values)

/* <p>Sets a <xref href="GemBox.Spreadsheet.Top10Filter" data-throw-if-not-resolved="false"></xref> to a column with the specified index (relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>).</p>
<p><xref href="GemBox.Spreadsheet.Top10Filter" data-throw-if-not-resolved="false"></xref> filters by a top N (percent or number of items).</p> */
public AutoFilter ByTop10(int columnIndex, bool top, bool percent, double value)

/* <p>Sets a <xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> to a column with the specified index (relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>).</p>
<p><xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> filters by a one or two conditions (operators and values).</p> */
public AutoFilter ByCustom(int columnIndex, FilterOperator operator, object value)

/* <p>Sets a <xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> to a column with the specified index (relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>).</p>
<p><xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> filters by a one or two conditions (operators and values).</p> */
public AutoFilter ByCustom(int columnIndex, FilterOperator operator, object value, bool and, FilterOperator operator2, object value2)

/* <p>Sets a <xref href="GemBox.Spreadsheet.DynamicFilter" data-throw-if-not-resolved="false"></xref> to a column with the specified index (relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>).</p>
<p><xref href="GemBox.Spreadsheet.DynamicFilter" data-throw-if-not-resolved="false"></xref> filters by a dynamic criteria that can change, either with the data itself (e.g., &quot;above average&quot;) or with the current system date (e.g., show values for &quot;today&quot;).</p> */
public AutoFilter ByDynamic(int columnIndex, DynamicFilterType dynamicFilterType)

/* <p>Sets a custom filter method to a column with the specified index (relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>).</p>
<p>Use this method to specify a custom filter behavior which is not provided by any of the <xref href="GemBox.Spreadsheet.FilterType" data-throw-if-not-resolved="false"></xref>s.</p> */
public AutoFilter ByPredicate(int columnIndex, Predicate<ExcelCell> match)

/* Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> to a column with the specified index (relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>). */
public AutoFilter SortBy(int columnIndex)

/* Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> to a column with the specified index (relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>) and with the specified custom list by which order of items to sort by. */
public AutoFilter SortBy(int columnIndex, IEnumerable<string> customList)

/* Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> to a column with the specified index (relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>) and with the specified custom list by which order of items to sort by. */
public AutoFilter SortBy(int columnIndex, params string[] customList)

/* Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> to a column with the specified index (relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>) and with the specified order to sort by. */
public AutoFilter SortBy(int columnIndex, bool descending)

/* Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> to a column with the specified index (relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>) and with the specified order and custom list by which order of items to sort by. */
public AutoFilter SortBy(int columnIndex, bool descending, IEnumerable<string> customList)

/* Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> to a column with the specified index (relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>) and with the specified order and custom list by which order of items to sort by. */
public AutoFilter SortBy(int columnIndex, bool descending, params string[] customList)

/* Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> to a column with the specified index (relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>) and with the specified comparison method to sort by. */
public AutoFilter SortBy(int columnIndex, Comparison<ExcelCell> comparison)

/* <p>Performs the filtering and sorting of this <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref> based on this <xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> settings.</p>
<p>Rows which cells contained in <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref> do not satisfy filtering conditions will be hidden (<xref href="GemBox.Spreadsheet.ExcelColumnRowBase.Hidden" data-throw-if-not-resolved="false"></xref> will be set to <xref uid="langword_csharp_true" name="true" href=""></xref>).</p> */
public void Apply()

/* <p>Performs the filtering and (optionally) sorting of this <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref> based on this <xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> settings.</p>
<p>Rows which cells contained in <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref> do not satisfy filtering conditions will be hidden (<xref href="GemBox.Spreadsheet.ExcelColumnRowBase.Hidden" data-throw-if-not-resolved="false"></xref> will be set to <xref uid="langword_csharp_true" name="true" href=""></xref>).</p> */
public void Apply(bool applySort)

/* Shows all rows (sets <xref href="GemBox.Spreadsheet.ExcelColumnRowBase.Hidden" data-throw-if-not-resolved="false"></xref> to <xref uid="langword_csharp_false" name="false" href=""></xref>) to which <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref> belongs. */
public void ShowAll()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the range to filter. */
public CellRange Range { get; }

/* Gets the filter columns. */
public FilterColumnCollection Columns { get; }

/* Gets the <xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> sort state. */
public SortState Sort { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextField.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a text field which contains generated text that the application should update periodically. */
public class TextField : TextElement, IColorContext
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Drawing.TextField" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.TextElementType.Field" data-throw-if-not-resolved="false"></xref> value. */
public override TextElementType ElementType { get; }

/* Gets or sets the text. */
public string Text { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FilterColumnCollection.yml:
namespace GemBox.Spreadsheet
{

/* Represents a collection of filter columns. */
public sealed class FilterColumnCollection : IEnumerable<FilterColumn>, IEnumerable
{

/* Returns an enumerator that iterates through the sort levels. */
public IEnumerator<FilterColumn> GetEnumerator()

/* Gets the total number of filter columns in the <xref href="GemBox.Spreadsheet.FilterColumnCollection" data-throw-if-not-resolved="false"></xref>. */
public int Count { get; }

/* Gets the <xref href="GemBox.Spreadsheet.FilterColumn" data-throw-if-not-resolved="false"></xref> at the specified index. */
public FilterColumn this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.Content.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents an arbitrary content that is either embedded in or linked to the workbook file. */
public class Content : IContent
{

/* <p>Opens the content as a <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref>.</p>
<p>Make sure to call <xref href="System.IO.Stream.Dispose" data-throw-if-not-resolved="false"></xref> on the returned instance after it is no longer used and before it gets out of scope.</p> */
public Stream Open()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Drawing.Content" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* <p>Gets the media type of the content.</p>
<p>This value can be <xref uid="langword_csharp_null" name="null" href=""></xref> if the content is not embedded in but is linked to the workbook file.</p> */
public string ContentType { get; }

/* Gets the location of the content that is not embedded in the workbook file. */
public string Link { get; }

/* Gets a value indicating whether this content is linked to the workbook file. */
public bool IsExternal { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.XlsbSaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represent options for saving to XLSB file format (Microsoft Excel Binary File Format). */
public sealed class XlsbSaveOptions : SaveOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.XlsbSaveOptions" data-throw-if-not-resolved="false"></xref> class. */
public XlsbSaveOptions()

/* Gets or sets the password used to protect / encrypt the workbook. */
public string Password { get; set; }

/* Gets or sets a value indicating whether to use ZIP64 extensions when saving an XLSB file. */
public bool EnableZip64 { get; set; }

/* Gets limitations for saving to XLSB file format. */
public override FileFormatLimitations Limitations { get; }

/* Gets or sets the saved images DPI. */
public int ImageDpi { get; set; }

/* Gets the content-type for PDF file format: <strong>application/vnd.ms-excel.sheet.binary.macroEnabled.12</strong>. */
public override string ContentType { get; }

/* Occurs when the saving progress of a file has changed. */
public event EventHandler<OperationProgressChangedEventArgs> ProgressChanged
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextElementType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a text element type enumeration. */
public enum TextElementType
{

/* <xref href="GemBox.Spreadsheet.Drawing.TextRun" data-throw-if-not-resolved="false"></xref> element. */
Run = 0

/* <xref href="GemBox.Spreadsheet.Drawing.TextLineBreak" data-throw-if-not-resolved="false"></xref> element. */
LineBreak = 1

/* <xref href="GemBox.Spreadsheet.Drawing.TextField" data-throw-if-not-resolved="false"></xref> element. */
Field = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SheetVisibility.yml:
namespace GemBox.Spreadsheet
{

/* Script positions used in <xref href="GemBox.Spreadsheet.ExcelWorksheet.Visibility" data-throw-if-not-resolved="false"></xref>. */
public enum SheetVisibility : byte
{

/* Sheet is visible. */
Visible = 0

/* Sheet is hidden, but is displayed in unhide dialog. */
Hidden = 1

/* Sheet is very hidden and can be made visible only programmatically. */
VeryHidden = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.ShapeType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a shape&apos;s geometry type. */
public enum ShapeType
{

/* None. */
None = 0

/* Line. */
Line = 1

/* Elbow Connector. */
ElbowConnector = 2

/* Curved Connector. */
CurvedConnector = 3

/* Rectangle. */
Rectangle = 4

/* Rounded Rectangle. */
RoundedRectangle = 5

/* Snip Single Corner Rectangle. */
SnipSingleCornerRectangle = 6

/* Snip Same Side Corner Rectangle. */
SnipSameSideCornerRectangle = 7

/* Snip Diagonal Corner Rectangle. */
SnipDiagonalCornerRectangle = 8

/* Snip and Round Single Corner Rectangle. */
SnipAndRoundSingleCornerRectangle = 9

/* Round Single Corner Rectangle. */
RoundSingleCornerRectangle = 10

/* Round Same Side Corner Rectangle. */
RoundSameSideCornerRectangle = 11

/* Round Diagonal Corner Rectangle. */
RoundDiagonalCornerRectangle = 12

/* Oval. */
Oval = 13

/* Isosceles Triangle. */
IsoscelesTriangle = 14

/* Right Triangle. */
RightTriangle = 15

/* Parallelogram. */
Parallelogram = 16

/* Trapezoid. */
Trapezoid = 17

/* Diamond. */
Diamond = 18

/* Regular Pentagon. */
RegularPentagon = 19

/* Hexagon. */
Hexagon = 20

/* Heptagon. */
Heptagon = 21

/* Octagon. */
Octagon = 22

/* Decagon. */
Decagon = 23

/* Dodecagon. */
Dodecagon = 24

/* Pie. */
Pie = 25

/* Chord. */
Chord = 26

/* Teardrop. */
Teardrop = 27

/* Frame. */
Frame = 28

/* Half Frame. */
HalfFrame = 29

/* L-Shape. */
LShape = 30

/* Diagonal Stripe. */
DiagonalStripe = 31

/* Cross. */
Cross = 32

/* Plaque. */
Plaque = 33

/* Can. */
Can = 34

/* Cube. */
Cube = 35

/* Bevel. */
Bevel = 36

/* Donut. */
Donut = 37

/* &quot;No&quot; Symbol. */
NoSymbol = 38

/* Block Arc. */
BlockArc = 39

/* Folded Corner. */
FoldedCorner = 40

/* Smiley Face. */
SmileyFace = 41

/* Heart. */
Heart = 42

/* Lightning Bolt. */
LightningBolt = 43

/* Sun. */
Sun = 44

/* Moon. */
Moon = 45

/* Cloud. */
Cloud = 46

/* Arc. */
Arc = 47

/* Double Bracket. */
DoubleBracket = 48

/* Double Brace. */
DoubleBrace = 49

/* Left Bracket. */
LeftBracket = 50

/* Right Bracket. */
RightBracket = 51

/* Left Brace. */
LeftBrace = 52

/* Right Brace. */
RightBrace = 53

/* Right Arrow. */
RightArrow = 54

/* Left Arrow. */
LeftArrow = 55

/* Up Arrow. */
UpArrow = 56

/* Down Arrow. */
DownArrow = 57

/* Left-Right Arrow. */
LeftRightArrow = 58

/* Up-Down Arrow. */
UpDownArrow = 59

/* Quad Arrow. */
QuadArrow = 60

/* Left-Right-Up Arrow. */
LeftRightUpArrow = 61

/* Bent Arrow. */
BentArrow = 62

/* U-Turn Arrow. */
UTurnArrow = 63

/* Left-Up Arrow. */
LeftUpArrow = 64

/* Bent-Up Arrow. */
BentUpArrow = 65

/* Curved Right Arrow. */
CurvedRightArrow = 66

/* Curved Left Arrow. */
CurvedLeftArrow = 67

/* Curved Up Arrow. */
CurvedUpArrow = 68

/* Curved Down Arrow. */
CurvedDownArrow = 69

/* Striped Right Arrow. */
StripedRightArrow = 70

/* Notched Right Arrow. */
NotchedRightArrow = 71

/* Pentagon. */
Pentagon = 72

/* Chevron. */
Chevron = 73

/* Right Arrow Callout. */
RightArrowCallout = 74

/* Down Arrow Callout. */
DownArrowCallout = 75

/* Left Arrow Callout. */
LeftArrowCallout = 76

/* Up Arrow Callout. */
UpArrowCallout = 77

/* Left-Right Arrow Callout. */
LeftRightArrowCallout = 78

/* Quad Arrow Callout. */
QuadArrowCallout = 79

/* Circular Arrow. */
CircularArrow = 80

/* Plus. */
Plus = 81

/* Minus. */
Minus = 82

/* Multiply. */
Multiply = 83

/* Division. */
Division = 84

/* Equal. */
Equal = 85

/* Not Equal. */
NotEqual = 86

/* Flowchart: Process. */
FlowchartProcess = 87

/* Flowchart: Alternate Process. */
FlowchartAlternateProcess = 88

/* Flowchart: Decision. */
FlowchartDecision = 89

/* Flowchart: Data. */
FlowchartData = 90

/* Flowchart: Predefined Process. */
FlowchartPredefinedProcess = 91

/* Flowchart: Internal Storage. */
FlowchartInternalStorage = 92

/* Flowchart: Document. */
FlowchartDocument = 93

/* Flowchart: Multidocument. */
FlowchartMultidocument = 94

/* Flowchart: Terminator. */
FlowchartTerminator = 95

/* Flowchart: Preparation. */
FlowchartPreparation = 96

/* Flowchart: Manual Input. */
FlowchartManualInput = 97

/* Flowchart: Manual Operation. */
FlowchartManualOperation = 98

/* Flowchart: Connector. */
FlowchartConnector = 99

/* Flowchart: Off-page Connector. */
FlowchartOffPageConnector = 100

/* Flowchart: Card. */
FlowchartCard = 101

/* Flowchart: Punched Tape. */
FlowchartPunchedTape = 102

/* Flowchart: Summing Junction. */
FlowchartSummingJunction = 103

/* Flowchart: Or. */
FlowchartOr = 104

/* Flowchart: Collate. */
FlowchartCollate = 105

/* Flowchart: Sort. */
FlowchartSort = 106

/* Flowchart: Extract. */
FlowchartExtract = 107

/* Flowchart: Merge. */
FlowchartMerge = 108

/* Flowchart: Stored Data. */
FlowchartStoredData = 109

/* Flowchart: Delay. */
FlowchartDelay = 110

/* Flowchart: Sequential Access Storage. */
FlowchartSequentialAccessStorage = 111

/* Flowchart: Magnetic Disk. */
FlowchartMagneticDisk = 112

/* Flowchart: Direct Access Storage. */
FlowchartDirectAccessStorage = 113

/* Flowchart: Display. */
FlowchartDisplay = 114

/* Explosion 1. */
Explosion1 = 115

/* Explosion 2. */
Explosion2 = 116

/* 4-Point Star. */
Star4Point = 117

/* 5-Point Star. */
Star5Point = 118

/* 6-Point Star. */
Star6Point = 119

/* 7-Point Star. */
Star7Point = 120

/* 8-Point Star. */
Star8Point = 121

/* 10-Point Star. */
Star10Point = 122

/* 12-Point Star. */
Star12Point = 123

/* 16-Point Star. */
Star16Point = 124

/* 24-Point Star. */
Star24Point = 125

/* 32-Point Star. */
Star32Point = 126

/* Up Ribbon. */
UpRibbon = 127

/* Down Ribbon. */
DownRibbon = 128

/* Curved Up Ribbon. */
CurvedUpRibbon = 129

/* Curved Down Ribbon. */
CurvedDownRibbon = 130

/* Vertical Scroll. */
VerticalScroll = 131

/* Horizontal Scroll. */
HorizontalScroll = 132

/* Wave. */
Wave = 133

/* Double Wave. */
DoubleWave = 134

/* Rectangular Callout. */
RectangularCallout = 135

/* Rounded Rectangular Callout. */
RoundedRectangularCallout = 136

/* Oval Callout. */
OvalCallout = 137

/* Cloud Callout. */
CloudCallout = 138

/* Line Callout 1. */
LineCallout1 = 139

/* Line Callout 2. */
LineCallout2 = 140

/* Line Callout 3. */
LineCallout3 = 141

/* Line Callout 1 (Accent Bar). */
LineCallout1AccentBar = 142

/* Line Callout 2 (Accent Bar). */
LineCallout2AccentBar = 143

/* Line Callout 3 (Accent Bar). */
LineCallout3AccentBar = 144

/* Line Callout 1 (No Border). */
LineCallout1NoBorder = 145

/* Line Callout 2 (No Border). */
LineCallout2NoBorder = 146

/* Line Callout 3 (No Border). */
LineCallout3NoBorder = 147

/* Line Callout 1 (Border and Accent Bar). */
LineCallout1BorderAndAccentBar = 148

/* Line Callout 2 (Border and Accent Bar). */
LineCallout2BorderAndAccentBar = 149

/* Line Callout 3 (Border and Accent Bar). */
LineCallout3BorderAndAccentBar = 150

/* Action Button: Back or Previous. */
ActionButtonBackOrPrevious = 151

/* Action Button: Forward or Next. */
ActionButtonForwardOrNext = 152

/* Action Button: Beginning. */
ActionButtonBeginning = 153

/* Action Button: End. */
ActionButtonEnd = 154

/* Action Button: Home. */
ActionButtonHome = 155

/* Action Button: Information. */
ActionButtonInformation = 156

/* Action Button: Return. */
ActionButtonReturn = 157

/* Action Button: Movie. */
ActionButtonMovie = 158

/* Action Button: Document. */
ActionButtonDocument = 159

/* Action Button: Sound. */
ActionButtonSound = 160

/* Action Button: Help. */
ActionButtonHelp = 161

/* Action Button: Custom. */
ActionButtonCustom = 162

/* Curved Connector 2. */
CurvedConnector2 = 163

/* Curved Connector 4. */
CurvedConnector4 = 164

/* Curved Connector 5. */
CurvedConnector5 = 165

/* Bent Connector 2. */
ElbowConnector2 = 166

/* Bent Connector 4. */
ElbowConnector4 = 167

/* Bent Connector 5. */
ElbowConnector5 = 168

/* <p>Line Inverse.</p><p>Not supported. Use <xref href="GemBox.Spreadsheet.Drawing.ShapeType.Line" data-throw-if-not-resolved="false"></xref> with vertical flip instead.</p> */
LineInverse = 169

/* Straight Connector. */
StraightConnector = 170

/* Chart Plus. */
ChartPlus = 171

/* Chart Star. */
ChartStar = 172

/* Chart X. */
ChartX = 173

/* Corner Tabs. */
CornerTabs = 174

/* Funnel. */
Funnel = 175

/* Gear 6. */
Gear6 = 176

/* Gear 9. */
Gear9 = 177

/* Non-Isosceles Trapezoid. */
NonIsoscelesTrapezoid = 178

/* Pie Wedge. */
PieWedge = 179

/* Plaque Tabs. */
PlaqueTabs = 180

/* Square Tabs. */
SquareTabs = 181

/* Left Circular Arrow. */
LeftCircularArrow = 182

/* Left-Right Circular Arrow. */
LeftRightCircularArrow = 183

/* Swoosh Arrow. */
SwooshArrow = 184

/* Up-Down Arrow Callout. */
UpDownArrowCallout = 185

/* Flowchart: Off-line Storage. */
FlowchartOfflineStorage = 186

/* Left-Right Ribbon. */
LeftRightRibbon = 187

/* Custom. */
Custom = 188
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelCell.yml:
namespace GemBox.Spreadsheet
{

/* Excel cell provides access to a single worksheet cell or to a merged range if the cell is merged. */
public sealed class ExcelCell : AbstractRange, IFormattedStringProvider, IExcelEditor<ExcelCellData>, IFormatHolder<CellFormatData>, IFilterableContent
{

/* Sets the array formula (also known as CSE formula) to the range of cells. */
public void SetArrayFormula(string formula, int rowCount, int columnCount)

/* Sets the dynamic array formula. Dynamic array formulas spill the result of the formula to neighbouring cells
and are recommended as a replacement for array formulas in newer versions of MS Excel. */
public void SetDynamicArrayFormula(string formula)

/* Calculates formula for this excel cell. */
public override void Calculate()

/* Converts <xref href="GemBox.Spreadsheet.ExcelCell.Value" data-throw-if-not-resolved="false"></xref> of this <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref> instance to string representation using <xref href="GemBox.Spreadsheet.CellStyle.NumberFormat" data-throw-if-not-resolved="false"></xref> 
that is specified on this <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref> instance. */
public string GetFormattedValue()

/* Sets the boolean value to this cell or to merged range if this cell is merged. */
public void SetValue(bool value)

/* Sets the integer value to this cell or to merged range if this cell is merged. */
public void SetValue(int value)

/* Sets the double value to this cell or to merged range if this cell is merged. */
public void SetValue(double value)

/* Sets the DateTime value to this cell or to merged range if this cell is merged. */
public void SetValue(DateTime value)

/* Sets the string value to this cell or to merged range if this cell is merged. */
public void SetValue(string value)

/* Loads the specified HTML text as the value of this <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref>. */
public void SetValue(string html, HtmlLoadOptions options)

/* Inserts a cell by shifting cells in the specified direction. */
public override void Insert(InsertShiftDirection direction)

/* Removes a cell by shifting cells in the specified direction. */
public override void Remove(RemoveShiftDirection direction)

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref>s are equal. */
public static bool operator ==(ExcelCell first, ExcelCell second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref>s are not equal. */
public static bool operator !=(ExcelCell first, ExcelCell second)

/* Converts Excel floating-point number to <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> structure. */
public static DateTime ConvertExcelNumberToDateTime(double num, bool use1904DateSystem)

/* Converts <xref href="System.DateTime" data-throw-if-not-resolved="false"></xref> structure to Excel floating-point number. */
public static double ConvertDateTimeToExcelNumber(DateTime date, bool use1904DateSystem)

/* Selects a worksheet region to which the cell belongs to. */
public CellRange GetCurrentRegion()

/* Gets the parent worksheet. */
public ExcelWorksheet Worksheet { get; }

/* Gets row of the cell. */
public ExcelRow Row { get; }

/* Gets column of the cell. */
public ExcelColumn Column { get; }

/* Gets or sets value of this cell or of merged range if this cell is merged. */
public override object Value { get; set; }

/* Gets the cell value type. */
public CellValueType ValueType { get; }

/* Gets the boolean value of this cell or of merged range if this cell is merged. */
public bool BoolValue { get; }

/* Gets the integer value of this cell or of merged range if this cell is merged. */
public int IntValue { get; }

/* Gets the double value of this cell or of merged range if this cell is merged. */
public double DoubleValue { get; }

/* Gets the DateTime value of this cell or of merged range if this cell is merged. */
public DateTime DateTimeValue { get; }

/* Gets the string value of this cell or of merged range if this cell is merged. */
public string StringValue { get; }

/* Gets or sets cell comment. */
public override ExcelComment Comment { get; set; }

/* Gets or sets cell hyperlink. */
public override SpreadsheetHyperlink Hyperlink { get; set; }

/* Gets or sets cell formula string. */
public override string Formula { get; set; }

/* Gets or sets a formula string in R1C1 notation. */
public override string FormulaR1C1 { get; set; }

/* Gets the type of formula stored in this cell. */
public FormulaType FormulaType { get; }

/* Gets the range of cells that are affected by the formula stored in this cell. */
public CellRange FormulaRange { get; }

/* Returns associated merged range if the cell is merged; otherwise, <xref uid="langword_csharp_null" name="null" href=""></xref>. */
public CellRange MergedRange { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.AxisType.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents an axis type. */
public enum AxisType
{

/* Axis type used for categories. */
Category = 0

/* <p>Axis type used for categories which are dates / times.</p> */
Date = 1

/* Axis type used for series values. */
Value = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.LineStyle.yml:
namespace GemBox.Spreadsheet
{

/* Represents the line style of a border in a cell. */
public enum LineStyle
{

/* The line style of a border is none (no border visible). */
None = 0

/* The line style of a border is thin. */
Thin = 1

/* The line style of a border is medium. */
Medium = 2

/* The line style of a border is dashed. */
Dashed = 3

/* The line style of a border is dotted. */
Dotted = 4

/* The line style of a border is thick. */
Thick = 5

/* The line style of a border is double line. */
Double = 6

/* The line style of a border is hairline. */
Hair = 7

/* The line style of a border is medium dashed. */
MediumDashed = 8

/* The line style of a border is dash-dot. */
DashDot = 9

/* The line style of a border is medium dash-dot. */
MediumDashDot = 10

/* The line style of a border is dash-dot-dot. */
DashDotDot = 11

/* The line style of a border is medium dash-dot-dot. */
MediumDashDotDot = 12

/* <p>The line style of a border is slant-dash-dot.</p>
<p>This option is currently not supported in PDF, XPS and image file formats and defaults to <xref href="GemBox.Spreadsheet.LineStyle.MediumDashDot" data-throw-if-not-resolved="false"></xref>.</p> */
SlantDashDot = 13
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelFont.yml:
namespace GemBox.Spreadsheet
{

/* Represents a typeface (for example, <strong>Calibri</strong>), along with its attributes (size, font style, underlining, color, and effects). */
public sealed class ExcelFont
{

/* Minimum font weight. */
public const int MinWeight = 100

/* Normal font weight. */
public const int NormalWeight = 400

/* Default bold font weight. */
public const int BoldWeight = 700

/* Maximum font weight. */
public const int MaxWeight = 1000

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.ExcelFont" data-throw-if-not-resolved="false"></xref> class. */
public ExcelFont()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ExcelFont" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* <p>Gets or sets the face name of this font.</p>
<p>Default value is <strong>Calibri</strong>.</p> */
public string Name { get; set; }

/* <p>Gets or sets the font weight (font boldness).</p>
<p>Value must be between <xref href="GemBox.Spreadsheet.ExcelFont.MinWeight" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.ExcelFont.MaxWeight" data-throw-if-not-resolved="false"></xref>.</p>
<p>For standard boldness, use <xref href="GemBox.Spreadsheet.ExcelFont.BoldWeight" data-throw-if-not-resolved="false"></xref>.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.ExcelFont.NormalWeight" data-throw-if-not-resolved="false"></xref>.</p> */
public int Weight { get; set; }

/* <p>Gets or sets a value indicating whether to display characters in italic font style.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool Italic { get; set; }

/* <p>Gets or sets the size of the text in twips (1/20th of a point).</p>
<p>Default value is 11 * 20 = 220.</p> */
public int Size { get; set; }

/* <p>Gets or sets the color of the text.</p>
<p>Default value is color created from name <xref href="GemBox.Spreadsheet.ColorName.Text1" data-throw-if-not-resolved="false"></xref>.</p> */
public SpreadsheetColor Color { get; set; }

/* <p>Gets or sets the underline formatting of the text.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.UnderlineStyle.None" data-throw-if-not-resolved="false"></xref>.</p> */
public UnderlineStyle UnderlineStyle { get; set; }

/* <p>Gets or sets a value indicating whether to draw a strike-through line through the horizontal middle of the text.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool Strikeout { get; set; }

/* <p>Gets or sets the vertical position of the text relative to the text&apos;s default appearance.</p>
<p>Default value is <xref href="GemBox.Spreadsheet.ScriptPosition.Normal" data-throw-if-not-resolved="false"></xref>.</p> */
public ScriptPosition ScriptPosition { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SpreadsheetColor.yml:
namespace GemBox.Spreadsheet
{

/* Represents a spreadsheet color. */
public struct SpreadsheetColor : IEquatable<SpreadsheetColor>
{

/* Creates a <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref> structure from a 32-bit ARGB value. */
public static SpreadsheetColor FromArgb(int argb)

/* Creates a <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref> structure from the specified 8-bit color values (red, green, and blue). The alpha value is implicitly 255 (fully opaque). Although this method allows a 32-bit value to be passed for each color component, the value of each component is limited to 8 bits. */
public static SpreadsheetColor FromArgb(int red, int green, int blue)

/* Creates a <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref> structure from the specified predefined color. */
public static SpreadsheetColor FromName(ColorName name)

/* Gets the 32-bit ARGB value of this <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref> structure. */
public int ToArgb()

/* Determines whether the <code data-dev-comment-type="paramref" class="paramref">other</code> <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref> instance. */
public bool Equals(SpreadsheetColor other)

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref>s are equal. */
public static bool operator ==(SpreadsheetColor first, SpreadsheetColor second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref>s are not equal. */
public static bool operator !=(SpreadsheetColor first, SpreadsheetColor second)

/* Performs an implicit conversion from <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref> to <xref href="GemBox.Drawing.Color" data-throw-if-not-resolved="false"></xref>. */
public static implicit operator Color(SpreadsheetColor color)

/* Performs an implicit conversion from <xref href="GemBox.Drawing.Color" data-throw-if-not-resolved="false"></xref> to <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref>. */
public static implicit operator SpreadsheetColor(Color color)

/* Specifies whether this <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref> structure is uninitialized. */
public bool IsEmpty { get; }

/* Gets the red component value of this <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref> structure. */
public byte R { get; }

/* Gets the green component value of this <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref> structure. */
public byte G { get; }

/* Gets the blue component value of this <xref href="GemBox.Spreadsheet.SpreadsheetColor" data-throw-if-not-resolved="false"></xref> structure. */
public byte B { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.WorkbookProtection.yml:
namespace GemBox.Spreadsheet
{

/* Protection settings.
Supported in XLSX only. */
public sealed class WorkbookProtection
{

/* Sets the password for protected workbook. */
public void SetPassword(string password)

/* Gets or sets the password hash for protected workbook. */
public int PasswordHash { get; set; }

/* Gets or sets if workbook structure is protected.
Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>. */
public bool ProtectStructure { get; set; }

/* Gets or sets if workbook window is protected.
Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>. */
public bool ProtectWindows { get; set; }

/* Gets a value indicating whether the protected workbook has a passoword. */
public bool HasPassword { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.yml:
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotField.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a field within a <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref>. */
public sealed class PivotField
{

/* Removes the sort options from this pivot field. */
public void ClearSort()

/* Sorts this pivot field by the pivot items in it. */
public void Sort(bool descending)

/* <p>Sorts this pivot field by the data field.</p>
<p>Pivot items can be used to specify the row (or column) that will be used to sort the pivot field.</p> */
public void Sort(bool descending, PivotField sortByDataField, params PivotItem[] sortByPivotItems)

/* Collapse/expand entire <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>. */
public void Collapse(bool collapsed)

/* Gets or sets a value indicating whether this field can be dragged to the hide position. */
public bool DragToHide { get; set; }

/* Gets or sets a value indicating whether this field can be dragged to the row position. */
public bool DragToRow { get; set; }

/* Gets or sets a value indicating whether this field can be dragged to the column position. */
public bool DragToColumn { get; set; }

/* Gets or sets a value indicating whether this field can be dragged to the page position. */
public bool DragToPage { get; set; }

/* Gets or sets a value indicating whether this field can be dragged to the data position. */
public bool DragToData { get; set; }

/* Gets or sets a value indicating whether this field can have multiple items selected in the page field. */
public bool EnableMultiplePageItems { get; set; }

/* Gets or sets a value indicating whether to insert a blank row after each item. */
public bool InsertBlankRow { get; set; }

/* Gets or sets a value indicating whether to insert a page break after each item. */
public bool InsertPageBreak { get; set; }

/* Gets or sets the layout form for this <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>. */
public PivotFieldLayoutForm LayoutForm { get; set; }

/* Gets or sets a value indicating whether to show all items for this field. */
public bool ShowAll { get; set; }

/* Gets or sets a value indicating whether to repeat item labels. */
public bool RepeatItemLabels { get; set; }

/* Specifies a boolean value that indicates whether all items in the field are expanded. Applies only to OLAP PivotTables. */
public bool AllDrilled { get; set; }

/* Gets the parent <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref>. */
public PivotTable PivotTable { get; }

/* Gets the collection of all (visible and hidden) <xref href="GemBox.Spreadsheet.PivotTables.PivotItem" data-throw-if-not-resolved="false"></xref>s in this <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>. */
public PivotItemCollection PivotItems { get; }

/* Gets the source name (cache field name) of this <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>. */
public string SourceName { get; }

/* Gets or sets the custom name (label text) of this <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>. */
public string Name { get; set; }

/* Gets the <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>&apos;s formula in A1-style notation. */
public string Formula { get; }

/* Gets a value indicating whether this <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> is a calculated field. */
public bool IsCalculated { get; }

/* <p>Gets or sets the subtotals displayed with this <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>.</p>
<p>This property is applicable only for non-data fields.</p> */
public PivotFieldSubtotalTypes Subtotals { get; set; }

/* <p>Gets or sets the function used to summarize/aggregate this <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>.</p>
<p>This property is applicable only for data fields.</p> */
public PivotFieldCalculationType Function { get; set; }

/* <p>Gets or sets the display format for this <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>.</p>
<p>This property is applicable only for data fields.</p> */
public PivotFieldDisplayFormat ShowDataAs { get; set; }

/* <p>Gets or sets the base field used for a custom calculation.</p>
<p>This property is applicable only for data fields.</p> */
public PivotField BaseField { get; set; }

/* <p>Gets or sets the item in the <xref href="GemBox.Spreadsheet.PivotTables.PivotField.BaseField" data-throw-if-not-resolved="false"></xref> used for a custom calculation.</p>
<p>This property is applicable only for data fields.</p>
<p>Use <xref href="GemBox.Spreadsheet.PivotTables.PivotField.BaseItemPosition" data-throw-if-not-resolved="false"></xref> property to specify <xref href="GemBox.Spreadsheet.PivotTables.PivotItemPosition.Previous" data-throw-if-not-resolved="false"></xref> or <xref href="GemBox.Spreadsheet.PivotTables.PivotItemPosition.Next" data-throw-if-not-resolved="false"></xref> item, otherwise use this property.</p> */
public PivotItem BaseItem { get; set; }

/* <p>Gets or sets the item position in the <xref href="GemBox.Spreadsheet.PivotTables.PivotField.BaseField" data-throw-if-not-resolved="false"></xref> used for a custom calculation.</p>
<p>This property is applicable only for data fields.</p>
<p>Use this property to specify <xref href="GemBox.Spreadsheet.PivotTables.PivotItemPosition.Previous" data-throw-if-not-resolved="false"></xref> or <xref href="GemBox.Spreadsheet.PivotTables.PivotItemPosition.Next" data-throw-if-not-resolved="false"></xref> item, otherwise use <xref href="GemBox.Spreadsheet.PivotTables.PivotField.BaseItem" data-throw-if-not-resolved="false"></xref> property.</p> */
public PivotItemPosition BaseItemPosition { get; set; }

/* <p>Gets or sets the current page item showing for the page field.</p>
<p>This property is applicable only for page fields.</p>
<p>If set to <xref uid="langword_csharp_null" name="null" href=""></xref>, no current page item will be defined.</p> */
public PivotItem CurrentPageItem { get; set; }

/* <p>Gets or sets the number format which indicates how to format the numeric value of this field.</p>
<p>Default value is <strong>General</strong>.</p>
<p>If set to <xref uid="langword_csharp_null" name="null" href=""></xref>, number format will be set to default.</p> */
public string NumberFormat { get; set; }

/* Gets the sort options of this pivot field. */
public PivotTableSortOptions SortOptions { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.InsertDataTableOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for inserting data from <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> to <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public sealed class InsertDataTableOptions
{

/* Initializes an instance of <xref href="GemBox.Spreadsheet.InsertDataTableOptions" data-throw-if-not-resolved="false"></xref> class. */
public InsertDataTableOptions()

/* Initializes an instance of <xref href="GemBox.Spreadsheet.InsertDataTableOptions" data-throw-if-not-resolved="false"></xref> class. */
public InsertDataTableOptions(int startRow, int startColumn)

/* Initializes an instance of <xref href="GemBox.Spreadsheet.InsertDataTableOptions" data-throw-if-not-resolved="false"></xref> class. */
public InsertDataTableOptions(string startCell)

/* Gets or sets the index of the first row of inserted data in <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int StartRow { get; set; }

/* Gets or sets the index of the first column of inserted data in <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int StartColumn { get; set; }

/* Gets or sets a value indicating whether to insert column headers. */
public bool ColumnHeaders { get; set; }

/* Event that fires when converting <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> cell value to <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref> value. */
public event EventHandler<DataTableCellToExcelCellConvertingEventArgs> DataTableCellToExcelCellConverting
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextRun.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a run of text. */
public class TextRun : TextElement, IColorContext
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Drawing.TextRun" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.TextElementType.Run" data-throw-if-not-resolved="false"></xref> value. */
public override TextElementType ElementType { get; }

/* Gets or sets the text. */
public string Text { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a condition that formats only cells with text that satisfies the specified criteria. */
public sealed class ContainTextCondition : ContainCondition, IFormatHolder<CellFormatData>
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets the operator of this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition" data-throw-if-not-resolved="false"></xref>. */
public ContainTextOperator Operator { get; set; }

/* <p>Gets or sets the value of this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ContainTextCondition" data-throw-if-not-resolved="false"></xref>.</p>
<p>Value can be either constant or formula.</p>
<p>If value is constant, then it cannot be <xref uid="langword_csharp_null" name="null" href=""></xref>.</p>
<p>If value is formula, it must start with &apos;=&apos;.</p> */
public string Value { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a condition that formats fill of all cells based on their values using a specified 2-point or 3-point color scale. */
public sealed class ColorScaleCondition : FormatCondition, IFormatHolder<CellFormatData>
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the <xref href="GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.ColorScale" data-throw-if-not-resolved="false"></xref> value. */
public override FormatConditionType ConditionType { get; }

/* Gets the minimum color point. */
public ConditionalColor Minimum { get; }

/* Gets the midpoint color point or <xref uid="langword_csharp_null" name="null" href=""></xref> if conditional formatting rule is &apos;<strong>2-Color Scale</strong>&apos;. */
public ConditionalColor Midpoint { get; }

/* Gets the maximum color point. */
public ConditionalColor Maximum { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ChartPlotArea.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a chart plot area. */
public sealed class ChartPlotArea : IChartObject
{

/* Gets or sets the fill formating options. */
public FillFormat Fill { get; set; }

/* Gets or sets the outline formating options. */
public LineFormat Outline { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.FormatCondition.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a base class for all conditions that can be specified in a conditional formatting rule. */
public abstract class FormatCondition : IFormatHolder<CellFormatData>
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.FormatCondition" data-throw-if-not-resolved="false"></xref> instance. */
public abstract override string ToString()

/* Gets the condition type. */
public abstract FormatConditionType ConditionType { get; }

/* Gets the conditional formatting rule associated with this condition. */
public ConditionalFormatRule Rule { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ChartDataLabels.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents the settings for the data labels for an entire series or the entire chart. */
public sealed class ChartDataLabels
{

/* Shows the value in the data label. */
public void Show()

/* <p>Shows the value in the data label at the specified position.</p>
<p>
<xref href="GemBox.Spreadsheet.Charts.ColumnChart" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.Charts.BarChart" data-throw-if-not-resolved="false"></xref> support <xref href="GemBox.Spreadsheet.Charts.DataLabelPosition.Center" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.Charts.DataLabelPosition.InsideEnd" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.Charts.DataLabelPosition.InsideBase" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.Charts.DataLabelPosition.OutsideEnd" data-throw-if-not-resolved="false"></xref> data label positions.</p>
<p>
<xref href="GemBox.Spreadsheet.Charts.LineChart" data-throw-if-not-resolved="false"></xref> supports <xref href="GemBox.Spreadsheet.Charts.DataLabelPosition.Center" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.Charts.DataLabelPosition.Left" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.Charts.DataLabelPosition.Right" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.Charts.DataLabelPosition.Top" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.Charts.DataLabelPosition.Bottom" data-throw-if-not-resolved="false"></xref> data label positions.</p>
<p>
<xref href="GemBox.Spreadsheet.Charts.PieChart" data-throw-if-not-resolved="false"></xref> supports <xref href="GemBox.Spreadsheet.Charts.DataLabelPosition.Center" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.Charts.DataLabelPosition.InsideEnd" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.Charts.DataLabelPosition.OutsideEnd" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.Charts.DataLabelPosition.BestFit" data-throw-if-not-resolved="false"></xref> data label positions.</p>
<p>
<xref href="GemBox.Spreadsheet.Charts.AreaChart" data-throw-if-not-resolved="false"></xref> supports none of the data label positions. Use <xref href="GemBox.Spreadsheet.Charts.ChartDataLabels.Show" data-throw-if-not-resolved="false"></xref> overload for <xref href="GemBox.Spreadsheet.Charts.AreaChart" data-throw-if-not-resolved="false"></xref> instead.</p> */
public void Show(DataLabelPosition labelPosition)

/* Deletes data labels. */
public void Delete()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Charts.ChartDataLabels" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets a value indicating whether the series name should be shown in a data label. */
public bool LabelContainsSeriesName { get; set; }

/* Gets or sets a value indicating whether the category name should be shown in a data label. */
public bool LabelContainsCategoryName { get; set; }

/* Gets or sets a value indicating whether the value should be shown in a data label. */
public bool LabelContainsValue { get; set; }

/* Gets or sets a value indicating whether the percentage should be shown in a data label. */
public bool LabelContainsPercentage { get; set; }

/* Gets or sets a value indicating whether leader lines should be shown for data labels. */
public bool ShowLeaderLines { get; set; }

/* Gets or sets a value indicating whether the legend key should be shown in a data label. */
public bool LabelContainsLegendKey { get; set; }

/* Gets or sets value from cells as a cell range reference (for example, &apos;Sheet1!A1:D1&apos;) that should be shown in a data label.
Null if value from cells should not be shown. */
public string LabelContainsValueFromCells { get; set; }

/* Gets or sets the text that should be used to separate the parts of a data label. */
public string Separator { get; set; }

/* Gets or sets the position of the data label. */
public DataLabelPosition LabelPosition { get; set; }

/* Gets or sets the number format used for formatting data labels.
If <xref href="GemBox.Spreadsheet.Charts.ChartDataLabels.NumberFormatLinkedToSource" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>, then number format from chart&apos;s source data (cells) will be used to format data labels.
Setting this property, sets <xref href="GemBox.Spreadsheet.Charts.ChartDataLabels.NumberFormatLinkedToSource" data-throw-if-not-resolved="false"></xref> to <xref uid="langword_csharp_false" name="false" href=""></xref>. */
public string NumberFormat { get; set; }

/* Gets or sets a value indicating whether number format from chart&apos;s source data (cells) will be used to format data labels. */
public bool NumberFormatLinkedToSource { get; set; }

/* Gets or sets the fill formating options. */
public FillFormat Fill { get; set; }

/* Gets or sets the outline formating options. */
public LineFormat Outline { get; set; }

/* Gets or sets the text formatting options. */
public TextFormat TextFormat { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ColumnChart.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a chart whose series values are drawn using vertical rectangles. */
public sealed class ColumnChart : ExcelChart, IDocumentPaginatorSource, IChartTitleParent, IChartObject, IChartDataLabelsDataProvider, IColorContext
{

/* Gets the chart type for <xref href="GemBox.Spreadsheet.Charts.ColumnChart" data-throw-if-not-resolved="false"></xref> which is <xref href="GemBox.Spreadsheet.Charts.ChartType.Column" data-throw-if-not-resolved="false"></xref>. */
public override ChartType ChartType { get; }

/* Gets or sets the chart grouping. */
public ChartGrouping Grouping { get; set; }

/* Gets the chart axes. */
public ChartAxes Axes { get; }

/* <p>Gets or sets the width of the series gap.</p>
<p>Default value is 2.19 if <xref href="GemBox.Spreadsheet.Charts.ColumnChart.Grouping" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.Charts.ChartGrouping.Clustered" data-throw-if-not-resolved="false"></xref>; otherwise, 1.5.</p> */
public double SeriesGapWidth { get; set; }

/* <p>Gets or sets the series overlap.</p>
<p>Default value is -0.27 if <xref href="GemBox.Spreadsheet.Charts.ColumnChart.Grouping" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.Charts.ChartGrouping.Clustered" data-throw-if-not-resolved="false"></xref>; otherwise, 1.</p> */
public double SeriesOverlap { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ClearOptions.yml:
namespace GemBox.Spreadsheet
{

/* Specifies the clear options. */
[Flags]
public enum ClearOptions
{

/* Clears the cell content. */
Content = 1

/* Clears the cell formatting. */
Format = 2

/* Clears the cell comment. */
Comment = 4

/* Clears the cell hyperlink. */
Hyperlink = 8

/* Clears everything (content, formatting, comment and hyperlink). */
All = 15
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Tables.TableColumnCollection.yml:
namespace GemBox.Spreadsheet.Tables
{

/* A collection of <xref href="GemBox.Spreadsheet.Tables.TableColumn" data-throw-if-not-resolved="false"></xref> items.
Supported in XLSX only. */
public sealed class TableColumnCollection : IEnumerable<TableColumn>, IEnumerable
{

/* Gets the collection enumerator. */
public IEnumerator<TableColumn> GetEnumerator()

/* Adds a new <xref href="GemBox.Spreadsheet.Tables.TableColumn" data-throw-if-not-resolved="false"></xref> to the collection. */
public TableColumn Add()

/* Inserts a new <xref href="GemBox.Spreadsheet.Tables.TableColumn" data-throw-if-not-resolved="false"></xref> at the specified index. */
public TableColumn Insert(int index)

/* Removes the <xref href="GemBox.Spreadsheet.Tables.TableColumn" data-throw-if-not-resolved="false"></xref> at the specified index. */
public void RemoveAt(int index)

/* Removes the specified <xref href="GemBox.Spreadsheet.Tables.TableColumn" data-throw-if-not-resolved="false"></xref>. */
public bool Remove(TableColumn column)

/* Gets the number of <xref href="GemBox.Spreadsheet.Tables.TableColumn" data-throw-if-not-resolved="false"></xref>s contained in the collection. */
public int Count { get; }

/* Gets the <xref href="GemBox.Spreadsheet.Tables.TableColumn" data-throw-if-not-resolved="false"></xref> at the specified index. */
public TableColumn this[int index] { get; }

/* Gets <xref href="GemBox.Spreadsheet.Tables.TableColumn" data-throw-if-not-resolved="false"></xref> described by name from the collection. */
public TableColumn this[string name] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelColumnRowBase.yml:
namespace GemBox.Spreadsheet
{

/* Base class for the excel column and row classes. */
public abstract class ExcelColumnRowBase : IExcelEditor<ExcelColumnRowBaseData>, IFormatHolder<CellFormatData>
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ExcelColumnRowBase" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.ExcelColumnRowBase" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.ExcelColumnRowBase" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.ExcelColumnRowBase" data-throw-if-not-resolved="false"></xref>s are equal. */
public static bool operator ==(ExcelColumnRowBase first, ExcelColumnRowBase second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.ExcelColumnRowBase" data-throw-if-not-resolved="false"></xref>s are not equal. */
public static bool operator !=(ExcelColumnRowBase first, ExcelColumnRowBase second)

/* Gets cell range with column / row cells. */
public CellRange Cells { get; }

/* Gets the row / column zero-based index which represents its position in a worksheet. */
public int Index { get; }

/* Gets the name of <xref href="GemBox.Spreadsheet.ExcelColumnRowBase" data-throw-if-not-resolved="false"></xref> instance. */
public string Name { get; }

/* Gets or sets the cell formatting of cells in this column / row. */
public CellStyle Style { get; set; }

/* Gets or sets whether object is collapsed in outlining. */
public bool Collapsed { get; set; }

/* Gets or sets outline level. */
public int OutlineLevel { get; set; }

/* Gets or sets whether excel object is hidden. */
public bool Hidden { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ColumnTypeResolution.yml:
namespace GemBox.Spreadsheet
{

/* Defines resolution method that determines <xref href="System.Data.DataColumn.DataType" data-throw-if-not-resolved="false"></xref>. */
public enum ColumnTypeResolution
{

/* All columns will be of type <xref href="System.Object" data-throw-if-not-resolved="false"></xref>. */
Object = 0

/* All columns  will be of type <xref href="System.String" data-throw-if-not-resolved="false"></xref>. For conversion from some <xref href="GemBox.Spreadsheet.ExcelCell.Value" data-throw-if-not-resolved="false"></xref> to string <xref href="System.Globalization.CultureInfo.InvariantCulture" data-throw-if-not-resolved="false"></xref> will be used. */
StringInvariantCulture = 1

/* All columns  will be of type <xref href="System.String" data-throw-if-not-resolved="false"></xref>. For conversion from some <xref href="GemBox.Spreadsheet.ExcelCell.Value" data-throw-if-not-resolved="false"></xref> to string <xref href="System.Globalization.CultureInfo.CurrentCulture" data-throw-if-not-resolved="false"></xref> will be used. */
StringCurrentCulture = 2

/* If all values in some column have the same type then that type will be used for <xref href="System.Data.DataColumn.DataType" data-throw-if-not-resolved="false"></xref>, otherwise
column will be of type <xref href="System.Object" data-throw-if-not-resolved="false"></xref>. */
Auto = 3

/* If all values in some column have the same type then that type will be used for <xref href="System.Data.DataColumn.DataType" data-throw-if-not-resolved="false"></xref>, otherwise
column will be of type <xref href="System.String" data-throw-if-not-resolved="false"></xref>. For conversion from some <xref href="GemBox.Spreadsheet.ExcelCell.Value" data-throw-if-not-resolved="false"></xref> to string <xref href="System.Globalization.CultureInfo.InvariantCulture" data-throw-if-not-resolved="false"></xref> will be used. */
AutoPreferStringInvariantCulture = 4

/* If all values in some column have the same type then that type will be used for <xref href="System.Data.DataColumn.DataType" data-throw-if-not-resolved="false"></xref>, otherwise
column will be of type <xref href="System.String" data-throw-if-not-resolved="false"></xref>. For conversion from some <xref href="GemBox.Spreadsheet.ExcelCell.Value" data-throw-if-not-resolved="false"></xref> to string <xref href="System.Globalization.CultureInfo.CurrentCulture" data-throw-if-not-resolved="false"></xref> will be used. */
AutoPreferStringCurrentCulture = 5
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SelectionType.yml:
namespace GemBox.Spreadsheet
{

/* Defines the selection which will be saved or printed. */
public enum SelectionType
{

/* Select <xref href="GemBox.Spreadsheet.ExcelWorksheetCollection.ActiveWorksheet" data-throw-if-not-resolved="false"></xref>. */
ActiveSheet = 0

/* Select all sheets in <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref>. */
EntireFile = 1
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.FillFormat.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a base class for fills such as solid, gradient, pattern, etc. */
public abstract class FillFormat
{

/* Sets the fill to none, thus making the area transparent. */
public FillFormat SetNone()

/* Sets the fill to the solid fill. */
public SolidFillFormat SetSolid(DrawingColor color)

/* Sets the fill to the pattern fill. */
public PatternFillFormat SetPattern(PatternFillType patternType, DrawingColor foregroundColor, DrawingColor backgroundColor)

/* Gets the type of the fill. */
public abstract FillFormatType FillType { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.OptionButton.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents an Option (Radio) Button Form Control. */
public class OptionButton : ExcelFormControl, IDocumentPaginatorSource
{

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.FormControlType.OptionButton" data-throw-if-not-resolved="false"></xref> value. */
public override FormControlType FormControlType { get; }

/* Gets or sets the value indicating whether this option button is checked. */
public bool Checked { get; set; }

/* Gets or sets the cell which holds the value of this option button. */
public ExcelCell CellLink { get; set; }

/* Gets the text content and formatting associated with this <xref href="GemBox.Spreadsheet.Drawing.OptionButton" data-throw-if-not-resolved="false"></xref>. */
public TextBox Text { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.DrawingColorName.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a color name. */
public enum DrawingColorName
{

/* The &apos;<strong>Empty</strong>&apos; color. */
None = 0

/* The &apos;<strong>Custom</strong>&apos; color. */
Custom = 1

/* The &apos;<strong>Transparent</strong>&apos; color. Values: RGB = 0x000000, RGB = (0, 0, 0), HSL = (0, 0, 0). */
Transparent = 2

/* Standard &apos;<strong>Alice Blue</strong>&apos; color. Values: RGB = 0xF0F8FF, RGB = (240, 248, 255), HSL = (147, 255, 248). */
AliceBlue = 3

/* Standard &apos;<strong>Antique White</strong>&apos; color. Values: RGB = 0xFAEBD7, RGB = (250, 235, 215), HSL = (24, 198, 233). */
AntiqueWhite = 4

/* Standard &apos;<strong>Aqua</strong>&apos; color. Values: RGB = 0x00FFFF, RGB = (0, 255, 255), HSL = (128, 255, 128). */
Aqua = 5

/* Standard &apos;<strong>Aquamarine</strong>&apos; color. Values: RGB = 0x7FFFD4, RGB = (127, 255, 212), HSL = (113, 255, 191). */
Aquamarine = 6

/* Standard &apos;<strong>Azure</strong>&apos; color. Values: RGB = 0xF0FFFF, RGB = (240, 255, 255), HSL = (128, 255, 248). */
Azure = 7

/* Standard &apos;<strong>Beige</strong>&apos; color. Values: RGB = 0xF5F5DC, RGB = (245, 245, 220), HSL = (43, 142, 233). */
Beige = 8

/* Standard &apos;<strong>Bisque</strong>&apos; color. Values: RGB = 0xFFE4C4, RGB = (255, 228, 196), HSL = (23, 255, 226). */
Bisque = 9

/* Standard &apos;<strong>Black</strong>&apos; color. Values: RGB = 0x000000, RGB = (0, 0, 0), HSL = (0, 0, 0). */
Black = 10

/* Standard &apos;<strong>Blanched Almond</strong>&apos; color. Values: RGB = 0xFFEBCD, RGB = (255, 235, 205), HSL = (25, 255, 230). */
BlanchedAlmond = 11

/* Standard &apos;<strong>Blue</strong>&apos; color. Values: RGB = 0x0000FF, RGB = (0, 0, 255), HSL = (170, 255, 128). */
Blue = 12

/* Standard &apos;<strong>Blue Violet</strong>&apos; color. Values: RGB = 0x8A2BE2, RGB = (138, 43, 226), HSL = (192, 194, 135). */
BlueViolet = 13

/* Standard &apos;<strong>Brown</strong>&apos; color. Values: RGB = 0xA52A2A, RGB = (165, 42, 42), HSL = (0, 152, 104). */
Brown = 14

/* Standard &apos;<strong>Burly Wood</strong>&apos; color. Values: RGB = 0xDEB887, RGB = (222, 184, 135), HSL = (24, 145, 179). */
BurlyWood = 15

/* Standard &apos;<strong>Cadet Blue</strong>&apos; color. Values: RGB = 0x5F9EA0, RGB = (95, 158, 160), HSL = (129, 65, 128). */
CadetBlue = 16

/* Standard &apos;<strong>Chartreuse</strong>&apos; color. Values: RGB = 0x7FFF00, RGB = (127, 255, 0), HSL = (64, 255, 128). */
Chartreuse = 17

/* Standard &apos;<strong>Chocolate</strong>&apos; color. Values: RGB = 0xD2691E, RGB = (210, 105, 30), HSL = (18, 191, 120). */
Chocolate = 18

/* Standard &apos;<strong>Coral</strong>&apos; color. Values: RGB = 0xFF7F50, RGB = (255, 127, 80), HSL = (11, 255, 168). */
Coral = 19

/* Standard &apos;<strong>Cornflower Blue</strong>&apos; color. Values: RGB = 0x6495ED, RGB = (100, 149, 237), HSL = (155, 202, 169). */
CornflowerBlue = 20

/* Standard &apos;<strong>Cornsilk</strong>&apos; color. Values: RGB = 0xFFF8DC, RGB = (255, 248, 220), HSL = (34, 255, 238). */
Cornsilk = 21

/* Standard &apos;<strong>Crimson</strong>&apos; color. Values: RGB = 0xDC143C, RGB = (220, 20, 60), HSL = (247, 213, 120). */
Crimson = 22

/* Standard &apos;<strong>Dark Blue</strong>&apos; color. Values: RGB = 0x00008B, RGB = (0, 0, 139), HSL = (170, 255, 70). */
DarkBlue = 23

/* Standard &apos;<strong>Dark Cyan</strong>&apos; color. Values: RGB = 0x008B8B, RGB = (0, 139, 139), HSL = (128, 255, 70). */
DarkCyan = 24

/* Standard &apos;<strong>Dark Goldenrod</strong>&apos; color. Values: RGB = 0xB8860B, RGB = (184, 134, 11), HSL = (30, 226, 98). */
DarkGoldenrod = 25

/* Standard &apos;<strong>Dark Gray</strong>&apos; color. Values: RGB = 0xA9A9A9, RGB = (169, 169, 169), HSL = (0, 0, 169). */
DarkGray = 26

/* Standard &apos;<strong>Dark Green</strong>&apos; color. Values: RGB = 0x006400, RGB = (0, 100, 0), HSL = (85, 255, 50). */
DarkGreen = 27

/* Standard &apos;<strong>Dark Khaki</strong>&apos; color. Values: RGB = 0xBDB76B, RGB = (189, 183, 107), HSL = (39, 98, 148). */
DarkKhaki = 28

/* Standard &apos;<strong>Dark Magenta</strong>&apos; color. Values: RGB = 0x8B008B, RGB = (139, 0, 139), HSL = (213, 255, 70). */
DarkMagenta = 29

/* Standard &apos;<strong>Dark Olive Green</strong>&apos; color. Values: RGB = 0x556B2F, RGB = (85, 107, 47), HSL = (58, 99, 77). */
DarkOliveGreen = 30

/* Standard &apos;<strong>Dark Orange</strong>&apos; color. Values: RGB = 0xFF8C00, RGB = (255, 140, 0), HSL = (23, 255, 128). */
DarkOrange = 31

/* Standard &apos;<strong>Dark Orchid</strong>&apos; color. Values: RGB = 0x9932CC, RGB = (153, 50, 204), HSL = (198, 155, 127). */
DarkOrchid = 32

/* Standard &apos;<strong>Dark Red</strong>&apos; color. Values: RGB = 0x8B0000, RGB = (139, 0, 0), HSL = (0, 255, 70). */
DarkRed = 33

/* Standard &apos;<strong>Dark Salmon</strong>&apos; color. Values: RGB = 0xE9967A, RGB = (233, 150, 122), HSL = (11, 183, 178). */
DarkSalmon = 34

/* Standard &apos;<strong>Dark Sea Green</strong>&apos; color. Values: RGB = 0x8FBC8F, RGB = (143, 188, 143), HSL = (85, 64, 166). */
DarkSeaGreen = 35

/* Standard &apos;<strong>Dark Slate Blue</strong>&apos; color. Values: RGB = 0x483D8B, RGB = (72, 61, 139), HSL = (176, 99, 100). */
DarkSlateBlue = 36

/* Standard &apos;<strong>Dark Slate Gray</strong>&apos; color. Values: RGB = 0x2F4F4F, RGB = (47, 79, 79), HSL = (128, 65, 63). */
DarkSlateGray = 37

/* Standard &apos;<strong>Dark Turquoise</strong>&apos; color. Values: RGB = 0x00CED1, RGB = (0, 206, 209), HSL = (128, 255, 105). */
DarkTurquoise = 38

/* Standard &apos;<strong>Dark Violet</strong>&apos; color. Values: RGB = 0x9400D3, RGB = (148, 0, 211), HSL = (200, 255, 106). */
DarkViolet = 39

/* Standard &apos;<strong>Deep Pink</strong>&apos; color. Values: RGB = 0xFF1493, RGB = (255, 20, 147), HSL = (232, 255, 138). */
DeepPink = 40

/* Standard &apos;<strong>Deep Sky Blue</strong>&apos; color. Values: RGB = 0x00BFFF, RGB = (0, 191, 255), HSL = (138, 255, 128). */
DeepSkyBlue = 41

/* Standard &apos;<strong>Dim Gray</strong>&apos; color. Values: RGB = 0x696969, RGB = (105, 105, 105), HSL = (0, 0, 105). */
DimGray = 42

/* Standard &apos;<strong>Dodger Blue</strong>&apos; color. Values: RGB = 0x1E90FF, RGB = (30, 144, 255), HSL = (148, 255, 143). */
DodgerBlue = 43

/* Standard &apos;<strong>Firebrick</strong>&apos; color. Values: RGB = 0xB22222, RGB = (178, 34, 34), HSL = (0, 173, 106). */
Firebrick = 44

/* Standard &apos;<strong>Floral White</strong>&apos; color. Values: RGB = 0xFFFAF0, RGB = (255, 250, 240), HSL = (28, 255, 248). */
FloralWhite = 45

/* Standard &apos;<strong>Forest Green</strong>&apos; color. Values: RGB = 0x228B22, RGB = (34, 139, 34), HSL = (85, 155, 86). */
ForestGreen = 46

/* Standard &apos;<strong>Gainsboro</strong>&apos; color. Values: RGB = 0xDCDCDC, RGB = (220, 220, 220), HSL = (0, 0, 220). */
Gainsboro = 47

/* Standard &apos;<strong>Ghost White</strong>&apos; color. Values: RGB = 0xF8F8FF, RGB = (248, 248, 255), HSL = (170, 255, 252). */
GhostWhite = 48

/* Standard &apos;<strong>Gold</strong>&apos; color. Values: RGB = 0xFFD700, RGB = (255, 215, 0), HSL = (36, 255, 128). */
Gold = 49

/* Standard &apos;<strong>Goldenrod</strong>&apos; color. Values: RGB = 0xDAA520, RGB = (218, 165, 32), HSL = (30, 190, 125). */
Goldenrod = 50

/* Standard &apos;<strong>Gray</strong>&apos; color. Values: RGB = 0x808080, RGB = (128, 128, 128), HSL = (0, 0, 128). */
Gray = 51

/* Standard &apos;<strong>Green</strong>&apos; color. Values: RGB = 0x008000, RGB = (0, 128, 0), HSL = (85, 255, 64). */
Green = 52

/* Standard &apos;<strong>Green Yellow</strong>&apos; color. Values: RGB = 0xADFF2F, RGB = (173, 255, 47), HSL = (59, 255, 151). */
GreenYellow = 53

/* Standard &apos;<strong>Honeydew</strong>&apos; color. Values: RGB = 0xF0FFF0, RGB = (240, 255, 240), HSL = (85, 255, 248). */
Honeydew = 54

/* Standard &apos;<strong>Hot Pink</strong>&apos; color. Values: RGB = 0xFF69B4, RGB = (255, 105, 180), HSL = (234, 255, 180). */
HotPink = 55

/* Standard &apos;<strong>Indian Red</strong>&apos; color. Values: RGB = 0xCD5C5C, RGB = (205, 92, 92), HSL = (0, 135, 149). */
IndianRed = 56

/* Standard &apos;<strong>Indigo</strong>&apos; color. Values: RGB = 0x4B0082, RGB = (75, 0, 130), HSL = (195, 255, 65). */
Indigo = 57

/* Standard &apos;<strong>Ivory</strong>&apos; color. Values: RGB = 0xFFFFF0, RGB = (255, 255, 240), HSL = (43, 255, 248). */
Ivory = 58

/* Standard &apos;<strong>Khaki</strong>&apos; color. Values: RGB = 0xF0E68C, RGB = (240, 230, 140), HSL = (38, 196, 190). */
Khaki = 59

/* Standard &apos;<strong>Lavender</strong>&apos; color. Values: RGB = 0xE6E6FA, RGB = (230, 230, 250), HSL = (170, 170, 240). */
Lavender = 60

/* Standard &apos;<strong>Lavender Blush</strong>&apos; color. Values: RGB = 0xFFF0F5, RGB = (255, 240, 245), HSL = (241, 255, 248). */
LavenderBlush = 61

/* Standard &apos;<strong>Lawn Green</strong>&apos; color. Values: RGB = 0x7CFC00, RGB = (124, 252, 0), HSL = (64, 255, 126). */
LawnGreen = 62

/* Standard &apos;<strong>Lemon Chiffon</strong>&apos; color. Values: RGB = 0xFFFACD, RGB = (255, 250, 205), HSL = (38, 255, 230). */
LemonChiffon = 63

/* Standard &apos;<strong>Light Blue</strong>&apos; color. Values: RGB = 0xADD8E6, RGB = (173, 216, 230), HSL = (138, 136, 202). */
LightBlue = 64

/* Standard &apos;<strong>Light Coral</strong>&apos; color. Values: RGB = 0xF08080, RGB = (240, 128, 128), HSL = (0, 201, 184). */
LightCoral = 65

/* Standard &apos;<strong>Light Cyan</strong>&apos; color. Values: RGB = 0xE0FFFF, RGB = (224, 255, 255), HSL = (128, 255, 240). */
LightCyan = 66

/* Standard &apos;<strong>Light Goldenrod Yellow</strong>&apos; color. Values: RGB = 0xFAFAD2, RGB = (250, 250, 210), HSL = (43, 204, 230). */
LightGoldenrodYellow = 67

/* Standard &apos;<strong>Light Gray</strong>&apos; color. Values: RGB = 0xD3D3D3, RGB = (211, 211, 211), HSL = (0, 0, 211). */
LightGray = 68

/* Standard &apos;<strong>Light Green</strong>&apos; color. Values: RGB = 0x90EE90, RGB = (144, 238, 144), HSL = (85, 187, 191). */
LightGreen = 69

/* Standard &apos;<strong>Light Pink</strong>&apos; color. Values: RGB = 0xFFB6C1, RGB = (255, 182, 193), HSL = (249, 255, 219). */
LightPink = 70

/* Standard &apos;<strong>Light Salmon</strong>&apos; color. Values: RGB = 0xFFA07A, RGB = (255, 160, 122), HSL = (12, 255, 189). */
LightSalmon = 71

/* Standard &apos;<strong>Light Sea Green</strong>&apos; color. Values: RGB = 0x20B2AA, RGB = (32, 178, 170), HSL = (125, 177, 105). */
LightSeaGreen = 72

/* Standard &apos;<strong>Light Sky Blue</strong>&apos; color. Values: RGB = 0x87CEFA, RGB = (135, 206, 250), HSL = (144, 235, 193). */
LightSkyBlue = 73

/* Standard &apos;<strong>Light Slate Gray</strong>&apos; color. Values: RGB = 0x778899, RGB = (119, 136, 153), HSL = (149, 36, 136). */
LightSlateGray = 74

/* Standard &apos;<strong>Light Steel Blue</strong>&apos; color. Values: RGB = 0xB0C4DE, RGB = (176, 196, 222), HSL = (152, 105, 199). */
LightSteelBlue = 75

/* Standard &apos;<strong>Light Yellow</strong>&apos; color. Values: RGB = 0xFFFFE0, RGB = (255, 255, 224), HSL = (43, 255, 240). */
LightYellow = 76

/* Standard &apos;<strong>Lime</strong>&apos; color. Values: RGB = 0x00FF00, RGB = (0, 255, 0), HSL = (85, 255, 128). */
Lime = 77

/* Standard &apos;<strong>Lime Green</strong>&apos; color. Values: RGB = 0x32CD32, RGB = (50, 205, 50), HSL = (85, 155, 128). */
LimeGreen = 78

/* Standard &apos;<strong>Linen</strong>&apos; color. Values: RGB = 0xFAF0E6, RGB = (250, 240, 230), HSL = (21, 170, 240). */
Linen = 79

/* Standard &apos;<strong>Magenta</strong>&apos; color. Values: RGB = 0xFF00FF, RGB = (255, 0, 255), HSL = (213, 255, 128). */
Magenta = 80

/* Standard &apos;<strong>Maroon</strong>&apos; color. Values: RGB = 0x800000, RGB = (128, 0, 0), HSL = (0, 255, 64). */
Maroon = 81

/* Standard &apos;<strong>Medium Aquamarine</strong>&apos; color. Values: RGB = 0x66CDAA, RGB = (102, 205, 170), HSL = (113, 129, 154). */
MediumAquamarine = 82

/* Standard &apos;<strong>Medium Blue</strong>&apos; color. Values: RGB = 0x0000CD, RGB = (0, 0, 205), HSL = (170, 255, 103). */
MediumBlue = 83

/* Standard &apos;<strong>Medium Orchid</strong>&apos; color. Values: RGB = 0xBA55D3, RGB = (186, 85, 211), HSL = (204, 150, 148). */
MediumOrchid = 84

/* Standard &apos;<strong>Medium Purple</strong>&apos; color. Values: RGB = 0x9370DB, RGB = (147, 112, 219), HSL = (184, 152, 165). */
MediumPurple = 85

/* Standard &apos;<strong>Medium Sea Green</strong>&apos; color. Values: RGB = 0x3CB371, RGB = (60, 179, 113), HSL = (104, 127, 120). */
MediumSeaGreen = 86

/* Standard &apos;<strong>Medium Slate Blue</strong>&apos; color. Values: RGB = 0x7B68EE, RGB = (123, 104, 238), HSL = (176, 203, 171). */
MediumSlateBlue = 87

/* Standard &apos;<strong>Medium Spring Green</strong>&apos; color. Values: RGB = 0x00FA9A, RGB = (0, 250, 154), HSL = (111, 255, 125). */
MediumSpringGreen = 88

/* Standard &apos;<strong>Medium Turquoise</strong>&apos; color. Values: RGB = 0x48D1CC, RGB = (72, 209, 204), HSL = (126, 153, 141). */
MediumTurquoise = 89

/* Standard &apos;<strong>Medium Violet Red</strong>&apos; color. Values: RGB = 0xC71585, RGB = (199, 21, 133), HSL = (228, 206, 110). */
MediumVioletRed = 90

/* Standard &apos;<strong>Midnight Blue</strong>&apos; color. Values: RGB = 0x191970, RGB = (25, 25, 112), HSL = (170, 162, 69). */
MidnightBlue = 91

/* Standard &apos;<strong>Mint Cream</strong>&apos; color. Values: RGB = 0xF5FFFA, RGB = (245, 255, 250), HSL = (106, 255, 250). */
MintCream = 92

/* Standard &apos;<strong>Misty Rose</strong>&apos; color. Values: RGB = 0xFFE4E1, RGB = (255, 228, 225), HSL = (4, 255, 240). */
MistyRose = 93

/* Standard &apos;<strong>Moccasin</strong>&apos; color. Values: RGB = 0xFFE4B5, RGB = (255, 228, 181), HSL = (27, 255, 218). */
Moccasin = 94

/* Standard &apos;<strong>Navajo White</strong>&apos; color. Values: RGB = 0xFFDEAD, RGB = (255, 222, 173), HSL = (25, 255, 214). */
NavajoWhite = 95

/* Standard &apos;<strong>Navy</strong>&apos; color. Values: RGB = 0x000080, RGB = (0, 0, 128), HSL = (170, 255, 64). */
Navy = 96

/* Standard &apos;<strong>Old Lace</strong>&apos; color. Values: RGB = 0xFDF5E6, RGB = (253, 245, 230), HSL = (28, 217, 242). */
OldLace = 97

/* Standard &apos;<strong>Olive</strong>&apos; color. Values: RGB = 0x808000, RGB = (128, 128, 0), HSL = (43, 255, 64). */
Olive = 98

/* Standard &apos;<strong>Olive Drab</strong>&apos; color. Values: RGB = 0x6B8E23, RGB = (107, 142, 35), HSL = (56, 154, 89). */
OliveDrab = 99

/* Standard &apos;<strong>Orange</strong>&apos; color. Values: RGB = 0xFFA500, RGB = (255, 165, 0), HSL = (28, 255, 128). */
Orange = 100

/* Standard &apos;<strong>Orange Red</strong>&apos; color. Values: RGB = 0xFF4500, RGB = (255, 69, 0), HSL = (12, 255, 128). */
OrangeRed = 101

/* Standard &apos;<strong>Orchid</strong>&apos; color. Values: RGB = 0xDA70D6, RGB = (218, 112, 214), HSL = (214, 150, 165). */
Orchid = 102

/* Standard &apos;<strong>Pale Goldenrod</strong>&apos; color. Values: RGB = 0xEEE8AA, RGB = (238, 232, 170), HSL = (39, 170, 204). */
PaleGoldenrod = 103

/* Standard &apos;<strong>Pale Green</strong>&apos; color. Values: RGB = 0x98FB98, RGB = (152, 251, 152), HSL = (85, 236, 202). */
PaleGreen = 104

/* Standard &apos;<strong>Pale Turquoise</strong>&apos; color. Values: RGB = 0xAFEEEE, RGB = (175, 238, 238), HSL = (128, 166, 207). */
PaleTurquoise = 105

/* Standard &apos;<strong>Pale Violet Red</strong>&apos; color. Values: RGB = 0xDB7093, RGB = (219, 112, 147), HSL = (241, 152, 165). */
PaleVioletRed = 106

/* Standard &apos;<strong>Papaya Whip</strong>&apos; color. Values: RGB = 0xFFEFD5, RGB = (255, 239, 213), HSL = (26, 255, 234). */
PapayaWhip = 107

/* Standard &apos;<strong>Peach Puff</strong>&apos; color. Values: RGB = 0xFFDAB9, RGB = (255, 218, 185), HSL = (20, 255, 220). */
PeachPuff = 108

/* Standard &apos;<strong>Peru</strong>&apos; color. Values: RGB = 0xCD853F, RGB = (205, 133, 63), HSL = (21, 150, 134). */
Peru = 109

/* Standard &apos;<strong>Pink</strong>&apos; color. Values: RGB = 0xFFC0CB, RGB = (255, 192, 203), HSL = (248, 255, 224). */
Pink = 110

/* Standard &apos;<strong>Plum</strong>&apos; color. Values: RGB = 0xDDA0DD, RGB = (221, 160, 221), HSL = (213, 121, 191). */
Plum = 111

/* Standard &apos;<strong>Powder Blue</strong>&apos; color. Values: RGB = 0xB0E0E6, RGB = (176, 224, 230), HSL = (132, 132, 203). */
PowderBlue = 112

/* Standard &apos;<strong>Purple</strong>&apos; color. Values: RGB = 0x800080, RGB = (128, 0, 128), HSL = (213, 255, 64). */
Purple = 113

/* Standard &apos;<strong>Red</strong>&apos; color. Values: RGB = 0xFF0000, RGB = (255, 0, 0), HSL = (0, 255, 128). */
Red = 114

/* Standard &apos;<strong>Rosy Brown</strong>&apos; color. Values: RGB = 0xBC8F8F, RGB = (188, 143, 143), HSL = (0, 64, 166). */
RosyBrown = 115

/* Standard &apos;<strong>Royal Blue</strong>&apos; color. Values: RGB = 0x4169E1, RGB = (65, 105, 225), HSL = (159, 185, 145). */
RoyalBlue = 116

/* Standard &apos;<strong>Saddle Brown</strong>&apos; color. Values: RGB = 0x8B4513, RGB = (139, 69, 19), HSL = (18, 194, 79). */
SaddleBrown = 117

/* Standard &apos;<strong>Salmon</strong>&apos; color. Values: RGB = 0xFA8072, RGB = (250, 128, 114), HSL = (4, 238, 182). */
Salmon = 118

/* Standard &apos;<strong>Sandy Brown</strong>&apos; color. Values: RGB = 0xF4A460, RGB = (244, 164, 96), HSL = (20, 222, 170). */
SandyBrown = 119

/* Standard &apos;<strong>Sea Green</strong>&apos; color. Values: RGB = 0x2E8B57, RGB = (46, 139, 87), HSL = (104, 128, 93). */
SeaGreen = 120

/* Standard &apos;<strong>Sea Shell</strong>&apos; color. Values: RGB = 0xFFF5EE, RGB = (255, 245, 238), HSL = (18, 255, 247). */
SeaShell = 121

/* Standard &apos;<strong>Sienna</strong>&apos; color. Values: RGB = 0xA0522D, RGB = (160, 82, 45), HSL = (14, 143, 103). */
Sienna = 122

/* Standard &apos;<strong>Silver</strong>&apos; color. Values: RGB = 0xC0C0C0, RGB = (192, 192, 192), HSL = (0, 0, 192). */
Silver = 123

/* Standard &apos;<strong>Sky Blue</strong>&apos; color. Values: RGB = 0x87CEEB, RGB = (135, 206, 235), HSL = (140, 182, 185). */
SkyBlue = 124

/* Standard &apos;<strong>Slate Blue</strong>&apos; color. Values: RGB = 0x6A5ACD, RGB = (106, 90, 205), HSL = (176, 136, 148). */
SlateBlue = 125

/* Standard &apos;<strong>Slate Gray</strong>&apos; color. Values: RGB = 0x708090, RGB = (112, 128, 144), HSL = (149, 32, 128). */
SlateGray = 126

/* Standard &apos;<strong>Snow</strong>&apos; color. Values: RGB = 0xFFFAFA, RGB = (255, 250, 250), HSL = (0, 255, 253). */
Snow = 127

/* Standard &apos;<strong>Spring Green</strong>&apos; color. Values: RGB = 0x00FF7F, RGB = (0, 255, 127), HSL = (106, 255, 128). */
SpringGreen = 128

/* Standard &apos;<strong>Steel Blue</strong>&apos; color. Values: RGB = 0x4682B4, RGB = (70, 130, 180), HSL = (147, 112, 125). */
SteelBlue = 129

/* Standard &apos;<strong>Tan</strong>&apos; color. Values: RGB = 0xD2B48C, RGB = (210, 180, 140), HSL = (24, 112, 175). */
Tan = 130

/* Standard &apos;<strong>Teal</strong>&apos; color. Values: RGB = 0x008080, RGB = (0, 128, 128), HSL = (128, 255, 64). */
Teal = 131

/* Standard &apos;<strong>Thistle</strong>&apos; color. Values: RGB = 0xD8BFD8, RGB = (216, 191, 216), HSL = (213, 62, 204). */
Thistle = 132

/* Standard &apos;<strong>Tomato</strong>&apos; color. Values: RGB = 0xFF6347, RGB = (255, 99, 71), HSL = (6, 255, 163). */
Tomato = 133

/* Standard &apos;<strong>Turquoise</strong>&apos; color. Values: RGB = 0x40E0D0, RGB = (64, 224, 208), HSL = (123, 184, 144). */
Turquoise = 134

/* Standard &apos;<strong>Violet</strong>&apos; color. Values: RGB = 0xEE82EE, RGB = (238, 130, 238), HSL = (213, 194, 184). */
Violet = 135

/* Standard &apos;<strong>Wheat</strong>&apos; color. Values: RGB = 0xF5DEB3, RGB = (245, 222, 179), HSL = (28, 196, 212). */
Wheat = 136

/* Standard &apos;<strong>White</strong>&apos; color. Values: RGB = 0xFFFFFF, RGB = (255, 255, 255), HSL = (0, 0, 255). */
White = 137

/* Standard &apos;<strong>White Smoke</strong>&apos; color. Values: RGB = 0xF5F5F5, RGB = (245, 245, 245), HSL = (0, 0, 245). */
WhiteSmoke = 138

/* Standard &apos;<strong>Yellow</strong>&apos; color. Values: RGB = 0xFFFF00, RGB = (255, 255, 0), HSL = (43, 255, 128). */
Yellow = 139

/* Standard &apos;<strong>Yellow Green</strong>&apos; color. Values: RGB = 0x9ACD32, RGB = (154, 205, 50), HSL = (56, 155, 128). */
YellowGreen = 140

/* Theme &apos;<strong>Style</strong>&apos; color. A color used in theme definitions which means to use the color of the style. Default Office theme values depend on the Office version, in Office 2010: RGB = 0x000000, RGB = (0, 0, 0), HSL = (0, 0, 0). */
ThemeStyle = 141

/* Theme &apos;<strong>Dark 1</strong>&apos; color. Main dark color 1. Default Office theme values depend on the Office version, in Office 2010: RGB = 0x000000, RGB = (0, 0, 0), HSL = (0, 0, 0). */
ThemeDark1 = 142

/* Theme &apos;<strong>Light 1</strong>&apos; color. Main light color 1. Default Office theme values depend on the Office version, in Office 2010: RGB = 0xFFFFFF, RGB = (255, 255, 255), HSL = (0, 0, 255). */
ThemeLight1 = 143

/* Theme &apos;<strong>Dark 2</strong>&apos; color. Main dark color 2. Default Office theme values depend on the Office version, in Office 2010: RGB = 0x1F497D, RGB = (31, 73, 125), HSL = (151, 154, 78). */
ThemeDark2 = 144

/* Theme &apos;<strong>Light 2</strong>&apos; color. Main light color 2. Default Office theme values depend on the Office version, in Office 2010: RGB = 0xEEECE1, RGB = (238, 236, 225), HSL = (36, 71, 232). */
ThemeLight2 = 145

/* Theme &apos;<strong>Accent 1</strong>&apos; color. Extra theme color 1. Default Office theme values depend on the Office version, in Office 2010: RGB = 0x4F81BD, RGB = (79, 129, 189), HSL = (151, 116, 134). */
ThemeAccent1 = 146

/* Theme &apos;<strong>Accent 2</strong>&apos; color. Extra theme color 2. Default Office theme values depend on the Office version, in Office 2010: RGB = 0xC0504D, RGB = (192, 80, 77), HSL = (1, 122, 135). */
ThemeAccent2 = 147

/* Theme &apos;<strong>Accent 3</strong>&apos; color. Extra theme color 3. Default Office theme values depend on the Office version, in Office 2010: RGB = 0x9BBB59, RGB = (155, 187, 89), HSL = (56, 107, 138). */
ThemeAccent3 = 148

/* Theme &apos;<strong>Accent 4</strong>&apos; color. Extra theme color 4. Default Office theme values depend on the Office version, in Office 2010: RGB = 0x8064A2, RGB = (128, 100, 162), HSL = (189, 64, 131). */
ThemeAccent4 = 149

/* Theme &apos;<strong>Accent 5</strong>&apos; color. Extra theme color 5. Default Office theme values depend on the Office version, in Office 2010: RGB = 0x4BACC6, RGB = (75, 172, 198), HSL = (136, 132, 137). */
ThemeAccent5 = 150

/* Theme &apos;<strong>Accent 6</strong>&apos; color. Extra theme color 6. Default Office theme values depend on the Office version, in Office 2010: RGB = 0xF79646, RGB = (247, 150, 70), HSL = (19, 234, 159). */
ThemeAccent6 = 151

/* Theme &apos;<strong>Hyperlink</strong>&apos; color. Default Office theme values depend on the Office version, in Office 2010: RGB = 0x0000FF, RGB = (0, 0, 255), HSL = (170, 255, 128). */
ThemeHyperlink = 152

/* Theme &apos;<strong>Followed Hyperlink</strong>&apos; color. Default Office theme values depend on the Office version, in Office 2010: RGB = 0x800080, RGB = (128, 0, 128), HSL = (213, 255, 64). */
ThemeFollowedHyperlink = 153

/* Theme &apos;<strong>Background 1</strong>&apos; color. Semantic background color. Default Office theme values depend on the Office version, in Office 2010: RGB = 0xFFFFFF, RGB = (255, 255, 255), HSL = (0, 0, 255). */
ThemeBackground1 = 154

/* Theme &apos;<strong>Text 1</strong>&apos; color. Semantic text color. Default Office theme values depend on the Office version, in Office 2010: RGB = 0x000000, RGB = (0, 0, 0), HSL = (0, 0, 0). */
ThemeText1 = 155

/* Theme &apos;<strong>Background 2</strong>&apos; color. Semantic additional background color. Default Office theme values depend on the Office version, in Office 2010: RGB = 0xEEECE1, RGB = (238, 236, 225), HSL = (36, 71, 232). */
ThemeBackground2 = 156

/* Theme &apos;<strong>Text 2</strong>&apos; color. Semantic additional text color. Default Office theme values depend on the Office version, in Office 2010: RGB = 0x1F497D, RGB = (31, 73, 125), HSL = (151, 154, 78). */
ThemeText2 = 157

/* System &apos;<strong>3D Dark</strong>&apos; color. Specifies a Dark shadow color for three-dimensional display elements. Default Windows system values: RGB = 0x696969, RGB = (105, 105, 105), HSL = (0, 0, 105). */
System3DDark = 158

/* System &apos;<strong>3D Light</strong>&apos; color. Specifies a Light color for three-dimensional display elements (for edges facing the light source). Default Windows system values: RGB = 0xE3E3E3, RGB = (227, 227, 227), HSL = (0, 0, 227). */
System3DLight = 159

/* System &apos;<strong>Active Border</strong>&apos; color. Specifies an Active Window Border Color. Default Windows system values: RGB = 0xB4B4B4, RGB = (180, 180, 180), HSL = (0, 0, 180). */
SystemActiveBorder = 160

/* System &apos;<strong>Active Caption</strong>&apos; color. Specifies the active window title bar color. In particular the left side color in the color gradient of an active window&apos;s title bar if the gradient effect is enabled. Default Windows system values: RGB = 0x99B4D1, RGB = (153, 180, 209), HSL = (150, 96, 181). */
SystemActiveCaption = 161

/* System &apos;<strong>Application Workspace</strong>&apos; color. Specifies the Background color of multiple document interface (MDI) applications. Default Windows system values: RGB = 0xABABAB, RGB = (171, 171, 171), HSL = (0, 0, 171). */
SystemApplicationWorkspace = 162

/* System &apos;<strong>Background</strong>&apos; color. Specifies the desktop background color. Default Windows system values: RGB = 0x000000, RGB = (0, 0, 0), HSL = (0, 0, 0). */
SystemBackground = 163

/* System &apos;<strong>Button Face</strong>&apos; color. Specifies the face color for three-dimensional display elements and for dialog box backgrounds. Default Windows system values: RGB = 0xF0F0F0, RGB = (240, 240, 240), HSL = (0, 0, 240). */
SystemButtonFace = 164

/* System &apos;<strong>Button Highlight</strong>&apos; color. Specifies the highlight color for three-dimensional display elements (for edges facing the light source). Default Windows system values: RGB = 0xFFFFFF, RGB = (255, 255, 255), HSL = (0, 0, 255). */
SystemButtonHighlight = 165

/* System &apos;<strong>Button Shadow</strong>&apos; color. Specifies the shadow color for three-dimensional display elements (for edges facing away from the light source). Default Windows system values: RGB = 0xA0A0A0, RGB = (160, 160, 160), HSL = (0, 0, 160). */
SystemButtonShadow = 166

/* System &apos;<strong>Button Text</strong>&apos; color. Specifies the color of text on push buttons. Default Windows system values: RGB = 0x000000, RGB = (0, 0, 0), HSL = (0, 0, 0). */
SystemButtonText = 167

/* System &apos;<strong>Caption Text</strong>&apos; color. Specifies the color of text in the caption, size box, and scroll bar arrow box. Default Windows system values: RGB = 0x000000, RGB = (0, 0, 0), HSL = (0, 0, 0). */
SystemCaptionText = 168

/* System &apos;<strong>Gradient Active Caption</strong>&apos; color. Specifies the right side color in the color gradient of an active window&apos;s title bar. Default Windows system values: RGB = 0xB9D1EA, RGB = (185, 209, 234), HSL = (149, 137, 210). */
SystemGradientActiveCaption = 169

/* System &apos;<strong>Gradient Inactive Caption</strong>&apos; color. Specifies the right side color in the color gradient of an inactive window&apos;s title bar. Default Windows system values: RGB = 0xD7E4F2, RGB = (215, 228, 242), HSL = (150, 130, 228). */
SystemGradientInactiveCaption = 170

/* System &apos;<strong>Gray Text</strong>&apos; color. Specifies a grayed (disabled) text. This color is set to 0 if the current display driver does not support a solid gray color. Default Windows system values: RGB = 0x6D6D6D, RGB = (109, 109, 109), HSL = (0, 0, 109). */
SystemGrayText = 171

/* System &apos;<strong>Highlight</strong>&apos; color. Specifies the color of Item(s) selected in a control. Default Windows system values: RGB = 0x3399FF, RGB = (51, 153, 255), HSL = (149, 255, 153). */
SystemHighlight = 172

/* System &apos;<strong>Highlight Text</strong>&apos; color. Specifies the text color of item(s) selected in a control. Default Windows system values: RGB = 0xFFFFFF, RGB = (255, 255, 255), HSL = (0, 0, 255). */
SystemHighlightText = 173

/* System &apos;<strong>Hot Light</strong>&apos; color. Specifies the color for a hyperlink or hot-tracked item. Default Windows system values: RGB = 0x0066CC, RGB = (0, 102, 204), HSL = (149, 255, 102). */
SystemHotLight = 174

/* System &apos;<strong>Inactive Border</strong>&apos; color. Specifies the color of the Inactive window border. Default Windows system values: RGB = 0xF4F7FC, RGB = (244, 247, 252), HSL = (154, 146, 248). */
SystemInactiveBorder = 175

/* System &apos;<strong>Inactive Caption</strong>&apos; color. Specifies the color of the Inactive window caption. Specifies the left side color in the color gradient of an inactive window&apos;s title bar if the gradient effect is enabled. Default Windows system values: RGB = 0xBFCDDB, RGB = (191, 205, 219), HSL = (149, 71, 205). */
SystemInactiveCaption = 176

/* System &apos;<strong>Inactive Caption Text</strong>&apos; color. Specifies the color of text in an inactive caption. Default Windows system values: RGB = 0x434E54, RGB = (67, 78, 84), HSL = (142, 29, 76). */
SystemInactiveCaptionText = 177

/* System &apos;<strong>Info Back</strong>&apos; color. Specifies the background color for tooltip controls. Default Windows system values: RGB = 0xFFFFE1, RGB = (255, 255, 225), HSL = (43, 255, 240). */
SystemInfoBack = 178

/* System &apos;<strong>Info Text</strong>&apos; color. Specifies the text color for tooltip controls. Default Windows system values: RGB = 0x000000, RGB = (0, 0, 0), HSL = (0, 0, 0). */
SystemInfoText = 179

/* System &apos;<strong>Menu</strong>&apos; color. Specifies the menu background color. Default Windows system values: RGB = 0xF0F0F0, RGB = (240, 240, 240), HSL = (0, 0, 240). */
SystemMenu = 180

/* System &apos;<strong>Menu Bar</strong>&apos; color. Specifies the background color for the menu bar when menus appear as flat menus. Default Windows system values: RGB = 0xF0F0F0, RGB = (240, 240, 240), HSL = (0, 0, 240). */
SystemMenuBar = 181

/* System &apos;<strong>Menu Highlight</strong>&apos; color. Specifies the color used to highlight menu items when the menu appears as a flat menu. Default Windows system values: RGB = 0x3399FF, RGB = (51, 153, 255), HSL = (149, 255, 153). */
SystemMenuHighlight = 182

/* System &apos;<strong>Menu Text</strong>&apos; color. Specifies the color of Text in menus. Default Windows system values: RGB = 0x000000, RGB = (0, 0, 0), HSL = (0, 0, 0). */
SystemMenuText = 183

/* System &apos;<strong>Scroll Bar</strong>&apos; color. Specifies the scroll bar gray area color. Default Windows system values: RGB = 0xC8C8C8, RGB = (200, 200, 200), HSL = (0, 0, 200). */
SystemScrollBar = 184

/* System &apos;<strong>Window</strong>&apos; color. Specifies window background color. Default Windows system values: RGB = 0xFFFFFF, RGB = (255, 255, 255), HSL = (0, 0, 255). */
SystemWindow = 185

/* System &apos;<strong>Window Frame</strong>&apos; color. Specifies the window frame color. Default Windows system values: RGB = 0x646464, RGB = (100, 100, 100), HSL = (0, 0, 100). */
SystemWindowFrame = 186

/* System &apos;<strong>Window Text</strong>&apos; color. Specifies the color of text in windows. Default Windows system values: RGB = 0x000000, RGB = (0, 0, 0), HSL = (0, 0, 0). */
SystemWindowText = 187
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelWorksheetCollection.yml:
namespace GemBox.Spreadsheet
{

/* Collection of worksheets (<xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>). */
public sealed class ExcelWorksheetCollection : IEnumerable<ExcelWorksheet>, IEnumerable
{

/* Removes the worksheet with the specified index. */
public void Remove(int worksheetIndex)

/* Removes the worksheet with the specified name. */
public void Remove(string worksheetName)

/* Inserts empty worksheet at the specified index. */
public ExcelWorksheet InsertEmpty(int worksheetIndex, string worksheetName)

/* Inserts empty worksheet at the specified index. */
public ExcelWorksheet InsertEmpty(int worksheetIndex, SheetType type, string worksheetName)

/* Inserts a copy of an existing worksheet at the specified index. */
public ExcelWorksheet InsertCopy(int worksheetIndex, string worksheetName, ExcelWorksheet sourceWorksheet)

/* Adds an empty worksheet to the end of the collection. */
public ExcelWorksheet Add(string worksheetName)

/* Adds an empty worksheet to the end of the collection. */
public ExcelWorksheet Add(SheetType type, string worksheetName)

/* Adds a copy of an existing worksheet to the end of the collection. */
public ExcelWorksheet AddCopy(string destinationWorksheetName, ExcelWorksheet sourceWorksheet)

/* Moves the worksheet at the specified index to a new location in the collection. */
public void Move(int oldIndex, int newIndex)

/* Returns an enumerator for the <xref href="GemBox.Spreadsheet.ExcelWorksheetCollection" data-throw-if-not-resolved="false"></xref>. */
public IEnumerator<ExcelWorksheet> GetEnumerator()

/* Determines whether an <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> element is in the <xref href="GemBox.Spreadsheet.ExcelWorksheetCollection" data-throw-if-not-resolved="false"></xref>. */
public bool Contains(ExcelWorksheet item)

/* Determines whether an <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> element with specified name is in the <xref href="GemBox.Spreadsheet.ExcelWorksheetCollection" data-throw-if-not-resolved="false"></xref>. */
public bool Contains(string worksheetName)

/* Gets the worksheet with the specified index. */
public ExcelWorksheet this[int index] { get; }

/* Gets the worksheet with the specified name. */
public ExcelWorksheet this[string name] { get; }

/* Gets or sets active worksheet. */
public ExcelWorksheet ActiveWorksheet { get; set; }

/* Gets the number of elements contained in the <xref href="GemBox.Spreadsheet.ExcelWorksheetCollection" data-throw-if-not-resolved="false"></xref>. */
public int Count { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ConditionalColor.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a conditional color used in <xref href="GemBox.Spreadsheet.ConditionalFormatting.ColorScaleCondition" data-throw-if-not-resolved="false"></xref> of a conditional formatting rule to specify color scale point. */
public sealed class ConditionalColor : ConditionalObject
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalColor" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets the color. */
public SpreadsheetColor Color { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a condition that formats all cells based on their values by displaying an icon from the specified icon set according to cell&apos;s value. */
public sealed class IconSetCondition : FormatCondition, IFormatHolder<CellFormatData>
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* <p>Gets or sets a value indicating whether to show icon only.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref> (cell value is shown together with icon).</p> */
public bool ShowIconOnly { get; set; }

/* Gets the icons. */
public ConditionalIconCollection Icons { get; }

/* Gets the <xref href="GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.IconSet" data-throw-if-not-resolved="false"></xref> value. */
public override FormatConditionType ConditionType { get; }

/* <p>Gets or sets a value indicating whether the order of icons should be reversed.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool ReverseIconOrder { get; set; }

/* <p>Gets or sets the icon style for all icons contained in the <xref href="GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition.Icons" data-throw-if-not-resolved="false"></xref> collection.</p>
<p>If icons are of different <xref href="GemBox.Spreadsheet.SpreadsheetIconStyle" data-throw-if-not-resolved="false"></xref> or are not ordered, then <xref href="GemBox.Spreadsheet.SpreadsheetIconStyle.Custom" data-throw-if-not-resolved="false"></xref> is returned.</p> */
public SpreadsheetIconStyle IconStyle { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotCacheSourceType.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Specifies the type of the <xref href="GemBox.Spreadsheet.PivotTables.PivotCache" data-throw-if-not-resolved="false"></xref> source. */
public enum PivotCacheSourceType
{

/* Indicates that the cache contains worksheet data. */
Worksheet = 0

/* Indicates that the cache contains data that consolidates ranges. */
Consolidation = 1

/* Indicates that the cache contains data from an external data source. */
External = 2

/* Indicates that the cache contains a scenario summary report. */
Scenario = 3
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.PatternFillFormat.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a fill with a repeated pattern of foreground and background color. */
public sealed class PatternFillFormat : FillFormat
{

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.FillFormatType.Pattern" data-throw-if-not-resolved="false"></xref> value. */
public override FillFormatType FillType { get; }

/* Gets or sets the type of the fill pattern. */
public PatternFillType PatternType { get; set; }

/* Gets or sets the foreground color. */
public DrawingColor ForegroundColor { get; set; }

/* Gets or sets the background color. */
public DrawingColor BackgroundColor { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotTableSortOptions.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents the sort options of a pivot field. */
public sealed class PivotTableSortOptions
{

/* Gets a value indicating whether the sort is descending. */
public bool Descending { get; }

/* Gets a data field that is used to sort the pivot field. */
public PivotField DataField { get; }

/* Gets the pivot items that specify the row (or column) that will be used to sort the pivot field. */
public ReadOnlyCollection<PivotItem> PivotItems { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Tables.TotalsRowFunction.yml:
namespace GemBox.Spreadsheet.Tables
{

/* Total row functions. */
public enum TotalsRowFunction
{

/* Custom function. */
Custom = -1

/* None. */
None = 0

/* Average. */
Average = 101

/* Count of number cells. */
CountNumber = 102

/* Count of number and non-empty cells. */
Count = 103

/* Maximum value. */
Max = 104

/* Minimum value. */
Min = 105

/* Standard deviation. */
StdDev = 107

/* Sum. */
Sum = 109

/* Variance. */
Var = 110
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.TextDirection.yml:
namespace GemBox.Spreadsheet
{

/* Represents available reading order options used in <xref href="GemBox.Spreadsheet.CellStyle.TextDirection" data-throw-if-not-resolved="false"></xref> member. */
public enum TextDirection
{

/* Context Dependent if the first non-whitespace character is a strong right-to-left character, 
the reading order is right-to-left; otherwise, the reading order is left-to-right. */
Context = 0

/* The reading order is left-to-right. */
LeftToRight = 1

/* The reading order is right-to-left. */
RightToLeft = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.DynamicFilterType.yml:
namespace GemBox.Spreadsheet
{

/* Represents a dynamic filter type. */
public enum DynamicFilterType
{

/* Common filter type not available. */
Null = 0

/* Shows values that are above average. */
AboveAverage = 1

/* Shows values that are below average. */
BelowAverage = 2

/* Shows last week&apos;s dates. */
LastWeek = 3

/* Shows last month&apos;s dates. */
LastMonth = 4

/* Shows last quarter&apos;s dates. */
LastQuarter = 5

/* Shows last year&apos;s dates. */
LastYear = 6

/* Shows this week&apos;s dates. */
ThisWeek = 7

/* Shows this month&apos;s dates. */
ThisMonth = 8

/* Shows this quarter&apos;s dates. */
ThisQuarter = 9

/* Shows this year&apos;s dates. */
ThisYear = 10

/* Shows next week&apos;s dates. */
NextWeek = 11

/* Shows next month&apos;s dates. */
NextMonth = 12

/* Shows next quarter&apos;s dates. */
NextQuarter = 13

/* Shows next year&apos;s dates. */
NextYear = 14

/* Shows yesterday&apos;s dates. */
Yesterday = 15

/* Shows today&apos;s dates. */
Today = 16

/* Shows tomorrow&apos;s dates. */
Tomorrow = 17

/* Shows the dates between the beginning of the year and today, inclusive. */
YearToDate = 18

/* Shows the dates that are in January, regardless of year. */
Month1 = 19

/* Shows the dates that are in February, regardless of year. */
Month2 = 20

/* Shows the dates that are in March, regardless of year. */
Month3 = 21

/* Shows the dates that are in April, regardless of year. */
Month4 = 22

/* Shows the dates that are in May, regardless of year. */
Month5 = 23

/* Shows the dates that are in June, regardless of year. */
Month6 = 24

/* Shows the dates that are in July, regardless of year. */
Month7 = 25

/* Shows the dates that are in August, regardless of year. */
Month8 = 26

/* Shows the dates that are in September, regardless of year. */
Month9 = 27

/* Shows the dates that are in October, regardless of year. */
Month10 = 28

/* Shows the dates that are in November, regardless of year. */
Month11 = 29

/* Shows the dates that are in December, regardless of year. */
Month12 = 30

/* Shows the dates that are in the 1st quarter, regardless of year. */
Quarter1 = 31

/* Shows the dates that are in the 2nd quarter, regardless of year. */
Quarter2 = 32

/* Shows the dates that are in the 3rd quarter, regardless of year. */
Quarter3 = 33

/* Shows the dates that are in the 4th quarter, regardless of year. */
Quarter4 = 34
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.TickMarkType.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents the possible positions for axis major and minor tick marks. */
public enum TickMarkType
{

/* No tick marks. */
None = 0

/* Tick marks are inside the plot area. */
Inside = 1

/* Tick marks are outside the plot area. */
Outside = 2

/* Tick marks cross the axis. */
Cross = 3
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.IgnoredError.yml:
namespace GemBox.Spreadsheet
{

/* Represents a single ignored error for a range of cells. */
public sealed class IgnoredError
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.IgnoredError" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets the sequence of references to cell ranges over which this ignored error is applied. */
public string AppliesTo { get; set; }

/* Gets or sets the ignored error types. */
public IgnoredErrorTypes ErrorTypes { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.ListBox.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a List Box Form Control. */
public class ListBox : ExcelFormControl, IDocumentPaginatorSource
{

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.FormControlType.ListBox" data-throw-if-not-resolved="false"></xref> value. */
public override FormControlType FormControlType { get; }

/* Gets or sets a CellRange which is used as the input range for this list box. */
public CellRange InputRange { get; set; }

/* Gets or sets the cell which holds the value of this list box. */
public ExcelCell CellLink { get; set; }

/* Gets or sets the selection type of this list box. */
public FormControlSelectionType SelectionType { get; set; }

/* Gets the selected values in the listbox. */
public object[] SelectedValues { get; }

/* Gets or sets the indexes of the selected items in the listbox. */
public int[] SelectedIndexes { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.OperationProgressChangedEventArgs.yml:
namespace GemBox.Spreadsheet
{

/* Provides data for events that track the progress of an operation, such as loading and saving of a workbook. */
public class OperationProgressChangedEventArgs : ProgressChangedEventArgs
{

/* Cancels the operation that reported this progress change. */
public void CancelOperation()
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.FillFormatType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents the fill type that can be applied to various objects, such as shapes, text characters, table cells and their outlines, borders and underlines. */
public enum FillFormatType
{

/* No fill. The shape is not filled, thus making its interior transparent. */
None = 0

/* Solid color fill. The shape is filled entirely with the specified color. */
Solid = 1

/* Gradient fill. The shape is filled with the smooth gradual transition of colors at the specified locations that either follows a line or a path. */
Gradient = 2

/* Picture fill. The shape is filled with the picture that can either be tiled (as a texture) or stretched to fill the available area. This fill type is not supported for outlines, borders and underlines. */
Picture = 3

/* Pattern fill. The shape is filled with the repeated pattern of the specified foreground and background color. */
Pattern = 4
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CalculationEngine.CalculationMode.yml:
namespace GemBox.Spreadsheet.CalculationEngine
{

/* Represents the supported modes for performing calculations on workbook data. */
public enum CalculationMode
{

/* Calculations in the workbook are performed automatically when cell values change. */
Automatic = 0

/* Calculations in the workbook are performed automatically when cell values change.
Tables are excluded during automatic calculation. */
AutomaticNoTable = 1

/* Calculations in the workbook are triggered manually by the user. */
Manual = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ChartAxis.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a base class for all chart axis types. */
public abstract class ChartAxis : IChartTitleParent, IChartObject, IColorContext
{

/* Changes the type of the axis. */
public ChartAxis ChangeAxisType(AxisType axisType)

/* Changes the type of the axis. */
public TChartAxis ChangeAxisType<TChartAxis>()
    where TChartAxis : ChartAxis

/* Deletes axis. */
public void Delete()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Charts.ChartAxis" data-throw-if-not-resolved="false"></xref> instance. */
public override sealed string ToString()

/* Gets or sets a value indicating whether axis is visible. */
public bool IsVisible { get; set; }

/* Gets or sets a value indicating whether number format from chart&apos;s source data (cells) will be used to format axis value labels. */
public bool NumberFormatLinkedToSource { get; set; }

/* Gets or sets the major tick marks position. */
public TickMarkType MajorTickMarkType { get; set; }

/* Gets or sets the minor tick marks position. */
public TickMarkType MinorTickMarkType { get; set; }

/* Gets or sets the axis labels position. */
public AxisLabelsPosition LabelsPosition { get; set; }

/* Gets or sets the axis cross configuration. */
public AxisCrossType CrossType { get; set; }

/* Gets or sets the specific value or category on which the opposite axis should be positioned. To be used with <xref href="GemBox.Spreadsheet.Charts.ChartAxis.CrossType" data-throw-if-not-resolved="false"></xref> set to <xref href="GemBox.Spreadsheet.Charts.AxisCrossType.Specific" data-throw-if-not-resolved="false"></xref>. */
public double? CrossesAt { get; set; }

/* Gets the <xref href="GemBox.Spreadsheet.Charts.ChartAxis.AxisType" data-throw-if-not-resolved="false"></xref> of this <xref href="GemBox.Spreadsheet.Charts.ChartAxis" data-throw-if-not-resolved="false"></xref> instance. */
public abstract AxisType AxisType { get; }

/* <p>Gets or sets a value indicating whether values on the axis shall be reversed so they go from maximum to minimum.</p>
<p>This value is currently not supported when exporting a chart to PDF, XPS or image file formats. This value is always exported as <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool ReverseOrder { get; set; }

/* Gets or sets the number format used for formatting axis value labels. 
If <xref href="GemBox.Spreadsheet.Charts.ChartAxis.NumberFormatLinkedToSource" data-throw-if-not-resolved="false"></xref> is <xref uid="langword_csharp_true" name="true" href=""></xref>, then number format from chart&apos;s source data (cells) will be used to format axis value labels as explained in remarks.
Setting this property, sets <xref href="GemBox.Spreadsheet.Charts.ChartAxis.NumberFormatLinkedToSource" data-throw-if-not-resolved="false"></xref> to <xref uid="langword_csharp_false" name="false" href=""></xref>. */
public string NumberFormat { get; set; }

/* Gets the axis title. */
public ChartTitle Title { get; }

/* Gets the major gridlines. */
public AxisGridlines MajorGridlines { get; }

/* Gets the minor gridlines. */
public AxisGridlines MinorGridlines { get; }

/* Gets or sets the fill formating options. */
public FillFormat Fill { get; set; }

/* Gets or sets the outline formating options. */
public LineFormat Outline { get; set; }

/* Gets or sets the text formatting options. */
public TextFormat TextFormat { get; set; }

/* Gets or sets the text box formatting. */
public TextBoxFormat TextBoxFormat { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.CheckBox.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a Check Box Form Control. */
public class CheckBox : ExcelFormControl, IDocumentPaginatorSource
{

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.FormControlType.CheckBox" data-throw-if-not-resolved="false"></xref> value. */
public override FormControlType FormControlType { get; }

/* <p>Gets or sets the value indicating whether this checkbox is checked.</p>
<p><xref uid="langword_csharp_true" name="true" href=""></xref> - if the checkbox is checked, <xref uid="langword_csharp_false" name="false" href=""></xref> - if the checkbox is
not checked, <xref uid="langword_csharp_null" name="null" href=""></xref> - if the value of the checkbox is mixed.</p> */
public bool? Checked { get; set; }

/* Gets or sets the cell which holds the value of this checkbox. */
public ExcelCell CellLink { get; set; }

/* Gets the text content and formatting associated with this <xref href="GemBox.Spreadsheet.Drawing.CheckBox" data-throw-if-not-resolved="false"></xref>. */
public TextBox Text { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.LineCompoundType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents the compound line type that is to be used for lines with text such as underlines. */
public enum LineCompoundType
{

/* Single line: one normal width. */
Single = 0

/* Double lines of equal width. */
Double = 1

/* Double lines: one thick, one thin. */
ThickThin = 2

/* Double lines: one thin, one thick. */
ThinThick = 3

/* Three lines: thin, thick, thin. */
Triple = 4
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.BarChart.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a chart whose series values are drawn using horizontal rectangles. */
public sealed class BarChart : ExcelChart, IDocumentPaginatorSource, IChartTitleParent, IChartObject, IChartDataLabelsDataProvider, IColorContext
{

/* Gets the chart type for <xref href="GemBox.Spreadsheet.Charts.BarChart" data-throw-if-not-resolved="false"></xref> which is <xref href="GemBox.Spreadsheet.Charts.ChartType.Bar" data-throw-if-not-resolved="false"></xref>. */
public override ChartType ChartType { get; }

/* Gets or sets the chart grouping. */
public ChartGrouping Grouping { get; set; }

/* Gets the chart axes. */
public ChartAxes Axes { get; }

/* <p>Gets or sets the width of the series gap.</p>
<p>Default value is 1.82 if <xref href="GemBox.Spreadsheet.Charts.BarChart.Grouping" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.Charts.ChartGrouping.Clustered" data-throw-if-not-resolved="false"></xref>; otherwise, 1.5.</p> */
public double SeriesGapWidth { get; set; }

/* <p>Gets or sets the series overlap.</p>
<p>Default value is 0 if <xref href="GemBox.Spreadsheet.Charts.BarChart.Grouping" data-throw-if-not-resolved="false"></xref> is <xref href="GemBox.Spreadsheet.Charts.ChartGrouping.Clustered" data-throw-if-not-resolved="false"></xref>; otherwise, 1.</p> */
public double SeriesOverlap { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.DateTimeGroup.yml:
namespace GemBox.Spreadsheet
{

/* <p>Represents a group of <xref href="GemBox.Spreadsheet.DateTimeGroup.DateTime" data-throw-if-not-resolved="false"></xref>s.</p>
<p>Each <xref href="GemBox.Spreadsheet.DateTimeGroup.DateTime" data-throw-if-not-resolved="false"></xref> instance that has the same date/time components (year, month, day, hour, minute, second) as this <xref href="GemBox.Spreadsheet.DateTimeGroup.DateTime" data-throw-if-not-resolved="false"></xref> up to <xref href="GemBox.Spreadsheet.DateTimeGroup.Level" data-throw-if-not-resolved="false"></xref> belongs to this group.</p>
<p>Instance of <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> can be inserted into <xref href="GemBox.Spreadsheet.ValuesFilter.Values" data-throw-if-not-resolved="false"></xref> collection to enable filtering <xref href="GemBox.Spreadsheet.DateTimeGroup.DateTime" data-throw-if-not-resolved="false"></xref> values.</p> */
public struct DateTimeGroup : IEquatable<DateTimeGroup>
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> type with <xref href="GemBox.Spreadsheet.DateTimeGroupLevel.Year" data-throw-if-not-resolved="false"></xref> level. */
public DateTimeGroup(int year)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> type with <xref href="GemBox.Spreadsheet.DateTimeGroupLevel.Month" data-throw-if-not-resolved="false"></xref> level. */
public DateTimeGroup(int year, int month)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> type with <xref href="GemBox.Spreadsheet.DateTimeGroupLevel.Day" data-throw-if-not-resolved="false"></xref> level. */
public DateTimeGroup(int year, int month, int day)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> type with <xref href="GemBox.Spreadsheet.DateTimeGroupLevel.Hour" data-throw-if-not-resolved="false"></xref> level. */
public DateTimeGroup(int year, int month, int day, int hour)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> type with <xref href="GemBox.Spreadsheet.DateTimeGroupLevel.Minute" data-throw-if-not-resolved="false"></xref> level. */
public DateTimeGroup(int year, int month, int day, int hour, int minute)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> type with <xref href="GemBox.Spreadsheet.DateTimeGroupLevel.Second" data-throw-if-not-resolved="false"></xref> level. */
public DateTimeGroup(int year, int month, int day, int hour, int minute, int second)

/* Determines whether the <code data-dev-comment-type="paramref" class="paramref">other</code> <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> instance. */
public bool Equals(DateTimeGroup other)

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref>s are equal. */
public static bool operator ==(DateTimeGroup first, DateTimeGroup second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref>s are not equal. */
public static bool operator !=(DateTimeGroup first, DateTimeGroup second)

/* Gets the grouping level of this <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref>. */
public DateTimeGroupLevel Level { get; }

/* <p>Gets the date/time of this <xref href="GemBox.Spreadsheet.DateTimeGroup" data-throw-if-not-resolved="false"></xref>.</p>
<p>Valid date/time components are only those upon to <xref href="GemBox.Spreadsheet.DateTimeGroup.Level" data-throw-if-not-resolved="false"></xref>.</p> */
public DateTime DateTime { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.DataValidationErrorStyle.yml:
namespace GemBox.Spreadsheet
{

/* The style of data validation error alert. */
public enum DataValidationErrorStyle
{

/* This data validation error style uses a stop icon in the error alert. */
Stop = 0

/* This data validation error style uses a warning icon in the error alert. */
Warning = 1

/* This data validation error style uses an information icon in the error alert. */
Information = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.LineChartSeriesCollection.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a collection of <xref href="GemBox.Spreadsheet.Charts.LineChartSeries" data-throw-if-not-resolved="false"></xref> objects. */
public sealed class LineChartSeriesCollection : ChartSeriesCollection<LineChartSeries>, IList, ICollection, IChartObject, IList<LineChartSeries>, ICollection<LineChartSeries>, IEnumerable<LineChartSeries>, IEnumerable
{
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ColorName.yml:
namespace GemBox.Spreadsheet
{

/* Represents a color name of colors available in <strong>MS Excel</strong> user interface. */
public enum ColorName
{

/* No color. */
Empty = 0

/* <p><strong>Automatic</strong> color.</p>
<p>For <xref href="GemBox.Spreadsheet.ExcelFont.Color" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.ExcelFillPattern.PatternForegroundColor" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.CellBorder.LineColor" data-throw-if-not-resolved="false"></xref> properties, automatic color is equal to <a href="https://docs.microsoft.com/en-us/dotnet/api/system.drawing.systemcolors.windowtext">System.Drawing.SystemColors.WindowText</a>.</p>
<p>For <xref href="GemBox.Spreadsheet.ExcelFillPattern.PatternBackgroundColor" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.ExcelFillPattern.GradientColor1" data-throw-if-not-resolved="false"></xref>, <xref href="GemBox.Spreadsheet.ExcelFillPattern.GradientColor2" data-throw-if-not-resolved="false"></xref> and <xref href="GemBox.Spreadsheet.ExcelWorksheet.TabColor" data-throw-if-not-resolved="false"></xref> properties,  automatic color is equal to <a href="https://docs.microsoft.com/en-us/dotnet/api/system.drawing.systemcolors.window">System.Drawing.SystemColors.Window</a>.</p> */
Automatic = 1

/* &apos;<strong>Background 1</strong>&apos; theme color. */
Background1 = 2

/* &apos;<strong>Background 1, Darker 5%</strong>&apos; theme color. */
Background1Darker5Pct = 3

/* &apos;<strong>Background 1, Darker 15%</strong>&apos; theme color. */
Background1Darker15Pct = 4

/* &apos;<strong>Background 1, Darker 25%</strong>&apos; theme color. */
Background1Darker25Pct = 5

/* &apos;<strong>Background 1, Darker 35%</strong>&apos; theme color. */
Background1Darker35Pct = 6

/* &apos;<strong>Background 1, Darker 50%</strong>&apos; theme color. */
Background1Darker50Pct = 7

/* &apos;<strong>Text 1</strong>&apos; theme color. */
Text1 = 8

/* &apos;<strong>Text 1, Lighter 50%</strong>&apos; theme color. */
Text1Lighter50Pct = 9

/* &apos;<strong>Text 1, Lighter 35%</strong>&apos; theme color. */
Text1Lighter35Pct = 10

/* &apos;<strong>Text 1, Lighter 25%</strong>&apos; theme color. */
Text1Lighter25Pct = 11

/* &apos;<strong>Text 1, Lighter 15%</strong>&apos; theme color. */
Text1Lighter15Pct = 12

/* &apos;<strong>Text 1, Lighter 5%</strong>&apos; theme color. */
Text1Lighter5Pct = 13

/* &apos;<strong>Background 2</strong>&apos; theme color. */
Background2 = 14

/* &apos;<strong>Background 2, Darker 10%</strong>&apos; theme color. */
Background2Darker10Pct = 15

/* &apos;<strong>Background 2, Darker 25%</strong>&apos; theme color. */
Background2Darker25Pct = 16

/* &apos;<strong>Background 2, Darker 50%</strong>&apos; theme color. */
Background2Darker50Pct = 17

/* &apos;<strong>Background 2, Darker 75%</strong>&apos; theme color. */
Background2Darker75Pct = 18

/* &apos;<strong>Background 2, Darker 90%</strong>&apos; theme color. */
Background2Darker90Pct = 19

/* &apos;<strong>Text 2</strong>&apos; theme color. */
Text2 = 20

/* &apos;<strong>Text 2, Lighter 80%</strong>&apos; theme color. */
Text2Lighter80Pct = 21

/* &apos;<strong>Text 2, Lighter 60%</strong>&apos; theme color. */
Text2Lighter60Pct = 22

/* &apos;<strong>Text 2, Lighter 40%</strong>&apos; theme color. */
Text2Lighter40Pct = 23

/* &apos;<strong>Text 2, Darker 25%</strong>&apos; theme color. */
Text2Darker25Pct = 24

/* &apos;<strong>Text 2, Darker 50%</strong>&apos; theme color. */
Text2Darker50Pct = 25

/* &apos;<strong>Accent 1</strong>&apos; theme color. */
Accent1 = 26

/* &apos;<strong>Accent 1, Lighter 80%</strong>&apos; theme color. */
Accent1Lighter80Pct = 27

/* &apos;<strong>Accent 1, Lighter 60%</strong>&apos; theme color. */
Accent1Lighter60Pct = 28

/* &apos;<strong>Accent 1, Lighter 40%</strong>&apos; theme color. */
Accent1Lighter40Pct = 29

/* &apos;<strong>Accent 1, Darker 25%</strong>&apos; theme color. */
Accent1Darker25Pct = 30

/* &apos;<strong>Accent 1, Darker 50%</strong>&apos; theme color. */
Accent1Darker50Pct = 31

/* &apos;<strong>Accent 2</strong>&apos; theme color. */
Accent2 = 32

/* &apos;<strong>Accent 2, Lighter 80%</strong>&apos; theme color. */
Accent2Lighter80Pct = 33

/* &apos;<strong>Accent 2, Lighter 60%</strong>&apos; theme color. */
Accent2Lighter60Pct = 34

/* &apos;<strong>Accent 2, Lighter 40%</strong>&apos; theme color. */
Accent2Lighter40Pct = 35

/* &apos;<strong>Accent 2, Darker 25%</strong>&apos; theme color. */
Accent2Darker25Pct = 36

/* &apos;<strong>Accent 2, Darker 50%</strong>&apos; theme color. */
Accent2Darker50Pct = 37

/* &apos;<strong>Accent 3</strong>&apos; theme color. */
Accent3 = 38

/* &apos;<strong>Accent 3, Lighter 80%</strong>&apos; theme color. */
Accent3Lighter80Pct = 39

/* &apos;<strong>Accent 3, Lighter 60%</strong>&apos; theme color. */
Accent3Lighter60Pct = 40

/* &apos;<strong>Accent 3, Lighter 40%</strong>&apos; theme color. */
Accent3Lighter40Pct = 41

/* &apos;<strong>Accent 3, Darker 25%</strong>&apos; theme color. */
Accent3Darker25Pct = 42

/* &apos;<strong>Accent 3, Darker 50%</strong>&apos; theme color. */
Accent3Darker50Pct = 43

/* &apos;<strong>Accent 4</strong>&apos; theme color. */
Accent4 = 44

/* &apos;<strong>Accent 4, Lighter 80%</strong>&apos; theme color. */
Accent4Lighter80Pct = 45

/* &apos;<strong>Accent 4, Lighter 60%</strong>&apos; theme color. */
Accent4Lighter60Pct = 46

/* &apos;<strong>Accent 4, Lighter 40%</strong>&apos; theme color. */
Accent4Lighter40Pct = 47

/* &apos;<strong>Accent 4, Darker 25%</strong>&apos; theme color. */
Accent4Darker25Pct = 48

/* &apos;<strong>Accent 4, Darker 50%</strong>&apos; theme color. */
Accent4Darker50Pct = 49

/* &apos;<strong>Accent 5</strong>&apos; theme color. */
Accent5 = 50

/* &apos;<strong>Accent 5, Lighter 80%</strong>&apos; theme color. */
Accent5Lighter80Pct = 51

/* &apos;<strong>Accent 5, Lighter 60%</strong>&apos; theme color. */
Accent5Lighter60Pct = 52

/* &apos;<strong>Accent 5, Lighter 40%</strong>&apos; theme color. */
Accent5Lighter40Pct = 53

/* &apos;<strong>Accent 5, Darker 25%</strong>&apos; theme color. */
Accent5Darker25Pct = 54

/* &apos;<strong>Accent 5, Darker 50%</strong>&apos; theme color. */
Accent5Darker50Pct = 55

/* &apos;<strong>Accent 6</strong>&apos; theme color. */
Accent6 = 56

/* &apos;<strong>Accent 6, Lighter 80%</strong>&apos; theme color. */
Accent6Lighter80Pct = 57

/* &apos;<strong>Accent 6, Lighter 60%</strong>&apos; theme color. */
Accent6Lighter60Pct = 58

/* &apos;<strong>Accent 6, Lighter 40%</strong>&apos; theme color. */
Accent6Lighter40Pct = 59

/* &apos;<strong>Accent 6, Darker 25%</strong>&apos; theme color. */
Accent6Darker25Pct = 60

/* &apos;<strong>Accent 6, Darker 50%</strong>&apos; theme color. */
Accent6Darker50Pct = 61

/* &apos;<strong>Black</strong>&apos; standard color (R = 0, G = 0, B = 0, ARGB = 0xFF000000). */
Black = 62

/* &apos;<strong>White</strong>&apos; standard color (R = 255, G = 255, B = 255, ARGB = 0xFFFFFFFF). */
White = 63

/* &apos;<strong>Dark Red</strong>&apos; standard color (R = 192, G = 0, B = 0, ARGB = 0xFFC00000). */
DarkRed = 64

/* &apos;<strong>Red</strong>&apos; standard color (R = 255, G = 0, B = 0, ARGB = 0xFFFF0000). */
Red = 65

/* &apos;<strong>Orange</strong>&apos; standard color (R = 255, G = 192, B = 0, ARGB = 0xFFFFC000). */
Orange = 66

/* &apos;<strong>Yellow</strong>&apos; standard color (R = 255, G = 255, B = 0, ARGB = 0xFFFFFF00). */
Yellow = 67

/* &apos;<strong>Light Green</strong>&apos; standard color (R = 146, G = 208, B = 80, ARGB = 0xFF92D050). */
LightGreen = 68

/* &apos;<strong>Green</strong>&apos; standard color (R = 0, G = 176, B = 80, ARGB = 0xFF00B050). */
Green = 69

/* &apos;<strong>Light Blue</strong>&apos; standard color (R = 0, G = 176, B = 240, ARGB = 0xFF00B0F0). */
LightBlue = 70

/* &apos;<strong>Blue</strong>&apos; standard color (R = 0, G = 112, B = 192, ARGB = 0xFF0070C0). */
Blue = 71

/* &apos;<strong>Dark Blue</strong>&apos; standard color (R = 0, G = 32, B = 96, ARGB = 0xFF002060). */
DarkBlue = 72

/* &apos;<strong>Purple</strong>&apos; standard color (R = 112, G = 48, B = 160, ARGB = 0xFF7030A0). */
Purple = 73
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.DataBarDirection.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a data bar direction. */
public enum DataBarDirection
{

/* The direction of the data bar is determined by context. */
Context = 0

/* The data bar is displayed in a <em>left-to-right</em> manner. */
LeftToRight = 1

/* The data bar is displayed in a <em>right-to-left</em> manner. */
RightToLeft = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FreeLimitEventArgs.yml:
namespace GemBox.Spreadsheet
{

/* Provides data for the <xref href="GemBox.Spreadsheet.SpreadsheetInfo.FreeLimitReached" data-throw-if-not-resolved="false"></xref> event. */
public sealed class FreeLimitEventArgs : EventArgs
{

/* Gets or sets the choice for proceeding when free limit is reached. */
public FreeLimitReachedAction FreeLimitReachedAction { get; set; }

/* Gets the <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> on which limit was reached. */
public ExcelFile File { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.LengthUnitConverter.yml:
namespace GemBox.Spreadsheet
{

/* Utility class used for converting values between various <xref href="GemBox.Spreadsheet.LengthUnit" data-throw-if-not-resolved="false"></xref> measurement units. */
public static class LengthUnitConverter
{

/* Converts the specified <code data-dev-comment-type="paramref" class="paramref">length</code> from <code data-dev-comment-type="paramref" class="paramref">sourceUnit</code> measurement unit to <code data-dev-comment-type="paramref" class="paramref">destinationUnit</code> measurement unit. */
public static double Convert(double length, LengthUnit sourceUnit, LengthUnit destinationUnit)
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.LoadOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents a base class for loading options of various file formats. */
public abstract class LoadOptions
{

/* Gets the default options for loading from XLSX file format (Microsoft Excel Open XML Spreadsheet; Excel 2007 and later). */
public static XlsxLoadOptions XlsxDefault { get; }

/* Gets the default options for loading from XLSX file format (Microsoft Excel Binary File Format). */
public static XlsbLoadOptions XlsbDefault { get; }

/* Gets the default options for loading from XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) . */
public static XlsLoadOptions XlsDefault { get; }

/* Gets the default options for loading from OpenDocument Spreadsheet file format. */
public static OdsLoadOptions OdsDefault { get; }

/* Gets the default options for loading from Character Separated Values file format. */
public static CsvLoadOptions CsvDefault { get; }

/* Gets the default options for loading from Tab delimited file format. */
public static CsvLoadOptions TxtDefault { get; }

/* Gets the default options for loading from HyperText Markup Language File (HTML) format. */
public static HtmlLoadOptions HtmlDefault { get; }

/* Gets the default options for loading from XML file format (XML Spreadsheet 2003). */
public static XmlLoadOptions XmlDefault { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.HeaderFooterSection.yml:
namespace GemBox.Spreadsheet
{

/* Represents <xref href="GemBox.Spreadsheet.HeaderFooter" data-throw-if-not-resolved="false"></xref> section. */
public sealed class HeaderFooterSection
{

/* <xref href="GemBox.Spreadsheet.HeaderFooterSection" data-throw-if-not-resolved="false"></xref> constructor. */
public HeaderFooterSection()

/* Appends text to <xref href="GemBox.Spreadsheet.HeaderFooterSection.Content" data-throw-if-not-resolved="false"></xref>. */
public HeaderFooterSection Append(string text)

/* Appends text to <xref href="GemBox.Spreadsheet.HeaderFooterSection.Content" data-throw-if-not-resolved="false"></xref>. */
public HeaderFooterSection Append(string text, ExcelFont font)

/* Appends special header/footer field to <xref href="GemBox.Spreadsheet.HeaderFooterSection.Content" data-throw-if-not-resolved="false"></xref>. */
public HeaderFooterSection Append(HeaderFooterFieldType fieldType)

/* Appends special header/footer field to <xref href="GemBox.Spreadsheet.HeaderFooterSection.Content" data-throw-if-not-resolved="false"></xref>. */
public HeaderFooterSection Append(HeaderFooterFieldType fieldType, ExcelFont font)

/* Appends picture to this <xref href="GemBox.Spreadsheet.HeaderFooterSection" data-throw-if-not-resolved="false"></xref> instance. */
public HeaderFooterSection AppendPicture(string fileName)

/* Appends picture to this <xref href="GemBox.Spreadsheet.HeaderFooterSection" data-throw-if-not-resolved="false"></xref> instance. */
public HeaderFooterSection AppendPicture(string fileName, int width, int height)

/* Appends picture to this <xref href="GemBox.Spreadsheet.HeaderFooterSection" data-throw-if-not-resolved="false"></xref> instance. */
public HeaderFooterSection AppendPicture(MemoryStream pictureStream, ExcelPictureFormat imageFormat)

/* Appends picture to this <xref href="GemBox.Spreadsheet.HeaderFooterSection" data-throw-if-not-resolved="false"></xref> instance. */
public HeaderFooterSection AppendPicture(MemoryStream pictureStream, ExcelPictureFormat imageFormat, int width, int height)

/* Gets or sets <xref href="GemBox.Spreadsheet.HeaderFooter" data-throw-if-not-resolved="false"></xref> section content. */
public string Content { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.TextBox.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a text content and formatting associated with an object such as a <xref href="GemBox.Spreadsheet.ExcelShape" data-throw-if-not-resolved="false"></xref>. */
public class TextBox : IColorContext
{

/* Returns a concatenation of all paragraph&apos;s elements text. */
public override string ToString()

/* Gets or sets the text box formatting. */
public TextBoxFormat Format { get; set; }

/* Gets the paragraphs contained in this text box. */
public TextParagraphCollection Paragraphs { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.LineArrow.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents decorations which can be added to either the head or the tail of a line. */
public struct LineArrow : IEquatable<LineArrow>
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.Drawing.LineArrow" data-throw-if-not-resolved="false"></xref> structure. */
public LineArrow(LineArrowType arrowType, LineArrowSize size)

/* Determines whether the <code data-dev-comment-type="paramref" class="paramref">other</code> <xref href="GemBox.Spreadsheet.Drawing.LineArrow" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.Drawing.LineArrow" data-throw-if-not-resolved="false"></xref> instance. */
public bool Equals(LineArrow other)

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.Drawing.LineArrow" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.Drawing.LineArrow" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Drawing.LineArrow" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.Drawing.LineArrow" data-throw-if-not-resolved="false"></xref>s are equal. */
public static bool operator ==(LineArrow first, LineArrow second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.Drawing.LineArrow" data-throw-if-not-resolved="false"></xref>s are not equal. */
public static bool operator !=(LineArrow first, LineArrow second)

/* Gets the line end decoration. */
public LineArrowType ArrowType { get; }

/* Gets the line end size in relation to the line width. */
public LineArrowSize Size { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExtractDataEventAction.yml:
namespace GemBox.Spreadsheet
{

/* Possible ways of proceeding after one of the events is fired while extracting to data table. */
public enum ExtractDataEventAction
{

/* Continue extracting data to <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>. */
Continue = 1

/* Stop extracting data to <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>. */
StopReading = 2

/* Skip row. */
SkipRow = 3
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.DateAxis.yml:
namespace GemBox.Spreadsheet.Charts
{

/* <p>Represents an axis used for categories which are dates / times.</p>
<p>This axis type is currently not supported when exporting a chart to PDF, XPS or image file formats. This axis is exported as <xref href="GemBox.Spreadsheet.Charts.CategoryAxis" data-throw-if-not-resolved="false"></xref>.</p> */
public sealed class DateAxis : ChartAxis, IChartTitleParent, IChartObject, IColorContext
{

/* Gets or sets the minimum value of the axis or <xref uid="langword_csharp_null" name="null" href=""></xref> if value should be automatically calculated based on chart&apos;s data. */
public DateTime? Minimum { get; set; }

/* Gets or sets the maximum value of the axis or <xref uid="langword_csharp_null" name="null" href=""></xref> if value should be automatically calculated based on chart&apos;s data. */
public DateTime? Maximum { get; set; }

/* Gets or sets the time unit for <xref href="GemBox.Spreadsheet.Charts.DateAxis.MajorUnit" data-throw-if-not-resolved="false"></xref>. */
public TimeUnit MajorTimeUnit { get; set; }

/* Gets or sets the time unit for <xref href="GemBox.Spreadsheet.Charts.DateAxis.MinorUnit" data-throw-if-not-resolved="false"></xref>. */
public TimeUnit MinorTimeUnit { get; set; }

/* Gets or sets the smallest time unit that is represented on the date axis or <xref uid="langword_csharp_null" name="null" href=""></xref> if value should be automatically calculated based on chart&apos;s data. */
public TimeUnit? BaseUnit { get; set; }

/* Gets or sets the distance between major ticks or <xref uid="langword_csharp_null" name="null" href=""></xref> if value should be automatically calculated based on chart&apos;s data. */
public double? MajorUnit { get; set; }

/* Gets or sets the distance between minor ticks or <xref uid="langword_csharp_null" name="null" href=""></xref> if value should be automatically calculated based on chart&apos;s data. */
public double? MinorUnit { get; set; }

/* Gets the axis type for <xref href="GemBox.Spreadsheet.Charts.DateAxis" data-throw-if-not-resolved="false"></xref> which is <xref href="GemBox.Spreadsheet.Charts.AxisType.Date" data-throw-if-not-resolved="false"></xref>. */
public override AxisType AxisType { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ChartSeriesCollection.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a collection of <xref href="GemBox.Spreadsheet.Charts.ChartSeries" data-throw-if-not-resolved="false"></xref> objects. */
public abstract class ChartSeriesCollection : IList, ICollection, IEnumerable, IChartObject
{

/* Adds a new empty series to the chart. */
public ChartSeries Add()

/* Adds a new series with specified name and values reference to the chart. */
public ChartSeries Add(string name, string valuesReference)

/* Adds a new series with specified name and values to the chart. */
public ChartSeries Add(string name, IEnumerable values)

/* Adds a new series with specified name and values to the chart. */
public ChartSeries Add(string name, params object[] values)

/* Removes the element at the specified index of the <xref href="GemBox.Spreadsheet.Charts.ChartSeriesCollection" data-throw-if-not-resolved="false"></xref>. */
public abstract void RemoveAt(int index)

/* Removes all elements from the <xref href="GemBox.Spreadsheet.Charts.ChartSeriesCollection" data-throw-if-not-resolved="false"></xref>. */
public abstract void Clear()

/* Moves the series at the specified index to a new location in the collection. */
public abstract void Move(int oldIndex, int newIndex)

/* Gets the number of elements contained in the <xref href="GemBox.Spreadsheet.Charts.ChartSeriesCollection" data-throw-if-not-resolved="false"></xref>. */
public abstract int Count { get; }

/* Gets the <xref href="GemBox.Spreadsheet.Charts.ChartSeries" data-throw-if-not-resolved="false"></xref> that is stored at the zero-based index of the <xref href="GemBox.Spreadsheet.Charts.ChartSeriesCollection" data-throw-if-not-resolved="false"></xref>. */
public ChartSeries this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelComment.yml:
namespace GemBox.Spreadsheet
{

/* Represents a comment object used by <xref href="GemBox.Spreadsheet.ExcelCell.Comment" data-throw-if-not-resolved="false"></xref> in the worksheet. */
public class ExcelComment : IExcelEditor<ExcelCommentData>, IFormattedStringProvider
{

/* Returns a <xref href="GemBox.Spreadsheet.FormattedCharacterRange" data-throw-if-not-resolved="false"></xref> object that represents a range of characters within the comment text.
The range starts at a specified character position.
Supported in XLSX, XLSB and XLS. */
public FormattedCharacterRange GetCharacters(int startIndex)

/* Returns a <xref href="GemBox.Spreadsheet.FormattedCharacterRange" data-throw-if-not-resolved="false"></xref> object that represents a range of characters within the comment text.
The range starts at a specified character position and has a specified length.
Supported in XLSX, XLSB and XLS. */
public FormattedCharacterRange GetCharacters(int startIndex, int length)

/* Automatically fits the comment width and height to the minimum size required for all data in the comment to be visible. */
public void AutoFit()

/* Automatically fits the comment width and height to the minimum size required for all data in the comment to be visible. */
public void AutoFit(double scaling)

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.ExcelComment" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.ExcelComment" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.ExcelComment" data-throw-if-not-resolved="false"></xref>s are equal. */
public static bool operator ==(ExcelComment first, ExcelComment second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.ExcelComment" data-throw-if-not-resolved="false"></xref>s are not equal. */
public static bool operator !=(ExcelComment first, ExcelComment second)

/* If comment exists returns true, otherwise returns false. */
public bool Exists { get; }

/* Gets the comment text assigned to excel cell */
public string Text { get; set; }

/* Gets or sets comment author. */
public string Author { get; set; }

/* Gets or sets a value indicating whether this instance is visible. */
public bool IsVisible { get; set; }

/* Gets or sets the top left anchor cell for the comment shape. */
public AnchorCell TopLeftCell { get; set; }

/* Gets or sets the bottom right anchor cell for the comment shape. */
public AnchorCell BottomRightCell { get; set; }

/* Gets the comment parent cell. */
public ExcelCell ParentCell { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelDrawingPosition.yml:
namespace GemBox.Spreadsheet
{

/* Represents a class which holds information about position and size of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.) in the worksheet. */
public sealed class ExcelDrawingPosition
{

/* Gets the distance of the left edge of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.) from the left edge of the worksheet. */
public double GetLeft(LengthUnit unit)

/* Gets the distance of the top edge of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.) from the top edge of the worksheet. */
public double GetTop(LengthUnit unit)

/* Gets the width of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.). */
public double GetWidth(LengthUnit unit)

/* Gets the height of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.). */
public double GetHeight(LengthUnit unit)

/* Sets the distance of the left edge of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.) from the left edge of the worksheet. */
public void SetLeft(double value, LengthUnit unit)

/* Sets the distance of the top edge of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.) from the top edge of the worksheet. */
public void SetTop(double value, LengthUnit unit)

/* Sets the width of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.). */
public void SetWidth(double value, LengthUnit unit)

/* Sets the height of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.). */
public void SetHeight(double value, LengthUnit unit)

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ExcelDrawingPosition" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets the positioning mode of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.). */
public PositioningMode Mode { get; set; }

/* Gets or sets the anchor cell which the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.) spans from. */
public AnchorCell From { get; set; }

/* Gets or sets the anchor cell which the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.) spans to. */
public AnchorCell To { get; set; }

/* Gets or sets the distance (in points) of the left edge of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.) from the left edge of the worksheet. */
public double Left { get; set; }

/* Gets or sets the distance (in points) of the top edge of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.) from the top edge of the worksheet. */
public double Top { get; set; }

/* Gets or sets the width (in points) of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.). */
public double Width { get; set; }

/* Gets or sets the height (in points) of the <xref href="GemBox.Spreadsheet.ExcelDrawing" data-throw-if-not-resolved="false"></xref> (picture, chart, etc.). */
public double Height { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PanesState.yml:
namespace GemBox.Spreadsheet
{

/* Represents the state of the pane. */
public enum PanesState
{

/* Panes are frozen, but were not split being frozen. In this state, when the panes are unfrozen again, a single pane results, with no split. In this state, the split bars are not adjustable. */
Frozen = 0

/* Panes are frozen and were split before being frozen. In this state, when the panes are unfrozen again, the split remains, but is adjustable. */
FrozenSplit = 1

/* Panes are split, but not frozen. In this state, the split bars are adjustable by the user. */
Split = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.SolidFillFormat.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a fill containing of a single color spread uniformly across the entire area. */
public sealed class SolidFillFormat : FillFormat
{

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.FillFormatType.Solid" data-throw-if-not-resolved="false"></xref> value. */
public override FillFormatType FillType { get; }

/* Gets or sets the color. */
public DrawingColor Color { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExtractDataOptions.yml:
namespace GemBox.Spreadsheet
{

/* Options specified when extracting data to <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>. */
[Flags]
public enum ExtractDataOptions
{

/* None of the options is set. */
None = 0

/* Extracting data stops at the first empty row. */
StopAtFirstEmptyRow = 1

/* When extracting data, skip all empty rows. */
SkipEmptyRows = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.FormulaCondition.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a condition that formats only cells for which the specified formula result evaluates to <xref uid="langword_csharp_true" name="true" href=""></xref>. */
public sealed class FormulaCondition : FormatCondition, IFormatHolder<CellFormatData>
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.FormulaCondition" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the <xref href="GemBox.Spreadsheet.ConditionalFormatting.FormatConditionType.Formula" data-throw-if-not-resolved="false"></xref> value. */
public override FormatConditionType ConditionType { get; }

/* Gets or sets the formula used to determine which cells to format (only cells for which the formula result evaluates to <xref uid="langword_csharp_true" name="true" href=""></xref> are formatted). */
public string Formula { get; set; }

/* Gets the actual formatting which will be applied to a cell if its value satisfies this <xref href="GemBox.Spreadsheet.ConditionalFormatting.FormulaCondition" data-throw-if-not-resolved="false"></xref>. */
public CellStyle Style { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.FormControlSelectionType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents the kind of selection used for the <xref href="GemBox.Spreadsheet.Drawing.ListBox" data-throw-if-not-resolved="false"></xref>. */
public enum FormControlSelectionType
{

/* The element shall only have one selected item. */
Single = 0

/* The element can have multiple items selected by clicking on each item. */
Multi = 1

/* The element can have multiple items selected by holding a control key and clicking on each item. */
Extend = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FilterColumn.yml:
namespace GemBox.Spreadsheet
{

/* Represents filter and sort settings for a single filter column. */
public sealed class FilterColumn
{

/* <p>Sets a <xref href="GemBox.Spreadsheet.ValuesFilter" data-throw-if-not-resolved="false"></xref> to this column.</p>
<p><xref href="GemBox.Spreadsheet.ValuesFilter" data-throw-if-not-resolved="false"></xref> filters by a list of values.</p>
<p>Use members of a returned <xref href="GemBox.Spreadsheet.ValuesFilter" data-throw-if-not-resolved="false"></xref> to specify filter settings.</p> */
public ValuesFilter SetValuesFilter()

/* <p>Sets a <xref href="GemBox.Spreadsheet.Top10Filter" data-throw-if-not-resolved="false"></xref> to this column.</p>
<p><xref href="GemBox.Spreadsheet.Top10Filter" data-throw-if-not-resolved="false"></xref> filters by a top N (percent or number of items).</p>
<p>Use members of a returned <xref href="GemBox.Spreadsheet.Top10Filter" data-throw-if-not-resolved="false"></xref> to specify filter settings.</p> */
public Top10Filter SetTop10Filter()

/* <p>Sets a <xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> to this column.</p>
<p><xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> filters by a one or two conditions (operators and values).</p>
<p>Use members of a returned <xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> to specify filter settings.</p> */
public CustomFilter SetCustomFilter()

/* <p>Sets a <xref href="GemBox.Spreadsheet.DynamicFilter" data-throw-if-not-resolved="false"></xref> to this column.</p>
<p><xref href="GemBox.Spreadsheet.DynamicFilter" data-throw-if-not-resolved="false"></xref> filters by a dynamic criteria that can change, either with the data itself (e.g., &quot;above average&quot;) or with the current system date (e.g., show values for &quot;today&quot;).</p>
<p>Use members of a returned <xref href="GemBox.Spreadsheet.DynamicFilter" data-throw-if-not-resolved="false"></xref> to specify filter settings.</p> */
public DynamicFilter SetDynamicFilter()

/* <p>Sets a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> to this column.</p>
<p>All other sort levels are cleared.</p>
<p>Use members of a returned <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> to specify sort settings.</p> */
public SortLevel SetSort()

/* <p>Adds a <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> to this column.</p>
<p>Previous sort levels are maintained. If this <xref href="GemBox.Spreadsheet.FilterColumn" data-throw-if-not-resolved="false"></xref> already specifies a sort level (<xref href="GemBox.Spreadsheet.FilterColumn.Sort" data-throw-if-not-resolved="false"></xref> is not equal to <xref uid="langword_csharp_null" name="null" href=""></xref>) it will be removed before a new one is added.</p>
<p>Use members of a returned <xref href="GemBox.Spreadsheet.SortLevel" data-throw-if-not-resolved="false"></xref> to specify sort settings.</p> */
public SortLevel AddSort()

/* Clears the filter from this <xref href="GemBox.Spreadsheet.FilterColumn" data-throw-if-not-resolved="false"></xref>. */
public void ClearFilter()

/* Clears the sort level from this <xref href="GemBox.Spreadsheet.FilterColumn" data-throw-if-not-resolved="false"></xref>. */
public void ClearSort()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.FilterColumn" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* <p>Gets the column index relative to the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref> that this column filter applies to.</p>
<p>Value is equal to or greater than zero and less than <xref href="GemBox.Spreadsheet.CellRange.Width" data-throw-if-not-resolved="false"></xref> of the <xref href="GemBox.Spreadsheet.AutoFilter.Range" data-throw-if-not-resolved="false"></xref>.</p> */
public int Index { get; }

/* Gets the filter settings applied to this column or <xref uid="langword_csharp_null" name="null" href=""></xref> if no filter settings are applied to this column. */
public Filter Filter { get; }

/* <p>Gets or sets a value indicating whether the <xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> button for this column is hidden.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool HiddenAutoButton { get; set; }

/* <p>Gets or sets a value indicating whether the filter button is visible.</p>
<p>For example, when the cell containing the filter button is merged with another cell, the filter button may be hidden, and not drawn.</p>
<p>Default value is <xref uid="langword_csharp_true" name="true" href=""></xref>.</p> */
public bool ShowButton { get; set; }

/* <p>Gets or sets the method that defines a set of criteria and determines whether the specified <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref> meets those criteria.</p>
<p>Default value is default method based on the settings of this filter.</p> */
public Predicate<ExcelCell> Match { get; set; }

/* Gets the sort settings applied to this column or <xref uid="langword_csharp_null" name="null" href=""></xref> if no sort settings are applied to this column. */
public SortLevel Sort { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.OdsSaveOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for saving to OpenDocument Spreadsheet file format. */
public sealed class OdsSaveOptions : SaveOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.OdsSaveOptions" data-throw-if-not-resolved="false"></xref> class. */
public OdsSaveOptions()

/* Gets limitations for saving to ODS file format. */
public override FileFormatLimitations Limitations { get; }

/* Gets the content-type for ODS file format:
<ul><li><strong>application/vnd.oasis.opendocument.spreadsheet-template</strong> if workbook is template (file extension is .odt), otherwise</li><li><strong>application/vnd.oasis.opendocument.spreadsheet</strong>.</li></ul> */
public override string ContentType { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.XlsxType.yml:
namespace GemBox.Spreadsheet
{

/* OpenXML file type. */
public enum XlsxType
{

/* Excel 2007 XML Workbook. */
Xlsx = 0

/* Excel 2007 XML Macro-Enabled Workbook. */
Xlsm = 1

/* Excel 2007 XML Template. */
Xltx = 2

/* Excel 2007 XML Macro-Enabled Template. */
Xltm = 3
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotCacheCollection.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a collection of all <xref href="GemBox.Spreadsheet.PivotTables.PivotCache" data-throw-if-not-resolved="false"></xref> objects in the workbook. */
public sealed class PivotCacheCollection : IEnumerable<PivotCache>, IEnumerable
{

/* Adds a new <xref href="GemBox.Spreadsheet.PivotTables.PivotCache" data-throw-if-not-resolved="false"></xref> from the worksheet data source. */
public PivotCache AddWorksheetSource(string reference)

/* Returns an enumerator for the collection. */
public IEnumerator<PivotCache> GetEnumerator()

/* Gets the <xref href="GemBox.Spreadsheet.PivotTables.PivotCache" data-throw-if-not-resolved="false"></xref> at the specified index. */
public PivotCache this[int index] { get; }

/* Gets the number of <xref href="GemBox.Spreadsheet.PivotTables.PivotCache" data-throw-if-not-resolved="false"></xref>s contained in the collection. */
public int Count { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelEmbeddedObject.yml:
namespace GemBox.Spreadsheet
{

/* Represents a read-only embedded object in the worksheet. */
public sealed class ExcelEmbeddedObject
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ExcelEmbeddedObject" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the embedded object data. */
public Stream Data { get; }

/* Gets the content type of the embedded object data. */
public string ContentType { get; }

/* Gets the position of this embedded object in the worksheet. */
public ExcelDrawingPosition Position { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.Label.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a Label Box Form Control. */
public class Label : ExcelFormControl, IDocumentPaginatorSource
{

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.FormControlType.Label" data-throw-if-not-resolved="false"></xref> value. */
public override FormControlType FormControlType { get; }

/* Gets the text content and formatting associated with this <xref href="GemBox.Spreadsheet.Drawing.Label" data-throw-if-not-resolved="false"></xref>. */
public TextBox Text { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.TiffCompression.yml:
namespace GemBox.Spreadsheet
{

/* An enumeration of supported compression schemes for Tagged Image File Format (TIFF) when saving an <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> to an image using an <xref href="GemBox.Spreadsheet.ImageSaveOptions" data-throw-if-not-resolved="false"></xref>. */
public enum TiffCompression
{

/* The encoder attempts to save the bitmap with the best possible compression schema. */
Default = 0

/* The Tagged Image File Format (TIFF) image will not be compressed. */
None = 1

/* The CCITT3 compression schema. */
Ccitt3 = 2

/* The CCITT4 compression schema. */
Ccitt4 = 3

/* The LZW compression schema. */
Lzw = 4

/* The RLE compression schema. */
Rle = 5

/* Zip compression schema. */
Zip = 6
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ImageSaveFormat.yml:
namespace GemBox.Spreadsheet
{

/* An enumeration of supported image file formats when saving the <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> to an image using a <xref href="GemBox.Spreadsheet.ImageSaveOptions" data-throw-if-not-resolved="false"></xref>. */
public enum ImageSaveFormat
{

/* Bitmap (BMP) format. */
Bmp = 0

/* Graphics Interchange Format (GIF). */
Gif = 1

/* Joint Photographics Experts Group (JPEG) format. */
Jpeg = 2

/* Portable Network Graphics (PNG) format. */
Png = 3

/* Tagged Image File Format (TIFF). */
Tiff = 4

/* Windows Media Photo format. */
Wmp = 5

/* Scalable Vector Graphics (SVG) format. Currently supported only via <a href="https://www.nuget.org/packages/SkiaSharp/">SkiaSharp</a>. */
Svg = 6
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelEmbeddedObjectCollection.yml:
namespace GemBox.Spreadsheet
{

/* Represents a read-only collection of <xref href="GemBox.Spreadsheet.ExcelEmbeddedObject" data-throw-if-not-resolved="false"></xref>s in the worksheet. */
public sealed class ExcelEmbeddedObjectCollection : IEnumerable<ExcelEmbeddedObject>, IEnumerable
{

/* Returns an enumerator that iterates through the <xref href="GemBox.Spreadsheet.ExcelEmbeddedObjectCollection" data-throw-if-not-resolved="false"></xref>. */
public IEnumerator<ExcelEmbeddedObject> GetEnumerator()

/* Gets the number of <xref href="GemBox.Spreadsheet.ExcelEmbeddedObject" data-throw-if-not-resolved="false"></xref>s contained in the <xref href="GemBox.Spreadsheet.ExcelEmbeddedObjectCollection" data-throw-if-not-resolved="false"></xref>. */
public int Count { get; }

/* Gets the <xref href="GemBox.Spreadsheet.ExcelEmbeddedObject" data-throw-if-not-resolved="false"></xref> at the specified index. */
public ExcelEmbeddedObject this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.WinFormsUtilities.ExportToDataGridViewOptions.yml:
namespace GemBox.Spreadsheet.WinFormsUtilities
{

/* Represents options for exporting data from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> to <xref href="System.Windows.Forms.DataGridView" data-throw-if-not-resolved="false"></xref>. */
public sealed class ExportToDataGridViewOptions
{

/* Initializes an instance of <xref href="GemBox.Spreadsheet.WinFormsUtilities.ExportToDataGridViewOptions" data-throw-if-not-resolved="false"></xref> class. */
public ExportToDataGridViewOptions()

/* Initializes an instance of <xref href="GemBox.Spreadsheet.WinFormsUtilities.ExportToDataGridViewOptions" data-throw-if-not-resolved="false"></xref> class. */
public ExportToDataGridViewOptions(int startRow, int startColumn, int numberOfRows, int numberOfColumns)

/* Initializes an instance of <xref href="GemBox.Spreadsheet.WinFormsUtilities.ExportToDataGridViewOptions" data-throw-if-not-resolved="false"></xref> class. */
public ExportToDataGridViewOptions(string startCell, int numberOfRows, int numberOfColumns)

/* Gets or sets the index of the first row of data being exported from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int StartRow { get; set; }

/* Gets or sets the index of the first column of data being exported from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int StartColumn { get; set; }

/* Gets or sets the number of rows being exported from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int NumberOfRows { get; set; }

/* Gets or sets the number of columns being exported from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int NumberOfColumns { get; set; }

/* Gets or sets a value indicating whether to use first row of exported data for column headers. */
public bool ColumnHeaders { get; set; }

/* Gets or sets a predicate that determines if the given <xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref> is part of the header.
This is useful when you don&apos;t know in which row a header has been placed. */
public Predicate<ExcelCell> HeaderCellPredicate { get; set; }

/* Gets or sets the direction in which the header row will be searched.
Default value is <xref href="GemBox.Spreadsheet.WinFormsUtilities.SearchingDirection.TopToBottom" data-throw-if-not-resolved="false"></xref> */
public SearchingDirection HeaderRowSearchingDirection { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.NamedRange.yml:
namespace GemBox.Spreadsheet
{

/* Represents a named range in the worksheet. */
public sealed class NamedRange
{

/* Deletes this named range from the named ranges collection. */
public void Delete()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.NamedRange" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.NamedRange" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.NamedRange" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.NamedRange" data-throw-if-not-resolved="false"></xref>s are equal. */
public static bool operator ==(NamedRange first, NamedRange second)

/* Determines whether <code data-dev-comment-type="paramref" class="paramref">first</code> and <code data-dev-comment-type="paramref" class="paramref">second</code> <xref href="GemBox.Spreadsheet.NamedRange" data-throw-if-not-resolved="false"></xref>s are not equal. */
public static bool operator !=(NamedRange first, NamedRange second)

/* Gets the named range name. */
public string Name { get; }

/* gets global flag */
public bool GlobalName { get; }

/* Gets or sets the named cell range. */
public CellRange Range { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotFieldCalculationType.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a data <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> subtotal function. */
public enum PivotFieldCalculationType
{

/* The sum of the values. */
Sum = 0

/* The number of data values. */
Count = 1

/* The average of the values. */
Average = 2

/* The largest value. */
Max = 3

/* The smallest value. */
Min = 4

/* The product of the values. */
Product = 5

/* The number of data values that are numbers. */
CountNums = 6

/* An estimate of the standard deviation of a population, where the sample is a subset of the entire population. */
StdDev = 7

/* The standard deviation of a population, where the population is all of the data to be summarized. */
StdDevp = 8

/* An estimate of the variance of a population, where the sample is a subset of the entire population. */
Var = 9

/* The variance of a population, where the population is all of the data to be summarized. */
Varp = 10
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FormattedCharacterRange.yml:
namespace GemBox.Spreadsheet
{

/* Represents a range of characters within the cell or comment text. */
public sealed class FormattedCharacterRange
{

/* Gets the zero-based starting character position. */
public int StartIndex { get; }

/* Gets the number of characters. */
public int Length { get; }

/* Gets the text represented by this character range. */
public string Text { get; }

/* Gets the font of the characters. */
public ExcelFont Font { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelColumnCollection.yml:
namespace GemBox.Spreadsheet
{

/* Collection of excel columns (<xref href="GemBox.Spreadsheet.ExcelColumn" data-throw-if-not-resolved="false"></xref>). */
public sealed class ExcelColumnCollection : ExcelRowColumnCollectionBase<ExcelColumn>, IEnumerable<ExcelColumn>, IEnumerable
{

/* Removes the column with the specified index. */
public void Remove(int columnIndex)

/* Removes specified number of columns starting at the specified index. */
public void Remove(int columnIndex, int columnCount)

/* Inserts empty column at the specified index. */
public void InsertEmpty(int columnIndex)

/* Inserts specified number of empty columns at the specified index. */
public void InsertEmpty(int columnIndex, int columnCount)

/* Inserts copied column at the specified index. */
public void InsertCopy(int columnIndex, ExcelColumn sourceColumn)

/* Inserts specified number of copied columns at the specified index. */
public void InsertCopy(int columnIndex, int columnCount, ExcelColumn sourceColumn)

/* Converts column name (&quot;A&quot;, &quot;B&quot;, ...) to column index (0, 1, ...). */
public static int ColumnNameToIndex(string name)

/* Converts column index (0, 1, ...) to column name (&quot;A&quot;, &quot;B&quot;, ...). */
public static string ColumnIndexToName(int columnIndex)

/* Gets the column with the specified index. */
public override ExcelColumn this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ChartAxes.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents chart axes. */
public sealed class ChartAxes : IChartObject
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Charts.ChartAxes" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Deletes axes. */
public void Delete()

/* Gets or sets a value indicating whether any axis is visible. */
public bool IsVisible { get; set; }

/* Gets the horizontal chart axis. */
public ChartAxis Horizontal { get; }

/* Gets the vertical chart axis. */
public ChartAxis Vertical { get; }

/* Gets the horizontal chart axis as category axis, if horizontal chart axis is category axis; otherwise <xref uid="langword_csharp_null" name="null" href=""></xref>. */
public CategoryAxis HorizontalCategory { get; }

/* Gets the horizontal chart axis as date axis, if horizontal chart axis is date axis; otherwise <xref uid="langword_csharp_null" name="null" href=""></xref>. */
public DateAxis HorizontalDate { get; }

/* Gets the horizontal chart axis as value axis, if horizontal chart axis is value axis; otherwise <xref uid="langword_csharp_null" name="null" href=""></xref>. */
public ValueAxis HorizontalValue { get; }

/* Gets the vertical chart axis as category axis, if vertical chart axis is category axis; otherwise <xref uid="langword_csharp_null" name="null" href=""></xref>. */
public CategoryAxis VerticalCategory { get; }

/* Gets the vertical chart axis as date axis, if vertical chart axis is date axis; otherwise <xref uid="langword_csharp_null" name="null" href=""></xref>. */
public DateAxis VerticalDate { get; }

/* Gets the vertical chart axis as value axis, if vertical chart axis is value axis; otherwise <xref uid="langword_csharp_null" name="null" href=""></xref>. */
public ValueAxis VerticalValue { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.AnchorCell.yml:
namespace GemBox.Spreadsheet
{

/* Represents an anchor cell object used in <xref href="GemBox.Spreadsheet.ExcelDrawingPosition" data-throw-if-not-resolved="false"></xref> type to specify from which cell and to which cell drawing (picture, chart, etc.) spans. */
public sealed class AnchorCell : IEquatable<AnchorCell>
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.AnchorCell" data-throw-if-not-resolved="false"></xref> class by using offset values in EMU units  (1 point = 12 700 EMU). */
public AnchorCell(ExcelColumn column, ExcelRow row, long columnOffset, long rowOffset)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.AnchorCell" data-throw-if-not-resolved="false"></xref> class by using offset values in arbitrary length unit. */
public AnchorCell(ExcelColumn column, ExcelRow row, double columnOffset, double rowOffset, LengthUnit unit)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.AnchorCell" data-throw-if-not-resolved="false"></xref> class. */
public AnchorCell(ExcelColumn column, ExcelRow row, bool topLeft)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.AnchorCell" data-throw-if-not-resolved="false"></xref> class. */
public AnchorCell(ExcelCell cell, bool topLeft)

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.AnchorCell" data-throw-if-not-resolved="false"></xref> class by using another anchor cell. */
public AnchorCell(AnchorCell anchorCell)

/* Gets the column offset for the anchor cell in arbitrary length unit. */
public double GetColumnOffset(LengthUnit unit)

/* Sets the column offset for the anchor cell in arbitrary length unit. */
public void SetColumnOffset(double value, LengthUnit unit)

/* Gets the row offset for the anchor cell in arbitrary length unit. */
public double GetRowOffset(LengthUnit unit)

/* Sets the row offset for the anchor cell in arbitrary length unit. */
public void SetRowOffset(double value, LengthUnit unit)

/* Determines whether the <code data-dev-comment-type="paramref" class="paramref">other</code> <xref href="GemBox.Spreadsheet.AnchorCell" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.AnchorCell" data-throw-if-not-resolved="false"></xref> instance. */
public bool Equals(AnchorCell other)

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.AnchorCell" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.AnchorCell" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.AnchorCell" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets the column for the anchor cell. */
public ExcelColumn Column { get; set; }

/* Gets or sets the row for the anchor cell. */
public ExcelRow Row { get; set; }

/* Gets or sets the column offset for the anchor cell in EMU units (1 point = 12 700 EMU). */
public long ColumnOffset { get; set; }

/* Gets or sets row offset for the anchor cell in EMU units (1 point = 12 700 EMU). */
public long RowOffset { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.HeaderFooterFieldType.yml:
namespace GemBox.Spreadsheet
{

/* Represents types of <xref href="GemBox.Spreadsheet.HeaderFooterSection" data-throw-if-not-resolved="false"></xref> predefined fields. */
public enum HeaderFooterFieldType
{

/* Page number. */
PageNumber = 0

/* Total number of pages. */
NumberOfPages = 1

/* Current date. */
Date = 2

/* Current time. */
Time = 3

/* Sheet name. */
SheetName = 4

/* File name. */
FileName = 5

/* File path. */
FilePath = 6
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ViewType.yml:
namespace GemBox.Spreadsheet
{

/* Specifies the view type. */
public enum ViewType
{

/* Normal view */
Normal = 0

/* Page break preview */
PageBreakPreview = 1

/* Page Layout View */
PageLayout = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ConditionalLength.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a conditional length used in <xref href="GemBox.Spreadsheet.ConditionalFormatting.DataBarCondition" data-throw-if-not-resolved="false"></xref> of a conditional formatting rule to specify data bar length. */
public sealed class ConditionalLength : ConditionalObject
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalLength" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets or sets the data bar length as a percentage of the cell width. */
public int Length { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotFieldCollection.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a collection of <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref>s. */
public sealed class PivotFieldCollection : PivotFieldBaseCollection, IEnumerable<PivotField>, IEnumerable
{

/* Adds a calculated <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> to the end of the collection of <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> fields. */
public PivotField AddCalculated(string fieldName, string formula)

/* Removes the calculated <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> from the collection of <xref href="GemBox.Spreadsheet.PivotTables.PivotTable" data-throw-if-not-resolved="false"></xref> fields. */
public void RemoveCalculated(string fieldName)
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.ExcelFormControlCollection.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a collection of <xref href="GemBox.Spreadsheet.Drawing.ExcelFormControl" data-throw-if-not-resolved="false"></xref>s in the worksheet. */
public class ExcelFormControlCollection : ExcelDrawingCollection<ExcelFormControl>, IExcelDrawingCollection, IList<ExcelFormControl>, ICollection<ExcelFormControl>, IEnumerable<ExcelFormControl>, IEnumerable
{

/* Adds a new button to the worksheet which doesn&apos;t move nor sizes with cells. */
public Button AddButton(string text, double left, double top, double width, double height, LengthUnit unit)

/* Adds a new button to the worksheet which moves but doesn&apos;t size with cells. */
public Button AddButton(string text, AnchorCell positionFrom, double width, double height, LengthUnit unit)

/* Adds a new button to the worksheet which moves but doesn&apos;t size with cells. */
public Button AddButton(string text, string positionFromCell, double width, double height, LengthUnit unit)

/* Adds a new button to the worksheet which moves and sizes with cells. */
public Button AddButton(string text, AnchorCell positionFrom, AnchorCell positionTo)

/* Adds a new button to the worksheet which moves and sizes with cells. */
public Button AddButton(string text, string positionFromCell, string positionToCell)

/* Adds a new combo box to the worksheet which doesn&apos;t move nor sizes with cells. */
public ComboBox AddComboBox(double left, double top, double width, double height, LengthUnit unit)

/* Adds a new combo box to the worksheet which moves but doesn&apos;t size with cells. */
public ComboBox AddComboBox(AnchorCell positionFrom, double width, double height, LengthUnit unit)

/* Adds a new combo box to the worksheet which moves but doesn&apos;t size with cells. */
public ComboBox AddComboBox(string positionFromCell, double width, double height, LengthUnit unit)

/* Adds a new checkbox to the worksheet which doesn&apos;t move nor sizes with cells. */
public CheckBox AddCheckBox(string text, double left, double top, double width, double height, LengthUnit unit)

/* Adds a new checkbox to the worksheet which moves but doesn&apos;t size with cells. */
public CheckBox AddCheckBox(string text, AnchorCell positionFrom, double width, double height, LengthUnit unit)

/* Adds a new checkbox to the worksheet which moves but doesn&apos;t size with cells. */
public CheckBox AddCheckBox(string text, string positionFromCell, double width, double height, LengthUnit unit)

/* Adds a new spin button to the worksheet which doesn&apos;t move nor sizes with cells. */
public SpinButton AddSpinButton(double left, double top, double width, double height, LengthUnit unit)

/* Adds a new spin button to the worksheet which moves but doesn&apos;t size with cells. */
public SpinButton AddSpinButton(AnchorCell positionFrom, double width, double height, LengthUnit unit)

/* Adds a new spin button to the worksheet which moves but doesn&apos;t size with cells. */
public SpinButton AddSpinButton(string positionFromCell, double width, double height, LengthUnit unit)

/* Adds a new spin button to the worksheet which moves and sizes with cells. */
public SpinButton AddSpinButton(AnchorCell positionFrom, AnchorCell positionTo)

/* Adds a new spin button to the worksheet which moves and sizes with cells. */
public SpinButton AddSpinButton(string positionFromCell, string positionToCell)

/* Adds a new option (radio) button to the worksheet which doesn&apos;t move nor sizes with cells. */
public OptionButton AddOptionButton(string text, double left, double top, double width, double height, LengthUnit unit)

/* Adds a new option (radio) button to the worksheet which moves but doesn&apos;t size with cells. */
public OptionButton AddOptionButton(string text, AnchorCell positionFrom, double width, double height, LengthUnit unit)

/* Adds a new option (radio) button to the worksheet which moves but doesn&apos;t size with cells. */
public OptionButton AddOptionButton(string text, string positionFromCell, double width, double height, LengthUnit unit)

/* Adds a new group box to the worksheet which doesn&apos;t move nor sizes with cells. */
public GroupBox AddGroupBox(string text, double left, double top, double width, double height, LengthUnit unit)

/* Adds a new group box to the worksheet which moves but doesn&apos;t size with cells. */
public GroupBox AddGroupBox(string text, AnchorCell positionFrom, double width, double height, LengthUnit unit)

/* Adds a new group box to the worksheet which moves but doesn&apos;t size with cells. */
public GroupBox AddGroupBox(string text, string positionFromCell, double width, double height, LengthUnit unit)

/* Adds a new label to the worksheet which doesn&apos;t move nor sizes with cells. */
public Label AddLabel(string text, double left, double top, double width, double height, LengthUnit unit)

/* Adds a new label to the worksheet which moves but doesn&apos;t size with cells. */
public Label AddLabel(string text, AnchorCell positionFrom, double width, double height, LengthUnit unit)

/* Adds a new label to the worksheet which moves but doesn&apos;t size with cells. */
public Label AddLabel(string text, string positionFromCell, double width, double height, LengthUnit unit)

/* Adds a new label to the worksheet which moves and sizes with cells. */
public Label AddLabel(string text, AnchorCell positionFrom, AnchorCell positionTo)

/* Adds a new label to the worksheet which moves and sizes with cells. */
public Label AddLabel(string text, string positionFromCell, string positionToCell)

/* Adds a new scroll bar to the worksheet which doesn&apos;t move nor sizes with cells. */
public ScrollBar AddScrollBar(double left, double top, double width, double height, LengthUnit unit)

/* Adds a new scroll bar to the worksheet which moves but doesn&apos;t size with cells. */
public ScrollBar AddScrollBar(AnchorCell positionFrom, double width, double height, LengthUnit unit)

/* Adds a new scroll bar to the worksheet which moves but doesn&apos;t size with cells. */
public ScrollBar AddScrollBar(string positionFromCell, double width, double height, LengthUnit unit)
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelFileStore.yml:
namespace GemBox.Spreadsheet
{

/* Represents a collection of application-specific <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> instances. */
public static class ExcelFileStore
{

/* Adds a <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> to the store. */
public static void AddExcelFile(Uri uri, ExcelFile excelFile)

/* Returns the <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> with a specified URI from the store. */
public static ExcelFile GetExcelFile(Uri uri)

/* Removes the <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> with a specified URI from the store. */
public static void RemoveExcelFile(Uri uri)
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PixelFormat.yml:
namespace GemBox.Spreadsheet
{

/* An enumeration of supported pixel formats when saving an <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> to an image using an <xref href="GemBox.Spreadsheet.ImageSaveOptions" data-throw-if-not-resolved="false"></xref>. */
public enum PixelFormat
{

/* Pixel format that is best suited for the particular operation. */
Default = 0

/* Bgr101010 is a sRGB format with 32 bits per pixel (BPP). Each color channel (blue, green, and red) is allocated 10 bits per pixel (BPP). */
Bgr101010 = 1

/* Bgr24 is a sRGB format with 24 bits per pixel (BPP). Each color channel (blue, green, and red) is allocated 8 bits per pixel (BPP). */
Bgr24 = 2

/* Bgr32 is a sRGB format with 32 bits per pixel (BPP). Each color channel (blue, green, and red) is allocated 8 bits per pixel (BPP). */
Bgr32 = 3

/* Bgr555 is a sRGB format with 16 bits per pixel (BPP). Each color channel (blue, green, and red) is allocated 5 bits per pixel (BPP). */
Bgr555 = 4

/* Bgr565 is a sRGB format with 16 bits per pixel (BPP). Each color channel (blue, green, and red) is allocated 5, 6, and 5 bits per pixel (BPP) respectively. */
Bgr565 = 5

/* Bgra32 is a sRGB format with 32 bits per pixel (BPP). Each channel (blue, green, red, and alpha) is allocated 8 bits per pixel (BPP). */
Bgra32 = 6

/* Black and white pixel format which displays one bit of data per pixel as either black or white. */
BlackWhite = 7

/* Cmyk32 pixel format which displays 32 bits per pixel (BPP) with each color channel (cyan, magenta, yellow, and black) allocated 8 bits per pixel (BPP). */
Cmyk32 = 8

/* Gray16 pixel format which displays a 16 bits-per-pixel grayscale channel, allowing 65536 shades of gray. This format has a gamma of 1.0. */
Gray16 = 9

/* Gray2 pixel format which displays a 2 bits-per-pixel grayscale channel, allowing 4 shades of gray. */
Gray2 = 10

/* Gray32Float displays a 32 bits per pixel (BPP) grayscale channel, allowing over 4 billion shades of gray. This format has a gamma of 1.0. */
Gray32Float = 11

/* Gray4 pixel format which displays a 4 bits-per-pixel grayscale channel, allowing 16 shades of gray. */
Gray4 = 12

/* Gray8 pixel format which displays an 8 bits-per-pixel grayscale channel, allowing 256 shades of gray. */
Gray8 = 13

/* Pbgra32 is a sRGB format with 32 bits per pixel (BPP). Each channel (blue, green, red, and alpha) is allocated 8 bits per pixel (BPP). 
Each color channel is pre-multiplied by the alpha value. */
Pbgra32 = 14

/* Prgba128Float is a ScRGB format with 128 bits per pixel (BPP). Each channel (red, green, blue, and alpha) is allocated 32 bits per pixel (BPP). 
Each color channel is pre-multiplied by the alpha value. This format has a gamma of 1.0. */
Prgba128Float = 15

/* Prgba64 is a sRGB format with 64 bits per pixel (BPP). Each channel (blue, green, red, and alpha) is allocated 32 bits per pixel (BPP). 
Each color channel is pre-multiplied by the alpha value. This format has a gamma of 1.0. */
Prgba64 = 16

/* Rgb128Float is a ScRGB format with 128 bits per pixel (BPP). Each color channel is allocated 32 BPP. This format has a gamma of 1.0. */
Rgb128Float = 17

/* Rgb24 is a sRGB format with 24 bits per pixel (BPP). Each color channel (red, green, and blue) is allocated 8 bits per pixel (BPP). */
Rgb24 = 18

/* Rgb48 is a sRGB format with 48 bits per pixel (BPP). Each color channel (red, green, and blue) is allocated 16 bits per pixel (BPP). This format has a gamma of 1.0. */
Rgb48 = 19

/* Rgba128Float is a ScRGB format with 128 bits per pixel (BPP). Each color channel is allocated 32 bits per pixel (BPP). This format has a gamma of 1.0. */
Rgba128Float = 20

/* Rgba64 is an sRGB format with 64 bits per pixel (BPP). Each channel (red, green, blue, and alpha) is allocated 16 bits per pixel (BPP). This format has a gamma of 1.0. */
Rgba64 = 21
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotFilter.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a filter for a single pivot field. */
public sealed class PivotFilter
{

/* <p>Sets a <xref href="GemBox.Spreadsheet.Top10Filter" data-throw-if-not-resolved="false"></xref> to this field.</p>
<p><xref href="GemBox.Spreadsheet.Top10Filter" data-throw-if-not-resolved="false"></xref> filters by a top N (percent or number of items).</p>
<p>Use members of a returned <xref href="GemBox.Spreadsheet.Top10Filter" data-throw-if-not-resolved="false"></xref> to specify filter settings.</p> */
public Top10Filter SetTop10Filter()

/* <p>Sets a <xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> to this field.</p>
<p><xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> filters by a one or two conditions (operators and values).</p>
<p>Use members of a returned <xref href="GemBox.Spreadsheet.CustomFilter" data-throw-if-not-resolved="false"></xref> to specify filter settings.</p> */
public CustomFilter SetCustomFilter()

/* <p>Sets a <xref href="GemBox.Spreadsheet.DynamicFilter" data-throw-if-not-resolved="false"></xref> to this field.</p>
<p><xref href="GemBox.Spreadsheet.DynamicFilter" data-throw-if-not-resolved="false"></xref> filters by a dynamic criteria that can change, either with the data itself (e.g., &quot;above average&quot;) or with the current system date (e.g., show values for &quot;today&quot;).</p>
<p>Use members of a returned <xref href="GemBox.Spreadsheet.DynamicFilter" data-throw-if-not-resolved="false"></xref> to specify filter settings.</p> */
public DynamicFilter SetDynamicFilter()

/* Clears the filter from this <xref href="GemBox.Spreadsheet.PivotTables.PivotFilter" data-throw-if-not-resolved="false"></xref>. */
public void ClearFilter()

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.PivotTables.PivotFilter" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the pivot field that this pivot filter applies to. */
public PivotField Field { get; }

/* Gets the pivot field containing summary values being filtered. */
public PivotField MeasureField { get; set; }

/* Gets the filter settings applied to this pivot field or <xref uid="langword_csharp_null" name="null" href=""></xref> if no filter settings are applied to this pivot field. */
public Filter Filter { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Vba.VbaProject.yml:
namespace GemBox.Spreadsheet.Vba
{

/* Represents the VBA project. */
public sealed class VbaProject
{

/* Deletes this VBA project from the workbook. */
public void Delete()

/* Gets all <xref href="GemBox.Spreadsheet.Vba.VbaModule" data-throw-if-not-resolved="false"></xref> objects. */
public VbaModuleCollection Modules { get; }

/* Gets or sets the name of the <xref href="GemBox.Spreadsheet.Vba.VbaProject" data-throw-if-not-resolved="false"></xref>. */
public string Name { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.ExcelFormControl.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a form control. */
public abstract class ExcelFormControl : ExcelDrawing, IDocumentPaginatorSource
{

/* Assigns the given macro to this button. */
public void SetMacro(VbaModule vbaModule, string methodName)

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.ExcelFormControl.FormControlType" data-throw-if-not-resolved="false"></xref> of the current <xref href="GemBox.Spreadsheet.Drawing.ExcelFormControl" data-throw-if-not-resolved="false"></xref>. */
public abstract FormControlType FormControlType { get; }

/* Gets the name of the assigned vba macro to this button. */
public string MacroName { get; }

/* Gets or sets whether 3D effect should be enabled on the current form control. */
public bool ThreeDShading { get; set; }

/* Gets or sets whether current form control is printable. */
public bool Print { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.InsertShiftDirection.yml:
namespace GemBox.Spreadsheet
{

/* Represents the possible cell insert shift directions. */
public enum InsertShiftDirection
{

/* Shift cells right. */
Right = 0

/* Shift cells down. */
Down = 1
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.HorizontalAlignmentStyle.yml:
namespace GemBox.Spreadsheet
{

/* Represents available horizontal alignment options used in <xref href="GemBox.Spreadsheet.CellStyle.HorizontalAlignment" data-throw-if-not-resolved="false"></xref> member. */
public enum HorizontalAlignmentStyle
{

/* <p>The horizontal alignment is general-aligned.</p>
<p>Text data is left-aligned.</p>
<p>Numbers, dates, and times are right-aligned.</p>
<p>Boolean types are centered.</p>
<p>Changing the alignment does not change the type of data.</p> */
General = 0

/* <p>The horizontal alignment is left-aligned.</p>
<p>Aligns contents at the left edge of the cell.</p>
<p>If an <xref href="GemBox.Spreadsheet.CellStyle.Indent" data-throw-if-not-resolved="false"></xref> amount is specified, the contents of the cell is indented from the left by the specified number of character spaces.</p> 
<p>The character spaces are based on the default font and font size for the workbook (<strong><xref href="GemBox.Spreadsheet.CellStyleCollection.Normal" data-throw-if-not-resolved="false"></xref></strong> style).</p> */
Left = 1

/* The horizontal alignment is centered, meaning the text is centered across the cell. */
Center = 2

/* The horizontal alignment is right-aligned, meaning that cell contents are aligned at the right edge of the cell. */
Right = 3

/* <p>Indicates that the value of the cell should be filled across the entire width of the cell.</p>
<p>This option is currently not supported in PDF, XPS and image file formats and defaults to <xref href="GemBox.Spreadsheet.HorizontalAlignmentStyle.General" data-throw-if-not-resolved="false"></xref>.</p> */
Fill = 4

/* <p>The horizontal alignment is justified (flush left and right).</p>
<p>For each line of text, aligns each line of the wrapped text in a cell to the right and left (except the last line).</p>
<p>If no single line of text wraps in the cell, then the text is not justified.</p> */
Justify = 5

/* <p>The horizontal alignment is centered across multiple cells.</p>
<p>This option is currently not supported in PDF, XPS and image file formats and defaults to <xref href="GemBox.Spreadsheet.HorizontalAlignmentStyle.Center" data-throw-if-not-resolved="false"></xref>.</p> */
CenterAcross = 6

/* <p>Indicates that each &apos;word&apos; in each line of text inside the cell is evenly distributed across the width of the cell, with flush right and left margins.</p>
<p>When there is also an <xref href="GemBox.Spreadsheet.CellStyle.Indent" data-throw-if-not-resolved="false"></xref> value to apply, both the left and right side of the cell are padded by the indent value.</p>
<p>A &apos;word&apos; is a set of characters with no space character in them.</p>
<p>Two lines inside a cell are separated by a carriage return.</p> */
Distributed = 7
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotFieldLayoutForm.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents the way the specified <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> appear. */
public enum PivotFieldLayoutForm
{

/* Show in Compact Form. */
Compact = 0

/* Show in Outline Form. */
Outline = 1

/* Show in Tabular Form. */
Tabular = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelRowCollection.yml:
namespace GemBox.Spreadsheet
{

/* Collection of excel rows (<xref href="GemBox.Spreadsheet.ExcelRow" data-throw-if-not-resolved="false"></xref>). */
public sealed class ExcelRowCollection : ExcelRowColumnCollectionBase<ExcelRow>, IEnumerable<ExcelRow>, IEnumerable
{

/* Removes the row with the specified index. */
public void Remove(int rowIndex)

/* Removes specified number of rows starting at the specified index. */
public void Remove(int rowIndex, int rowCount)

/* Inserts empty row at the specified index. */
public void InsertEmpty(int rowIndex)

/* Inserts specified number of empty rows at the specified index. */
public void InsertEmpty(int rowIndex, int rowCount)

/* Inserts copied row at the specified index. */
public void InsertCopy(int rowIndex, ExcelRow sourceRow)

/* Inserts specified number of copied rows at the specified index. */
public void InsertCopy(int rowIndex, int rowCount, ExcelRow sourceRow)

/* Converts row name (&quot;1&quot;, &quot;2&quot;, ...) to row index (0, 1, ...). */
public static int RowNameToIndex(string name)

/* Converts row index (0, 1, ...) to row name (&quot;1&quot;, &quot;2&quot;, ...). */
public static string RowIndexToName(int rowIndex)

/* Gets the row with the specified index. */
public override ExcelRow this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelPictureFormat.yml:
namespace GemBox.Spreadsheet
{

/* Picture formats. */
public enum ExcelPictureFormat
{

/* Jpeg picture format. */
Jpeg = 0

/* Png picture format. */
Png = 1

/* Tiff picture format. */
Tiff = 2

/* Gif picture format. */
Gif = 3

/* Emf picture format. */
Emf = 4

/* Wmf picture format. */
Wmf = 5

/* Bmp picture format. */
Bmp = 6

/* Exif picture format. */
Exif = 7

/* Ico picture format. */
Ico = 8

/* Svg picture format. */
Svg = 9
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.ScrollBar.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a Scroll Bar Form Control. */
public class ScrollBar : ExcelFormControl, IDocumentPaginatorSource
{

/* Gets the <xref href="GemBox.Spreadsheet.Drawing.FormControlType.ScrollBar" data-throw-if-not-resolved="false"></xref> value. */
public override FormControlType FormControlType { get; }

/* Gets or sets the minimum value that can be produced by this scroll bar. */
public int MinimumValue { get; set; }

/* Gets or sets the maximum value that can be produced by this scroll bar. */
public int MaximumValue { get; set; }

/* Gets or sets the increment which is added or subtracted when clicking on this scroll bar. */
public int IncrementalChange { get; set; }

/* Gets or sets the number of lines to move the scroll bar on a page click. */
public int PageChange { get; set; }

/* Gets or sets the cell which holds the value of this scroll bar. */
public ExcelCell CellLink { get; set; }

/* Gets or sets the value of the scroll bar. */
public int CurrentValue { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CellBorders.yml:
namespace GemBox.Spreadsheet
{

/* Represents a single set of cell border formats (left, right, top, bottom and diagonal). */
public sealed class CellBorders
{

/* Sets the color and line style for the specified multiple borders of a cell. */
public void SetBorders(MultipleBorders multipleBorders, SpreadsheetColor lineColor, LineStyle lineStyle)

/* Gets the unresolved (direct) <xref href="GemBox.Spreadsheet.CellBorder" data-throw-if-not-resolved="false"></xref> which contains the color and line style for the specified individual border of a cell. */
public CellBorder GetUnresolvedBorder(IndividualBorder individualBorder)

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.CellBorders" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Gets the <xref href="GemBox.Spreadsheet.CellBorder" data-throw-if-not-resolved="false"></xref> which contains the color and line style for the specified individual border of a cell. */
public CellBorder this[IndividualBorder individualBorder] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FormattedExcelDrawing.yml:
namespace GemBox.Spreadsheet
{

/* Represents a formatted drawing (picture, chart, etc.) which can be exported to PDF, XPS, image or be printed. */
public sealed class FormattedExcelDrawing : IDocumentPaginator
{

/* Saves the drawing in the specified stream. */
public void Save(Stream stream, SaveOptions options)

/* Saves the drawing to a file with the specified path. */
public void Save(string path, SaveOptions options)

/* Saves the drawing to a file with the specified path. Path must include file extension. */
public void Save(string path)

/* Saves the drawing to a System.Web.HttpResponse or System.Web.HttpResponseBase output stream or a System.Net.Http.HttpResponseMessage and sets appropriate HTTP response headers (Content-Type and Content-Disposition). Use this method in ASP.NET application to send the drawing to a client browser. File format is resolved from <code data-dev-comment-type="paramref" class="paramref">fileName</code> extension. See remarks why <code data-dev-comment-type="paramref" class="paramref">httpResponse</code> parameter is of type <xref href="System.Object" data-throw-if-not-resolved="false"></xref>. */
public void Save(object httpResponse, string fileName)

/* Saves the drawing to a System.Web.HttpResponse or System.Web.HttpResponseBase output stream or a System.Net.Http.HttpResponseMessage and sets appropriate HTTP response headers (Content-Type and Content-Disposition). Use this method in ASP.NET application to send the drawing to a client browser. File format is defined with <code data-dev-comment-type="paramref" class="paramref">options</code> parameter. See remarks why <code data-dev-comment-type="paramref" class="paramref">httpResponse</code> parameter is of type <xref href="System.Object" data-throw-if-not-resolved="false"></xref>. */
public void Save(object httpResponse, string fileName, SaveOptions options)

/* Prints the drawing to the default printer. */
public void Print()

/* Prints the drawing to the specified printer. */
public void Print(string printerName)

/* Prints the drawing to the specified printer according to specified options. */
public void Print(string printerName, PrintOptions options)

/* Gets the drawing width in <xref href="GemBox.Spreadsheet.LengthUnit.Point" data-throw-if-not-resolved="false"></xref>s. */
public double Width { get; }

/* Gets the drawing height in <xref href="GemBox.Spreadsheet.LengthUnit.Point" data-throw-if-not-resolved="false"></xref>s. */
public double Height { get; }

/* Gets the drawing content. */
public FrameworkElement Content { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.CreateDataTableOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options creating <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref> and filling it with values from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public sealed class CreateDataTableOptions
{

/* Initializes an instance of <xref href="GemBox.Spreadsheet.CreateDataTableOptions" data-throw-if-not-resolved="false"></xref> class. */
public CreateDataTableOptions()

/* Initializes an instance of <xref href="GemBox.Spreadsheet.CreateDataTableOptions" data-throw-if-not-resolved="false"></xref> class. */
public CreateDataTableOptions(int startRow, int startColumn, int numberOfRows, int numberOfColumns)

/* Initializes an instance of <xref href="GemBox.Spreadsheet.CreateDataTableOptions" data-throw-if-not-resolved="false"></xref> class. */
public CreateDataTableOptions(string startCell, int numberOfRows, int numberOfColumns)

/* Gets or sets the index of the first row of data being extracted from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int StartRow { get; set; }

/* Gets or sets the index of the first column of data being extracted from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int StartColumn { get; set; }

/* Gets or sets the number of rows being extracted from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int NumberOfRows { get; set; }

/* Gets or sets the number of columns being extracted from <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref>. */
public int NumberOfColumns { get; set; }

/* Gets a list of indexes of columns which will be extracted. */
public IList<int> ColumnIndexes { get; }

/* Gets or sets the resolution type that specifies how column types will be resolved in created <xref href="System.Data.DataTable" data-throw-if-not-resolved="false"></xref>,
see <xref href="GemBox.Spreadsheet.ColumnTypeResolution" data-throw-if-not-resolved="false"></xref>. */
public ColumnTypeResolution Resolution { get; set; }

/* Gets or sets a value indicating whether to use first row of extracted data for column headers. */
public bool ColumnHeaders { get; set; }

/* Gets or sets the comparison operation that&apos;s used for resolving names of column headers. */
public StringComparer ColumnHeadersComparer { get; set; }

/* Gets or sets <xref href="GemBox.Spreadsheet.CreateDataTableOptions.ExtractDataOptions" data-throw-if-not-resolved="false"></xref>. */
public ExtractDataOptions ExtractDataOptions { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelCellCollection.yml:
namespace GemBox.Spreadsheet
{

/* Collection of excel cells (<xref href="GemBox.Spreadsheet.ExcelCell" data-throw-if-not-resolved="false"></xref>). */
public sealed class ExcelCellCollection : ExcelRowColumnCellCollectionBase, IEnumerable<ExcelCell>, IEnumerable
{

/* Returns an enumerator that iterates through the collection. */
public IEnumerator<ExcelCell> GetEnumerator()

/* Gets the cell with the specified index. */
public ExcelCell this[int index] { get; }

/* Gets the number of currently allocated elements (dynamically changes when worksheet is modified -- read remarks). */
public override sealed int Count { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotFilterCollection.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a collection of <xref href="GemBox.Spreadsheet.PivotTables.PivotFilter" data-throw-if-not-resolved="false"></xref>s. */
public sealed class PivotFilterCollection : IEnumerable<PivotFilter>, IEnumerable
{

/* Returns an enumerator that iterates through the <xref href="GemBox.Spreadsheet.PivotTables.PivotFilter" data-throw-if-not-resolved="false"></xref>s. */
public IEnumerator<PivotFilter> GetEnumerator()

/* Gets the total number of <xref href="GemBox.Spreadsheet.PivotTables.PivotFilter" data-throw-if-not-resolved="false"></xref>s in the <xref href="GemBox.Spreadsheet.PivotTables.PivotFilterCollection" data-throw-if-not-resolved="false"></xref>. */
public int Count { get; }

/* Gets the <xref href="GemBox.Spreadsheet.PivotTables.PivotFilter" data-throw-if-not-resolved="false"></xref> for the specified pivot field. */
public PivotFilter this[PivotField field] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.ExcelChart.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents a base class for all charts in a worksheet. */
public abstract class ExcelChart : ExcelDrawing, IDocumentPaginatorSource, IChartTitleParent, IChartObject, IChartDataLabelsDataProvider, IColorContext
{

/* Sets the chart&apos;s category labels. */
public virtual void SetCategoryLabels(IEnumerable<string> categoryLabels)

/* Sets the chart&apos;s category labels. */
public void SetCategoryLabels(params string[] categoryLabels)

/* Selects the data for the chart. */
public void SelectData(string range)

/* Selects the data for the chart. */
public void SelectData(string range, bool switchRowColumn)

/* Selects the data for the chart. */
public void SelectData(string range, bool switchRowColumn, bool excludeCategoryLabels)

/* Selects the data for the chart. */
public void SelectData(string range, bool switchRowColumn, bool excludeCategoryLabels, bool excludeSeriesNames)

/* Selects the data for the chart. */
public void SelectData(CellRange range)

/* Selects the data for the chart. */
public void SelectData(CellRange range, bool switchRowColumn)

/* Selects the data for the chart. */
public void SelectData(CellRange range, bool switchRowColumn, bool excludeCategoryLabels)

/* Selects the data for the chart. */
public void SelectData(CellRange range, bool switchRowColumn, bool excludeCategoryLabels, bool excludeSeriesNames)

/* Changes the chart to a different type of chart. */
public ExcelChart ChangeChartType(ChartType chartType)

/* Changes the chart to a different type of chart. */
public TChart ChangeChartType<TChart>()
    where TChart : ExcelChart

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Charts.ExcelChart" data-throw-if-not-resolved="false"></xref> instance. */
public override sealed string ToString()

/* <p>Gets or sets a value indicating whether the chart area border has rounded corners.</p>
<p>Default value is <xref uid="langword_csharp_false" name="false" href=""></xref>.</p> */
public bool RoundedCorners { get; set; }

/* Gets the chart&apos;s series. */
public ChartSeriesCollection Series { get; }

/* Gets the <xref href="GemBox.Spreadsheet.Charts.ChartType" data-throw-if-not-resolved="false"></xref> of this <xref href="GemBox.Spreadsheet.Charts.ExcelChart" data-throw-if-not-resolved="false"></xref> instance. */
public abstract ChartType ChartType { get; }

/* Gets the chart&apos;s title. */
public ChartTitle Title { get; }

/* Gets the chart&apos;s legend. */
public ChartLegend Legend { get; }

/* Gets the chart&apos;s plot area. */
public ChartPlotArea PlotArea { get; }

/* Gets the settings for the data labels for the entire chart. */
public ChartDataLabels DataLabels { get; }

/* Gets or sets the value which indicates how empty cells (cells with <xref href="GemBox.Spreadsheet.ExcelCell.Value" data-throw-if-not-resolved="false"></xref> equal to <xref uid="langword_csharp_null" name="null" href=""></xref>) shall be plotted on the chart. */
public EmptyCellDisplayMode ShowEmptyCellsAs { get; set; }

/* Gets or sets the value which indicates whether only visible cells should be plotted on the chart. */
public bool ShowDataInHiddenCells { get; set; }

/* Gets or sets the chart&apos;s category labels as a cell range reference (for example, &apos;Sheet1!A1:D1&apos;). Values from cells in the referenced range will be used as category labels. */
public virtual string CategoryLabelsReference { get; set; }

/* Gets the chart&apos;s category labels. */
public virtual IEnumerable<string> CategoryLabels { get; }

/* Gets or sets the value which indicates whether this chart should use the secondary axis of parent <xref href="GemBox.Spreadsheet.Charts.ComboChart" data-throw-if-not-resolved="false"></xref>. */
public bool UseSecondaryAxis { get; set; }

/* Gets or sets the fill formating options. */
public FillFormat Fill { get; set; }

/* Gets or sets the outline formating options. */
public LineFormat Outline { get; set; }

/* Gets or sets the text formatting options. */
public TextFormat TextFormat { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SheetHeaderFooter.yml:
namespace GemBox.Spreadsheet
{

/* Represents sheet header/footer. */
public sealed class SheetHeaderFooter
{

/* <xref href="GemBox.Spreadsheet.SheetHeaderFooter" data-throw-if-not-resolved="false"></xref> constructor. */
public SheetHeaderFooter()

/* Gets or sets if header/footer margin will align with page margins.
Supported in XLSX and XLSB only. */
public bool AlignWithMargins { get; set; }

/* Gets or sets if headers/footers will be scaled with document scaling. */
public bool ScaleWithDoc { get; set; }

/* Gets or sets default header/footer. */
public HeaderFooterPage DefaultPage { get; set; }

/* Gets or sets first page header/footer. */
public HeaderFooterPage FirstPage { get; set; }

/* Gets or sets header/footer for even pages. */
public HeaderFooterPage EvenPage { get; set; }

/* Returns <xref uid="langword_csharp_true" name="true" href=""></xref> if <xref href="GemBox.Spreadsheet.SheetHeaderFooter.FirstPage" data-throw-if-not-resolved="false"></xref> header/footer is specified. */
public bool HasFirstPage { get; }

/* Returns <xref uid="langword_csharp_true" name="true" href=""></xref> if <xref href="GemBox.Spreadsheet.SheetHeaderFooter.EvenPage" data-throw-if-not-resolved="false"></xref> header/footer is specified. */
public bool HasEvenPage { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Tables.Table.yml:
namespace GemBox.Spreadsheet.Tables
{

/* Represents a worksheet table.
Supported in XLSX only. */
public sealed class Table
{

/* Returns a <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents this <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> instance. */
public override string ToString()

/* Determines whether the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to this <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> instance. */
public override bool Equals(object obj)

/* Returns a hash code for this <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> instance. */
public override int GetHashCode()

/* Gets the table name. */
public string Name { get; }

/* Gets the collection of table columns. */
public TableColumnCollection Columns { get; }

/* Gets the collection of table rows. */
public TableRowCollection Rows { get; }

/* Gets or sets the built-in style used in the body of the <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref>. */
public BuiltInTableStyleName BuiltInStyle { get; set; }

/* Gets or sets the options to be applied to the <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> style. */
public TableStyleOptions StyleOptions { get; set; }

/* Gets the table range. */
public CellRange Range { get; }

/* Gets the table data range. */
public CellRange DataRange { get; }

/* Gets if table has header row or not */
public bool HasHeaderRow { get; set; }

/* Gets or sets a value indicating whether this table has a totals row. */
public bool HasTotalsRow { get; set; }

/* Gets or sets the table filter. Returns <xref uid="langword_csharp_null" name="null" href=""></xref> if no <xref href="GemBox.Spreadsheet.AutoFilter" data-throw-if-not-resolved="false"></xref> is active. */
public AutoFilter Filter { get; set; }

/* Gets the table sort. */
public SortState Sort { get; }

/* Gets the table alternative text. */
public TableAlternativeText AlternativeText { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ComHelper.yml:
namespace GemBox.Spreadsheet
{

/* Contains methods that can be useful for users which are calling GemBox.Spreadsheet component using COM interop. */
[ComVisible(true)]
public class ComHelper
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.ComHelper" data-throw-if-not-resolved="false"></xref> class. */
public ComHelper()

/* Call this method from your application to set GemBox.Spreadsheet serial key. */
public void ComSetLicense(string serialKey)

/* Determines whether the file is an encrypted XLSX. */
public bool IsEncrypted(string path)

/* Loads a spreadsheet from a file with the specified path. */
public ExcelFile Load(string path)

/* Loads a spreadsheet from a file with the specified path. */
public ExcelFile LoadWithOptions(string path, object options)

/* Saves the spreadsheet to a file with the specified path. */
public void SaveWithOptions(object file, string path, object options)

/* Gets the column from a sheet with the specified index. */
public ExcelColumn GetColumn(object sheet, int index)

/* Gets the row from a sheet with the specified index. */
public ExcelRow GetRow(object sheet, int index)

/* Removes the column with the specified index. */
public void RemoveColumn(object sheet, int index)

/* Removes the row with the specified index. */
public void RemoveRow(object sheet, int index)

/* Sets frozen worksheet panes for freezing rows and columns. */
public void SetFrozenWorksheetPanes(object sheet, string topLeftCell)

/* Adds a new horizontal or vertical page break above or left to the specified index. */
public void AddPageBreak(object sheet, int index, bool horizontalBreak)
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Charts.DataLabelPosition.yml:
namespace GemBox.Spreadsheet.Charts
{

/* Represents the possible positions for a data label. */
public enum DataLabelPosition
{

/* Data label is not shown. */
None = 0

/* Specifies that data labels shall be displayed to the left of the data marker. */
Left = 1

/* Specifies that data labels shall be displayed to the right of the data marker. */
Right = 2

/* Specifies that data labels shall be displayed above the data marker. */
Top = 3

/* Specifies that data labels shall be displayed below the data marker. */
Bottom = 4

/* Specifies that data labels shall be displayed centered on the data marker. */
Center = 5

/* Specifies that data labels shall be displayed inside the base of the data marker. */
InsideBase = 6

/* Specifies that data labels shall be displayed inside the end of the data marker. */
InsideEnd = 7

/* Specifies that data labels shall be displayed outside the end of the data marker. */
OutsideEnd = 8

/* Specifies that data labels shall be displayed in the best position. */
BestFit = 9
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.StrikethroughType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a text strikethrough type. */
public enum StrikethroughType
{

/* No strikethrough is applied to the text. */
None = 0

/* A single strikethrough is applied to the text. */
Single = 1

/* A double strikethrough is applied to the text. */
Double = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Tables.TableRowCollection.yml:
namespace GemBox.Spreadsheet.Tables
{

/* Represents a collection of <xref href="GemBox.Spreadsheet.Tables.Table" data-throw-if-not-resolved="false"></xref> rows, not including header and, if enabled, totals row.
Supported in XLSX only. */
public sealed class TableRowCollection : IEnumerable<TableRow>, IEnumerable
{

/* Adds a new <xref href="GemBox.Spreadsheet.Tables.TableRow" data-throw-if-not-resolved="false"></xref>. */
public TableRow Add()

/* Adds a new <xref href="GemBox.Spreadsheet.Tables.TableRow" data-throw-if-not-resolved="false"></xref> with the specified cell values. */
public TableRow Add(object[] cellValues)

/* Adds the specified number of new <xref href="GemBox.Spreadsheet.Tables.TableRow" data-throw-if-not-resolved="false"></xref>s. */
public IEnumerable<TableRow> Add(int count)

/* Inserts a new <xref href="GemBox.Spreadsheet.Tables.TableRow" data-throw-if-not-resolved="false"></xref> at the specified index. */
public TableRow Insert(int index)

/* Inserts a new <xref href="GemBox.Spreadsheet.Tables.TableRow" data-throw-if-not-resolved="false"></xref> with the specified cell values. */
public TableRow Insert(int index, object[] cellValues)

/* Inserts the specified number of new <xref href="GemBox.Spreadsheet.Tables.TableRow" data-throw-if-not-resolved="false"></xref>s at the specified index. */
public IEnumerable<TableRow> Insert(int index, int count)

/* Removes the specified <xref href="GemBox.Spreadsheet.Tables.TableRow" data-throw-if-not-resolved="false"></xref>. */
public bool Remove(TableRow row)

/* Removes the row at the specified index. */
public void RemoveAt(int index)

/* Removes the specified number of rows at the specified index. */
public void RemoveAt(int index, int count)

/* Gets the collection enumerator. */
public IEnumerator<TableRow> GetEnumerator()

/* Gets the number of rows contained in the table, not including the header row and, if enabled, totals row. */
public int Count { get; }

/* Gets the <xref href="GemBox.Spreadsheet.Tables.TableRow" data-throw-if-not-resolved="false"></xref> at the specified index. */
public TableRow this[int index] { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.RemoveShiftDirection.yml:
namespace GemBox.Spreadsheet
{

/* Represents the possible cell remove shift directions. */
public enum RemoveShiftDirection
{

/* Shift cells left. */
Left = 0

/* Shift cells up. */
Up = 1
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotFieldSubtotalTypes.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents a data <xref href="GemBox.Spreadsheet.PivotTables.PivotField" data-throw-if-not-resolved="false"></xref> displayed subtotals. */
[Flags]
public enum PivotFieldSubtotalTypes
{

/* No subtotals. */
None = 0

/* Represents Automatic subtotal type. */
Automatic = 1

/* Represents Sum subtotal type. */
Sum = 2

/* Represents Count subtotal type. */
Count = 4

/* Represents Average subtotal type. */
Average = 8

/* Represents Max subtotal type. */
Max = 16

/* Represents Min subtotal type. */
Min = 32

/* Represents Product subtotal type. */
Product = 64

/* Represents CountNums subtotal type. */
CountNums = 128

/* Represents StdDev subtotal type. */
StdDev = 256

/* Represents StdDevp subtotal type. */
StdDevp = 512

/* Represents Var subtotal type. */
Var = 1024

/* Represents Varp subtotal type. */
Varp = 2048
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SpreadsheetIconStyle.yml:
namespace GemBox.Spreadsheet
{

/* Represents an enumeration of visually distinct icon sets. */
public enum SpreadsheetIconStyle
{

/* No Cell Icon. */
None = 0

/* <p>The custom icon set.</p>
<p>Used only as a return value of <xref href="GemBox.Spreadsheet.ConditionalFormatting.IconSetCondition.IconStyle" data-throw-if-not-resolved="false"></xref> if icon set conditional formatting rule contains icons of different styles or icons are not ordered.</p> */
Custom = 1

/* 3 Arrows. */
ThreeArrows = 2

/* 3 Arrows (Gray). */
ThreeArrowsGray = 3

/* 3 Flags. */
ThreeFlags = 4

/* 3 Traffic Lights. */
ThreeTrafficLights = 5

/* 3 Traffic Lights (Rimmed). */
ThreeTrafficLightsRimmed = 6

/* 3 Signs. */
ThreeSigns = 7

/* 3 Symbols (Circled). */
ThreeSymbolsCircled = 8

/* 3 Symbols. */
ThreeSymbols = 9

/* 3 Stars. */
ThreeStars = 10

/* 3 Triangles. */
ThreeTriangles = 11

/* 4 Arrows. */
FourArrows = 12

/* 4 Arrows (Gray). */
FourArrowsGray = 13

/* Red To Black. */
FourRedToBlack = 14

/* 4 Ratings. */
FourRatings = 15

/* 4 Traffic Lights. */
FourTrafficLights = 16

/* 5 Arrows. */
FiveArrows = 17

/* 5 Arrows (Gray). */
FiveArrowsGray = 18

/* 5 Ratings. */
FiveRatings = 19

/* 5 Quarters. */
FiveQuarters = 20

/* Five Boxes. */
FiveBoxes = 21
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelPrintOptions.yml:
namespace GemBox.Spreadsheet
{

/* Stores MS Excel print and print related options. */
public sealed class ExcelPrintOptions
{

/* Sets the printer settings by using a printer name and an XML stream (that contains a <xref href="System.Printing.PrintTicket" data-throw-if-not-resolved="false"></xref> document) that complies with the XML Print Schema. */
public void SetPrinterSettings(string printerName, Stream xmlStream)

/* Sets the printer settings by using a handle to a <strong>DEVMODE</strong> structure that corresponds to the printer settings. */
public void SetPrinterSettings(IntPtr hdevmode)

/* Sets the printer settings by using a byte array that contains the <strong>DEVMODE</strong> structure that corresponds to the printer settings. */
public void SetPrinterSettings(byte[] devMode)

/* Returns the hash code of this object. */
public override int GetHashCode()

/* Determines whether the specified <xref href="GemBox.Spreadsheet.ExcelPrintOptions" data-throw-if-not-resolved="false"></xref> is equal 
to the current <xref href="GemBox.Spreadsheet.ExcelPrintOptions" data-throw-if-not-resolved="false"></xref>. */
public override bool Equals(object obj)

/* <xref uid="langword_csharp_true" name="true" href=""></xref> for printing sheet vertical centered, <xref uid="langword_csharp_false" name="false" href=""></xref> otherwise. */
public bool VerticalCentered { get; set; }

/* <xref uid="langword_csharp_true" name="true" href=""></xref> for printing sheet horizontal centered, <xref uid="langword_csharp_false" name="false" href=""></xref> otherwise. */
public bool HorizontalCentered { get; set; }

/* <xref uid="langword_csharp_true" name="true" href=""></xref> for print headings, <xref uid="langword_csharp_false" name="false" href=""></xref> otherwise. */
public bool PrintHeadings { get; set; }

/* <xref uid="langword_csharp_true" name="true" href=""></xref> for printing gridlines, <xref uid="langword_csharp_false" name="false" href=""></xref> otherwise. */
public bool PrintGridlines { get; set; }

/* <xref uid="langword_csharp_true" name="true" href=""></xref> for printing pages in rows, <xref uid="langword_csharp_false" name="false" href=""></xref> otherwise. */
public bool PrintPagesInRows { get; set; }

/* <xref uid="langword_csharp_true" name="true" href=""></xref> for printing in black and white, <xref uid="langword_csharp_false" name="false" href=""></xref> otherwise. */
public bool PrintBlackWhite { get; set; }

/* <xref uid="langword_csharp_true" name="true" href=""></xref> for printing in draft quality, <xref uid="langword_csharp_false" name="false" href=""></xref> otherwise. */
public bool DraftQuality { get; set; }

/* <xref uid="langword_csharp_true" name="true" href=""></xref> for printing cell notes, <xref uid="langword_csharp_false" name="false" href=""></xref> otherwise. */
public bool PrintCellNotes { get; set; }

/* <xref uid="langword_csharp_true" name="true" href=""></xref> for using start page number, <xref uid="langword_csharp_false" name="false" href=""></xref> otherwise. */
public bool UseStartPageNumber { get; set; }

/* <xref uid="langword_csharp_true" name="true" href=""></xref> for printing notes at end of sheet, <xref uid="langword_csharp_false" name="false" href=""></xref> otherwise. */
public bool PrintNotesSheetEnd { get; set; }

/* Header margin (in inches). */
public double HeaderMargin { get; set; }

/* Footer margin (in inches). */
public double FooterMargin { get; set; }

/* Top margin (in inches). */
public double TopMargin { get; set; }

/* Bottom margin (in inches). */
public double BottomMargin { get; set; }

/* Left margin (in inches). */
public double LeftMargin { get; set; }

/* Right margin (in inches). */
public double RightMargin { get; set; }

/* <xref uid="langword_csharp_true" name="true" href=""></xref> for using 
<xref href="GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetHeightToPages" data-throw-if-not-resolved="false"></xref>
and <xref href="GemBox.Spreadsheet.ExcelPrintOptions.FitWorksheetWidthToPages" data-throw-if-not-resolved="false"></xref>, 
<xref uid="langword_csharp_false" name="false" href=""></xref> otherwise. */
public bool FitToPage { get; set; }

/* Scaling factor for automatic page breaks. */
public int AutomaticPageBreakScalingFactor { get; set; }

/* Gets the width of the page (in inches). */
public double PageWidth { get; }

/* Gets the height of the page (in inches). */
public double PageHeight { get; }

/* Gets or sets the type of the paper for the page. */
public PaperType PaperType { get; set; }

/* Start page number. */
public int StartPageNumber { get; set; }

/* Fit worksheet width to this number of pages (0 = use as many as needed). */
public int FitWorksheetWidthToPages { get; set; }

/* Fit worksheet height to this number of pages (0 = use as many as needed). */
public int FitWorksheetHeightToPages { get; set; }

/* <xref uid="langword_csharp_true" name="true" href=""></xref> for portrait orientation, <xref uid="langword_csharp_false" name="false" href=""></xref> for landscape orientation. */
public bool Portrait { get; set; }

/* Print resolution in DPI (dots per inch). */
public int PrintResolution { get; set; }

/* Vertical print resolution in DPI (dots per inch). */
public int VerticalPrintResolution { get; set; }

/* Number of copies to print. */
public int NumberOfCopies { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.SpreadsheetHyperlinkCollection.yml:
namespace GemBox.Spreadsheet
{

/* Collection of hyperlinks (<xref href="GemBox.Spreadsheet.SpreadsheetHyperlink" data-throw-if-not-resolved="false"></xref>). */
public sealed class SpreadsheetHyperlinkCollection : IEnumerable<SpreadsheetHyperlink>, IEnumerable
{

/* Removes all hyperlinks. */
public void Clear()

/* Removes the hyperlink at the specified index. */
public void RemoveAt(int index)

/* Removes the first occurrence of a specific <xref href="GemBox.Spreadsheet.SpreadsheetHyperlink" data-throw-if-not-resolved="false"></xref> from the collection. */
public bool Remove(SpreadsheetHyperlink item)

/* Returns an enumerator for the collection. */
public IEnumerator<SpreadsheetHyperlink> GetEnumerator()

/* Gets the hyperlink at the specified index. */
public SpreadsheetHyperlink this[int index] { get; }

/* Gets the number of hyperlinks contained in the collection. */
public int Count { get; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.XlsLoadOptions.yml:
namespace GemBox.Spreadsheet
{

/* Represents options for loading from XLS file format (Microsoft Excel Spreadsheet format; Excel 2003 and prior versions) . */
public sealed class XlsLoadOptions : LoadOptions
{

/* Initializes a new instance of the <xref href="GemBox.Spreadsheet.XlsLoadOptions" data-throw-if-not-resolved="false"></xref> class. */
public XlsLoadOptions()

/* Gets or sets a value indicating whether to preserve features that are not supported when reading XLS files. */
public bool PreserveUnsupportedFeatures { get; set; }

/* Gets or sets the password to open protected / encrypted workbook. */
public string Password { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Vba.yml:
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ExcelColumn.yml:
namespace GemBox.Spreadsheet
{

/* Excel column contains column options and cell range with column cells. */
public sealed class ExcelColumn : ExcelColumnRowBase, IExcelEditor<ExcelColumnRowBaseData>, IFormatHolder<CellFormatData>
{

/* Automatically fits column width to the minimum size required for all data in the column to be visible. */
[ComVisible(false)]
public void AutoFit()

/* Automatically fits column width to the minimum size required for all data in the column to be visible. */
[ComVisible(true)]
public void AutoFit(double scaling)

/* Automatically fits column width by checking only the cells in the column that are specified by row range. */
[ComVisible(false)]
public void AutoFit(double scaling, ExcelRow firstRow, ExcelRow lastRow)

/* Gets the width of column in arbitrary length unit. */
public double GetWidth(LengthUnit lengthUnit)

/* Sets the width of column in arbitrary length unit. */
public void SetWidth(double value, LengthUnit lengthUnit)

/* Gets or sets the column width. */
public int Width { get; set; }
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.FreeLimitReachedAction.yml:
namespace GemBox.Spreadsheet
{

/* Type of action that can be chosen when free limit is reached. */
public enum FreeLimitReachedAction
{

/* Throw <xref href="GemBox.Spreadsheet.FreeLimitReachedException" data-throw-if-not-resolved="false"></xref>. */
ThrowException = 0

/* Stop reading/writing. */
Stop = 1

/* Continue reading/writing using trial mode. */
ContinueAsTrial = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.PivotTables.PivotItemPosition.yml:
namespace GemBox.Spreadsheet.PivotTables
{

/* Represents base item Next/Previous/All position in the base field. */
public enum PivotItemPosition
{

/* No base item position. */
None = 0

/* Represents Previous pivot field base item. */
Previous = 1

/* Represents Next pivot field base item. */
Next = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.LoadStreamingMode.yml:
namespace GemBox.Spreadsheet
{

/* Represents a mode of streamlined loading of an <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref>. */
public enum LoadStreamingMode
{

/* <p>No streamlined loading of an <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref>.</p>
<p>All rows of each <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> are loaded and held in memory.</p> */
None = 0

/* <p>The <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> is loaded in a streamlined fashion.</p>
<p>A chunk of <xref href="GemBox.Spreadsheet.ExcelRow" data-throw-if-not-resolved="false"></xref>s of each <xref href="GemBox.Spreadsheet.ExcelWorksheet" data-throw-if-not-resolved="false"></xref> are loaded and held in memory.
If the requested <xref href="GemBox.Spreadsheet.ExcelRow" data-throw-if-not-resolved="false"></xref> is not in the loaded chunk, the currently loaded chunk is discarded and a chunk containing the requested <xref href="GemBox.Spreadsheet.ExcelRow" data-throw-if-not-resolved="false"></xref> is loaded and held in memory.</p>
<p>When the <xref href="GemBox.Spreadsheet.ExcelFile" data-throw-if-not-resolved="false"></xref> is loaded in <xref href="GemBox.Spreadsheet.LoadStreamingMode.Read" data-throw-if-not-resolved="false"></xref> mode, the modification of rows, column collection, and cells (values, styles, formula) is not generally supported and might have unpredictable behavior.</p> */
Read = 1
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.Drawing.CapsType.yml:
namespace GemBox.Spreadsheet.Drawing
{

/* Represents a text caps (capitalization) type. */
public enum CapsType
{

/* No caps are applied to the text. */
None = 0

/* Apply small caps to the text. All letters are converted to lower case. */
Small = 1

/* Apply all caps on the text. All lower case letters are converted to upper case. */
All = 2
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ConditionalFormatting.ConditionalValueType.yml:
namespace GemBox.Spreadsheet.ConditionalFormatting
{

/* Represents a <xref href="GemBox.Spreadsheet.ConditionalFormatting.ConditionalValue" data-throw-if-not-resolved="false"></xref> type. */
public enum ConditionalValueType
{

/* No conditional value. */
None = 0

/* Lowest value from the applied ranges. */
Lowest = 1

/* Highest value from the applied ranges. */
Highest = 2

/* The shortest data bar is proportional to the minimum value and the longest data bar is proportional to the maximum value from the applied ranges. */
Automatic = 3

/* A constant number. */
Number = 4

/* A percentage between the lowest and highest values from the applied ranges. */
Percent = 5

/* A formula. */
Formula = 6

/* A percentile ranking of the values from the applied ranges. */
Percentile = 7
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.GradientShadingStyle.yml:
namespace GemBox.Spreadsheet
{

/* <p>Represents a shading style and variant of a gradient fill effect.</p>
<p>Gradient fill is currently supported in XLSX, XLSB and partially in rendering formats (PDF, XPS and image formats).</p> */
public enum GradientShadingStyle
{

/* Cell doesn&apos;t have any gradient fill effect. */
None = 0

/* Linear gradient where the first color starts at the top side of the cell and blends horizontally with the second color which starts at the bottom side of the cell [1 - 2]. */
HorizontalHigh = 1

/* Linear gradient where the first color starts at the bottom side of the cell and blends horizontally with the second color which starts at the top side of the cell [2 - 1]. */
HorizontalLow = 2

/* Linear gradient where the first color starts at the top and bottom sides of the cell and blends horizontally with the second color which starts in the middle of the cell [1 - 2 - 1]. */
Horizontal = 3

/* Linear gradient where the first color starts at the left side of the cell and blends vertically with the second color which starts at the right side of the cell [1 | 2]. */
VerticalLow = 4

/* Linear gradient where the first color starts at the right side of the cell and blends vertically with the second color which starts at the left side of the cell [2 | 1]. */
VerticalHigh = 5

/* Linear gradient where the first color starts at the left and right sides of the cell and blends vertically with the second color which starts in the middle of the cell [1 | 2 | 1]. */
Vertical = 6

/* Linear gradient where the first color starts at the top-left corner of the cell and blends diagonally with the second color which starts at the bottom-right corner of the cell [1 / 2]. */
DiagonalUpHigh = 7

/* Linear gradient where the first color starts at the bottom-right corner of the cell and blends diagonally with the second color which starts at the top-left corner of the cell [2 / 1]. */
DiagonalUpLow = 8

/* Linear gradient where the first color starts at the top-left and bottom-right corners of the cell and blends diagonally with the second color which starts in the middle of the cell [1 / 2 / 1]. */
DiagonalUp = 9

/* Linear gradient where the first color starts at the top-right corner of the cell and blends diagonally with the second color which starts at the bottom-left corner of the cell [2 \ 1]. */
DiagonalDownHigh = 10

/* Linear gradient where the first color starts at the bottom-left corner of the cell and blends diagonally with the second color which starts at the top-right corner of the cell [1 \ 2]. */
DiagonalDownLow = 11

/* Linear gradient where the first color starts at the top-right and bottom-left corners of the cell and blends diagonally with the second color which starts in the middle of the cell [1 \ 2 \ 1]. */
DiagonalDown = 12

/* Path gradient where the first color starts at the top-left corner of the cell and blends with the second color which starts at the other corners of the cell. */
FromTopLeftCorner = 13

/* Path gradient where the first color starts at the top-right corner of the cell and blends with the second color which starts at the other corners of the cell. */
FromTopRightCorner = 14

/* Path gradient where the first color starts at the bottom-left corner of the cell and blends with the second color which starts at the other corners of the cell. */
FromBottomLeftCorner = 15

/* Path gradient where the first color starts at the bottom-right corner of the cell and blends with the second color which starts at the other corners of the cell. */
FromBottomRightCorner = 16

/* Path gradient where the first color starts in the middle of the cell and blends with the second color which starts at the corners of the cell. */
FromCenter = 17

/* Gradient fill effect is too complex to be described with this enumeration. */
Complex = 18
}
}
--- Doc: ../docs/GemBox.Spreadsheet/api/GemBox.Spreadsheet.ContentTypeProperty.yml:
namespace GemBox.Spreadsheet
{

/* Represents a custom content type property. */
public class ContentTypeProperty
{

/* If this property is nillable. */
public bool Nillable { get; }

/* Property type (e.g., DateTime, Note, Boolean). */
public string Type { get; }

/* Initial value for this property. */
public string Value { get; }

/* Name of this property. */
public string Name { get; }
}
}
---------------- Total of 379 files processed.

---------------- Processing ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/**/*.cs:

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/DataGridView in WindowsForms/Form1.cs:
using System;
using System.Windows.Forms;
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.WinFormsUtilities;

public partial class Form1 : Form
{
    public Form1()
    {
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        InitializeComponent();
    }

    private void btnLoadFile_Click(object sender, EventArgs e)
    {
        var openFileDialog = new OpenFileDialog();
        openFileDialog.Filter =
            "XLS files (*.xls, *.xlt)|*.xls;*.xlt|" +
            "XLSX files (*.xlsx, *.xlsm, *.xltx, *.xltm)|*.xlsx;*.xlsm;*.xltx;*.xltm|" +
            "ODS files (*.ods, *.ots)|*.ods;*.ots|" +
            "CSV files (*.csv, *.tsv)|*.csv;*.tsv|" +
            "HTML files (*.html, *.htm)|*.html;*.htm";

        openFileDialog.FilterIndex = 2;

        if (openFileDialog.ShowDialog() == DialogResult.OK)
        {
            var workbook = ExcelFile.Load(openFileDialog.FileName);
            var worksheet = workbook.Worksheets.ActiveWorksheet;

            // From ExcelFile to DataGridView.
            DataGridViewConverter.ExportToDataGridView(
                worksheet,
                this.dataGridView1,
                new ExportToDataGridViewOptions() { ColumnHeaders = true });
        }
    }

    private void btnSave_Click(object sender, EventArgs e)
    {
        var saveFileDialog = new SaveFileDialog();
        saveFileDialog.Filter =
            "XLS (*.xls)|*.xls|" +
            "XLT (*.xlt)|*.xlt|" +
            "XLSX (*.xlsx)|*.xlsx|" +
            "XLSM (*.xlsm)|*.xlsm|" +
            "XLTX (*.xltx)|*.xltx|" +
            "XLTM (*.xltm)|*.xltm|" +
            "ODS (*.ods)|*.ods|" +
            "OTS (*.ots)|*.ots|" +
            "CSV (*.csv)|*.csv|" +
            "TSV (*.tsv)|*.tsv|" +
            "HTML (*.html)|*.html|" +
            "MHTML (.mhtml)|*.mhtml|" +
            "PDF (*.pdf)|*.pdf|" +
            "XPS (*.xps)|*.xps|" +
            "BMP (*.bmp)|*.bmp|" +
            "GIF (*.gif)|*.gif|" +
            "JPEG (*.jpg)|*.jpg|" +
            "PNG (*.png)|*.png|" +
            "TIFF (*.tif)|*.tif|" +
            "WMP (*.wdp)|*.wdp";

        saveFileDialog.FilterIndex = 3;

        if (saveFileDialog.ShowDialog() == DialogResult.OK)
        {
            var workbook = new ExcelFile();
            var worksheet = workbook.Worksheets.Add("Sheet1");

            // From DataGridView to ExcelFile.
            DataGridViewConverter.ImportFromDataGridView(
                worksheet,
                this.dataGridView1,
                new ImportFromDataGridViewOptions() { ColumnHeaders = true });

            workbook.Save(saveFileDialog.FileName);
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/DataGridView in WindowsForms/Form1.Designer.cs:
partial class Form1
{
    /// <summary>
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary>
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
        if (disposing && (components != null))
        {
            components.Dispose();
        }
        base.Dispose(disposing);
    }

    #region Windows Form Designer generated code

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
        this.dataGridView1 = new System.Windows.Forms.DataGridView();
        this.btnLoadFile = new System.Windows.Forms.Button();
        this.btnSave = new System.Windows.Forms.Button();
        ((System.ComponentModel.ISupportInitialize)(this.dataGridView1)).BeginInit();
        this.SuspendLayout();
        // 
        // dataGridView1
        // 
        this.dataGridView1.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
        this.dataGridView1.Location = new System.Drawing.Point(12, 42);
        this.dataGridView1.Name = "dataGridView1";
        this.dataGridView1.Size = new System.Drawing.Size(607, 308);
        this.dataGridView1.TabIndex = 0;
        // 
        // btnLoadFile
        // 
        this.btnLoadFile.Location = new System.Drawing.Point(12, 12);
        this.btnLoadFile.Name = "btnLoadFile";
        this.btnLoadFile.Size = new System.Drawing.Size(100, 23);
        this.btnLoadFile.TabIndex = 1;
        this.btnLoadFile.Text = "Load File";
        this.btnLoadFile.UseVisualStyleBackColor = true;
        this.btnLoadFile.Click += new System.EventHandler(this.btnLoadFile_Click);
        // 
        // btnSave
        // 
        this.btnSave.Location = new System.Drawing.Point(118, 12);
        this.btnSave.Name = "btnSave";
        this.btnSave.Size = new System.Drawing.Size(100, 23);
        this.btnSave.TabIndex = 2;
        this.btnSave.Text = "Save File";
        this.btnSave.UseVisualStyleBackColor = true;
        this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
        // 
        // Form1
        // 
        this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
        this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
        this.ClientSize = new System.Drawing.Size(631, 362);
        this.Controls.Add(this.btnSave);
        this.Controls.Add(this.btnLoadFile);
        this.Controls.Add(this.dataGridView1);
        this.Name = "Form1";
        this.Text = "Import/Export to Windows.Forms DataGridView";
        ((System.ComponentModel.ISupportInitialize)(this.dataGridView1)).EndInit();
        this.ResumeLayout(false);

    }

    #endregion

    private System.Windows.Forms.DataGridView dataGridView1;
    private System.Windows.Forms.Button btnLoadFile;
    private System.Windows.Forms.Button btnSave;
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/DataGridView in WindowsForms/Program.cs:
using System;
using System.Collections.Generic;
using System.Windows.Forms;

namespace WinFormsUtilities
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/DataGridView in WindowsForms/Properties/AssemblyInfo.cs:
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("WinFormsUtilities")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("GemBox Ltd.")]
[assembly: AssemblyProduct("WinFormsUtilities")]
[assembly: AssemblyCopyright("Copyright © GemBox Ltd.")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("ac402c92-9ab4-4d22-bfc0-00316af495af")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Docker/Program.cs:
﻿using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Charts;

class Program
{
    static void Main()
    {
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // Create new workbook.
        var workbook = new ExcelFile();

        // Create new worksheet.
        var worksheet = workbook.Worksheets.Add("Sheet1");
        worksheet.PrintOptions.PrintHeadings = true;
        worksheet.PrintOptions.PrintGridlines = true;
        worksheet.PrintOptions.FitWorksheetWidthToPages = 1;

        // Add sample formatting.
        worksheet.Rows[0].Style = workbook.Styles[BuiltInCellStyleName.Heading1];
        worksheet.Columns[0].SetWidth(80, LengthUnit.Pixel);
        worksheet.Columns[1].SetWidth(80, LengthUnit.Pixel);

        // Add sample data.
        worksheet.Cells["A1"].Value = "Name";
        worksheet.Cells["A2"].Value = "John Doe";
        worksheet.Cells["A3"].Value = "Fred Nurk";
        worksheet.Cells["A4"].Value = "Hans Meier";
        worksheet.Cells["A5"].Value = "Ivan Horvat";
        worksheet.Cells["B1"].Value = "Salary";
        worksheet.Cells["B2"].Value = 3600;
        worksheet.Cells["B3"].Value = 2580;
        worksheet.Cells["B4"].Value = 3200;
        worksheet.Cells["B5"].Value = 4100;

        // Add sample chart.
        var chart = worksheet.Charts.Add(ChartType.Bar, "B7", "J20");
        chart.SelectData(worksheet.Cells.GetSubrange("A1:B5"), true);

        // Save spreadsheet in XLSX and PDF format.
        workbook.Save("output.xlsx");
        workbook.Save("output.pdf");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Azure/GemBoxFunction.cs:
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using GemBox.Spreadsheet;

public static class GemBoxFunction
{
    [FunctionName("GemBoxFunction")]
#pragma warning disable CS1998 // Async method lacks 'await' operators.
    public static async Task<IActionResult> Run([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = null)] HttpRequest req, ILogger log)
#pragma warning restore CS1998
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Hello World");

        worksheet.Cells[0, 0].Value = "Hello";
        worksheet.Cells[0, 1].Value = "World";

        var fileName = "Output.xlsx";
        var options = SaveOptions.XlsxDefault;

        using (var stream = new MemoryStream())
        {
            workbook.Save(stream, options);
            return new FileContentResult(stream.ToArray(), options.ContentType) { FileDownloadName = fileName };
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/MVC/Startup.cs:
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SpreadsheetCoreMvc
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;

            // Add compatibility switch.
            AppContext.SetSwitch("Switch.System.Windows.Media.ShouldRenderEvenWhenNoDisplayDevicesAreAvailable", true);
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }

            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/MVC/Program.cs:
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SpreadsheetCoreMvc
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/MVC/Models/ErrorViewModel.cs:
﻿namespace SpreadsheetCoreMvc.Models
{
    public class ErrorViewModel
    {
        public string RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/MVC/Controllers/HomeController.cs:
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using Microsoft.AspNetCore.Mvc;
using SpreadsheetCoreMvc.Models;
using GemBox.Spreadsheet;

namespace SpreadsheetCoreMvc.Controllers
{
    public class HomeController : Controller
    {
        static HomeController()
        {
            // If using the Professional version, put your serial key below.
            SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        }

        public IActionResult Index()
        {
            return View(new ReportModel());
        }

        public FileStreamResult Download(ReportModel model)
        {
            // Create new spreadsheet.
            var workbook = new ExcelFile();
            var worksheet = workbook.Worksheets.Add("Report");

            // Set styles on rows and columns.
            worksheet.Rows[0].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;
            worksheet.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
            worksheet.Columns[0].SetWidth(40, LengthUnit.Pixel);
            worksheet.Columns[1].SetWidth(100, LengthUnit.Pixel);
            worksheet.Columns[2].SetWidth(100, LengthUnit.Pixel);
            worksheet.Columns[2].Style.NumberFormat = @"\$\ #,##0";

            // Create header row.
            worksheet.Cells["A1"].Value = nameof(ReportItemModel.Id);
            worksheet.Cells["B1"].Value = nameof(ReportItemModel.Name);
            worksheet.Cells["C1"].Value = nameof(ReportItemModel.Salary);

            // Create data rows.
            for (int r = 1; r <= model.Items.Count; r++)
            {
                ReportItemModel item = model.Items[r - 1];
                worksheet.Cells[r, 0].Value = item.Id;
                worksheet.Cells[r, 1].Value = item.Name;
                worksheet.Cells[r, 2].Value = item.Salary;
            }

            // Save spreadsheet in specified file format.
            var stream = new MemoryStream();
            workbook.Save(stream, model.Options);

            // Download file.
            return File(stream, model.Options.ContentType, $"OutputFromView.{model.Format.ToLower()}");
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel() { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}

namespace SpreadsheetCoreMvc.Models
{
    public class ReportModel
    {
        public IList<ReportItemModel> Items { get; set; } = new List<ReportItemModel>()
        {
            new ReportItemModel() { Id = 100, Name = "John Doe", Salary = 3600 },
            new ReportItemModel() { Id = 101, Name = "Jane Doe", Salary = 7200 },
            new ReportItemModel() { Id = 102, Name = "Fred Nurk", Salary = 2580 },
            new ReportItemModel() { Id = 103, Name = "Hans Meier", Salary = 3200 },
            new ReportItemModel() { Id = 104, Name = "Ivan Horvat", Salary = 4100 },
            new ReportItemModel() { Id = 105, Name = "Jean Dupont", Salary = 6850 },
            new ReportItemModel() { Id = 106, Name = "Mario Rossi", Salary = 4400 }
        };
        public string Format { get; set; } = "XLSX";
        public SaveOptions Options => this.FormatMappingDictionary[this.Format];
        public IDictionary<string, SaveOptions> FormatMappingDictionary => new Dictionary<string, SaveOptions>()
        {
            ["XLSX"] = new XlsxSaveOptions(),
            ["XLS"] = new XlsSaveOptions(),
            ["ODS"] = new OdsSaveOptions(),
            ["CSV"] = new CsvSaveOptions(CsvType.CommaDelimited),
            ["PDF"] = new PdfSaveOptions(),
            ["HTML"] = new HtmlSaveOptions() { EmbedImages = true },
            ["XPS"] = new XpsSaveOptions(),
            ["BMP"] = new ImageSaveOptions(ImageSaveFormat.Bmp),
            ["PNG"] = new ImageSaveOptions(ImageSaveFormat.Png),
            ["JPG"] = new ImageSaveOptions(ImageSaveFormat.Jpeg),
            ["GIF"] = new ImageSaveOptions(ImageSaveFormat.Gif),
            ["TIF"] = new ImageSaveOptions(ImageSaveFormat.Tiff)
        };
    }

    public class ReportItemModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Salary { get; set; }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/Razor Pages/Startup.cs:
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SpreadsheetCorePages
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;

            // Add compatibility switch.
            AppContext.SetSwitch("Switch.System.Windows.Media.ShouldRenderEvenWhenNoDisplayDevicesAreAvailable", true);
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddRazorPages();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
            }

            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapRazorPages();
            });
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/Razor Pages/Program.cs:
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace SpreadsheetCorePages
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/Razor Pages/Pages/Error.cshtml.cs:
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace SpreadsheetCorePages.Pages
{
    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    [IgnoreAntiforgeryToken]
    public class ErrorModel : PageModel
    {
        public string RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

        private readonly ILogger<ErrorModel> _logger;

        public ErrorModel(ILogger<ErrorModel> logger)
        {
            _logger = logger;
        }

        public void OnGet()
        {
            RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/ASP.NET Core/Razor Pages/Pages/Index.cshtml.cs:
using System.Collections.Generic;
using System.IO;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using SpreadsheetCorePages.Models;
using GemBox.Spreadsheet;

namespace SpreadsheetCorePages.Pages
{
    public class IndexModel : PageModel
    {
        [BindProperty]
        public ReportModel Report { get; set; }

        public IndexModel()
        {
            this.Report = new ReportModel();

            // If using the Professional version, put your serial key below.
            SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        }

        public void OnGet() { }

        public FileContentResult OnPost()
        {
            // Create new spreadsheet.
            var workbook = new ExcelFile();
            var worksheet = workbook.Worksheets.Add("Report");

            // Set styles on rows and columns.
            worksheet.Rows[0].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;
            worksheet.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
            worksheet.Columns[0].SetWidth(40, LengthUnit.Pixel);
            worksheet.Columns[1].SetWidth(100, LengthUnit.Pixel);
            worksheet.Columns[2].SetWidth(100, LengthUnit.Pixel);
            worksheet.Columns[2].Style.NumberFormat = @"\$\ #,##0";

            // Create header row.
            worksheet.Cells["A1"].Value = nameof(ReportItemModel.Id);
            worksheet.Cells["B1"].Value = nameof(ReportItemModel.Name);
            worksheet.Cells["C1"].Value = nameof(ReportItemModel.Salary);

            // Create data rows.
            for (int r = 1; r <= this.Report.Items.Count; r++)
            {
                ReportItemModel item = this.Report.Items[r - 1];
                worksheet.Cells[r, 0].Value = item.Id;
                worksheet.Cells[r, 1].Value = item.Name;
                worksheet.Cells[r, 2].Value = item.Salary;
            }

            // Save spreadsheet in specified file format.
            var stream = new MemoryStream();
            workbook.Save(stream, this.Report.Options);

            // Download file.
            return File(stream.ToArray(), this.Report.Options.ContentType, $"OutputFromPage.{this.Report.Format.ToLower()}");
        }
    }
}

namespace SpreadsheetCorePages.Models
{
    public class ReportModel
    {
        public IList<ReportItemModel> Items { get; set; } = new List<ReportItemModel>()
        {
            new ReportItemModel() { Id = 100, Name = "John Doe", Salary = 3600 },
            new ReportItemModel() { Id = 101, Name = "Jane Doe", Salary = 7200 },
            new ReportItemModel() { Id = 102, Name = "Fred Nurk", Salary = 2580 },
            new ReportItemModel() { Id = 103, Name = "Hans Meier", Salary = 3200 },
            new ReportItemModel() { Id = 104, Name = "Ivan Horvat", Salary = 4100 },
            new ReportItemModel() { Id = 105, Name = "Jean Dupont", Salary = 6850 },
            new ReportItemModel() { Id = 106, Name = "Mario Rossi", Salary = 4400 }
        };
        public string Format { get; set; } = "PDF";
        public SaveOptions Options => this.FormatMappingDictionary[this.Format];
        public IDictionary<string, SaveOptions> FormatMappingDictionary => new Dictionary<string, SaveOptions>()
        {
            ["XLSX"] = new XlsxSaveOptions(),
            ["XLS"] = new XlsSaveOptions(),
            ["ODS"] = new OdsSaveOptions(),
            ["CSV"] = new CsvSaveOptions(CsvType.CommaDelimited),
            ["PDF"] = new PdfSaveOptions(),
            ["HTML"] = new HtmlSaveOptions() { EmbedImages = true },
            ["XPS"] = new XpsSaveOptions(),
            ["BMP"] = new ImageSaveOptions(ImageSaveFormat.Bmp),
            ["PNG"] = new ImageSaveOptions(ImageSaveFormat.Png),
            ["JPG"] = new ImageSaveOptions(ImageSaveFormat.Jpeg),
            ["GIF"] = new ImageSaveOptions(ImageSaveFormat.Gif),
            ["TIF"] = new ImageSaveOptions(ImageSaveFormat.Tiff)
        };
    }

    public class ReportItemModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Salary { get; set; }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/App.xaml.cs:
﻿namespace SpreadsheetMaui
{
    public partial class App : Application
    {
        public App()
        {
            InitializeComponent();

            MainPage = new AppShell();
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/MauiProgram.cs:
﻿namespace SpreadsheetMaui
{
    public static class MauiProgram
    {
        public static MauiApp CreateMauiApp()
        {
            var builder = MauiApp.CreateBuilder();
            builder
                .UseMauiApp<App>()
                .ConfigureFonts(fonts =>
                {
                    fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                    fonts.AddFont("OpenSans-Semibold.ttf", "OpenSansSemibold");
                });

            return builder.Build();
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/AppShell.xaml.cs:
﻿namespace SpreadsheetMaui
{
    public partial class AppShell : Shell
    {
        public AppShell()
        {
            InitializeComponent();
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/MainPage.xaml.cs:
﻿using GemBox.Spreadsheet;

namespace SpreadsheetMaui
{
    public partial class MainPage : ContentPage
    {
        static MainPage()
        {
            SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        }

        public MainPage()
        {
            InitializeComponent();
        }

        private async Task<string> CreateWorkbookAsync()
        {
            var workbook = new ExcelFile();
            var worksheet = workbook.Worksheets.Add("Sheet1");

            foreach (var cell in table.Root[0].Cast<EntryCell>())
                worksheet.Cells[cell.Label].Value = cell.Text;

            worksheet.Columns["A"].AutoFit();

            using var stream = new MemoryStream();
            using (var imageStream = await FileSystem.OpenAppPackageFileAsync("dices.png"))
                await imageStream.CopyToAsync(stream);
            worksheet.Pictures.Add(stream, ExcelPictureFormat.Png, "C1", "E5");

            var filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Example.pdf");

            await Task.Run(() => workbook.Save(filePath));

            return filePath;
        }

        private async void Button_Clicked(object sender, EventArgs e)
        {
            button.IsEnabled = false;
            activity.IsRunning = true;

            try
            {
                var filePath = await CreateWorkbookAsync();
                await Launcher.OpenAsync(new OpenFileRequest(Path.GetFileName(filePath), new ReadOnlyFile(filePath)));
            }
            catch (Exception ex)
            {
                await DisplayAlert("Error", ex.Message, "Close");
            }

            activity.IsRunning = false;
            button.IsEnabled = true;
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/iOS/AppDelegate.cs:
﻿using Foundation;

namespace SpreadsheetMaui
{
    [Register("AppDelegate")]
    public class AppDelegate : MauiUIApplicationDelegate
    {
        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/iOS/Program.cs:
﻿using ObjCRuntime;
using UIKit;

namespace SpreadsheetMaui
{
    public class Program
    {
        // This is the main entry point of the application.
        static void Main(string[] args)
        {
            // if you want to use a different Application Delegate class from "AppDelegate"
            // you can specify it here.
            UIApplication.Main(args, null, typeof(AppDelegate));
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/MacCatalyst/AppDelegate.cs:
﻿using Foundation;

namespace SpreadsheetMaui
{
    [Register("AppDelegate")]
    public class AppDelegate : MauiUIApplicationDelegate
    {
        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/MacCatalyst/Program.cs:
﻿using ObjCRuntime;
using UIKit;

namespace SpreadsheetMaui
{
    public class Program
    {
        // This is the main entry point of the application.
        static void Main(string[] args)
        {
            // if you want to use a different Application Delegate class from "AppDelegate"
            // you can specify it here.
            UIApplication.Main(args, null, typeof(AppDelegate));
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/Tizen/Main.cs:
using Microsoft.Maui;
using Microsoft.Maui.Hosting;
using System;

namespace SpreadsheetMaui
{
    internal class Program : MauiApplication
    {
        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();

        static void Main(string[] args)
        {
            var app = new Program();
            app.Run(args);
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/Android/MainApplication.cs:
﻿using Android.App;
using Android.Runtime;

[assembly: UsesPermission(Android.Manifest.Permission.ReadExternalStorage)]
namespace SpreadsheetMaui
{
    [Application]
    public class MainApplication : MauiApplication
    {
        public MainApplication(IntPtr handle, JniHandleOwnership ownership)
            : base(handle, ownership)
        {
        }

        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/Android/MainActivity.cs:
﻿using Android.App;
using Android.Content.PM;
using Android.OS;

namespace SpreadsheetMaui
{
    [Activity(Theme = "@style/Maui.SplashTheme", MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation | ConfigChanges.UiMode | ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize | ConfigChanges.Density)]
    public class MainActivity : MauiAppCompatActivity
    {
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/MAUI/Platforms/Windows/App.xaml.cs:
﻿using Microsoft.UI.Xaml;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace SpreadsheetMaui.WinUI
{
    /// <summary>
    /// Provides application-specific behavior to supplement the default Application class.
    /// </summary>
    public partial class App : MauiWinUIApplication
    {
        /// <summary>
        /// Initializes the singleton application object.  This is the first line of authored code
        /// executed, and as such is the logical equivalent of main() or WinMain().
        /// </summary>
        public App()
        {
            this.InitializeComponent();
        }

        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Linux_macOS/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        ExcelFile workbook = new ExcelFile();
        ExcelWorksheet worksheet = workbook.Worksheets.Add("Sheet1");
        ExcelCell cell = worksheet.Cells["A1"];

        cell.Value = "Hello World!";

        workbook.Save("HelloWorld.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Blazor/Server App/Program.cs:
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddRazorPages();
builder.Services.AddServerSideBlazor();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();

app.UseStaticFiles();

app.UseRouting();

app.MapBlazorHub();

app.MapFallbackToPage("/_Host");

app.Run();

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Blazor/Server App/Data/ReportModel.cs:
using System.Collections.Generic;
using GemBox.Spreadsheet;

namespace BlazorServerApp.Data
{
    public class ReportModel
    {
        public IList<ReportItemModel> Items { get; } = new List<ReportItemModel>()
        {
            new ReportItemModel() { Id = 100, Name = "John Doe", Salary = 3600 },
            new ReportItemModel() { Id = 101, Name = "Jane Doe", Salary = 7200 },
            new ReportItemModel() { Id = 102, Name = "Fred Nurk", Salary = 2580 },
            new ReportItemModel() { Id = 103, Name = "Hans Meier", Salary = 3200 },
            new ReportItemModel() { Id = 104, Name = "Ivan Horvat", Salary = 4100 },
            new ReportItemModel() { Id = 105, Name = "Jean Dupont", Salary = 6850 },
            new ReportItemModel() { Id = 106, Name = "Mario Rossi", Salary = 4400 }
        };
        public string Format { get; set; } = "XLSX";
        public SaveOptions Options => this.FormatMappingDictionary[this.Format];
        public IDictionary<string, SaveOptions> FormatMappingDictionary => new Dictionary<string, SaveOptions>()
        {
            ["XLSX"] = new XlsxSaveOptions(),
            ["XLS"] = new XlsSaveOptions(),
            ["ODS"] = new OdsSaveOptions(),
            ["PDF"] = new PdfSaveOptions(),
            ["HTML"] = new HtmlSaveOptions() { EmbedImages = true },
            ["MHTML"] = new HtmlSaveOptions() { HtmlType = HtmlType.Mhtml },
            ["CSV"] = new CsvSaveOptions(CsvType.CommaDelimited),
            ["TXT"] = new CsvSaveOptions(CsvType.TabDelimited),
            ["XPS"] = new XpsSaveOptions(),
            ["PNG"] = new ImageSaveOptions(ImageSaveFormat.Png),
            ["JPG"] = new ImageSaveOptions(ImageSaveFormat.Jpeg),
            ["BMP"] = new ImageSaveOptions(ImageSaveFormat.Bmp),
            ["GIF"] = new ImageSaveOptions(ImageSaveFormat.Gif),
            ["TIF"] = new ImageSaveOptions(ImageSaveFormat.Tiff)
        };
    }

    public class ReportItemModel
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public int Salary { get; set; }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Blazor/Server App/Pages/Error.cshtml.cs:
﻿using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using System.Diagnostics;

namespace BlazorServerApp.Pages
{
    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    [IgnoreAntiforgeryToken]
    public class ErrorModel : PageModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);

        private readonly ILogger<ErrorModel> _logger;

        public ErrorModel(ILogger<ErrorModel> logger)
        {
            _logger = logger;
        }

        public void OnGet()
        {
            RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Blazor/WebAssembly App/Program.cs:
using BlazorWebAssemblyApp;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Net.Http;

var builder = WebAssemblyHostBuilder.CreateDefault(args);
builder.RootComponents.Add<App>("#app");
builder.RootComponents.Add<HeadOutlet>("head::after");

builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });

await builder.Build().RunAsync();

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Blazor/WebAssembly App/Data/ReportModel.cs:
using System.Collections.Generic;
using GemBox.Spreadsheet;

namespace BlazorWebAssemblyApp.Data
{
    public class ReportModel
    {
        public IList<ReportItemModel> Items { get; } = new List<ReportItemModel>()
        {
            new ReportItemModel() { Id = 100, Name = "John Doe", Salary = 3600 },
            new ReportItemModel() { Id = 101, Name = "Jane Doe", Salary = 7200 },
            new ReportItemModel() { Id = 102, Name = "Fred Nurk", Salary = 2580 },
            new ReportItemModel() { Id = 103, Name = "Hans Meier", Salary = 3200 },
            new ReportItemModel() { Id = 104, Name = "Ivan Horvat", Salary = 4100 },
            new ReportItemModel() { Id = 105, Name = "Jean Dupont", Salary = 6850 },
            new ReportItemModel() { Id = 106, Name = "Mario Rossi", Salary = 4400 }
        };
        public string Format { get; set; } = "PDF";
        public SaveOptions Options => this.FormatMappingDictionary[this.Format];
        public IDictionary<string, SaveOptions> FormatMappingDictionary => new Dictionary<string, SaveOptions>()
        {
            ["XLSX"] = new XlsxSaveOptions(),
            ["XLS"] = new XlsSaveOptions(),
            ["ODS"] = new OdsSaveOptions(),
            ["PDF"] = new PdfSaveOptions(),
            ["HTML"] = new HtmlSaveOptions() { EmbedImages = true },
            ["MHTML"] = new HtmlSaveOptions() { HtmlType = HtmlType.Mhtml },
            ["CSV"] = new CsvSaveOptions(CsvType.CommaDelimited),
            ["TXT"] = new CsvSaveOptions(CsvType.TabDelimited)
        };
    }

    public class ReportItemModel
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public int Salary { get; set; }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/GridView in ASP.NET Web Forms/Default.aspx.cs:
using System;
using System.Data;
using System.IO;
using System.Web.UI;
using System.Web.UI.WebControls;
using GemBox.Spreadsheet;

namespace MediumTrust
{
    public partial class _Default : Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

            // To be able to save ExcelFile to PDF format in Medium Trust environment,
            // you need to specify a font files location that is under your ASP.NET application's control.
            FontSettings.FontsBaseDirectory = Server.MapPath("Fonts/");

            if (!Page.IsPostBack)
            {
                var people = new DataTable();
                people.Columns.Add("ID", typeof(int));
                people.Columns.Add("FirstName", typeof(string));
                people.Columns.Add("LastName", typeof(string));

                Session["people"] = people;

                this.LoadDataFromFile(Request.PhysicalApplicationPath + "InputData.xlsx");
                this.SetDataBinding();
            }
        }

        /// <summary>
        /// Export GridView data to Excel file.
        /// </summary>
        protected void ExportData_Click(object sender, EventArgs e)
        {
            var people = (DataTable)Session["people"];

            // Create Excel file.
            var workbook = new ExcelFile();
            var worksheet = workbook.Worksheets.Add("DataSheet");

            // Export DataTable that's used as GridView data source into Excel sheet.
            worksheet.InsertDataTable(people, new InsertDataTableOptions("A1") { ColumnHeaders = true });

            // Stream Excel file to client's browser.
            workbook.Save(this.Response, "Report." + this.RadioButtonList1.SelectedValue);
        }

        /// <summary>
        /// Export GridView data and formatting to Excel file.
        /// </summary>
        protected void ExportDataAndFormatting_Click(object sender, EventArgs e)
        {
            var stringWriter = new StringWriter();
            var htmlWriter = new HtmlTextWriter(stringWriter);
            
            // Export GridView control as HTML content.
            this.GridView1.RenderControl(htmlWriter);

            var htmlOptions = LoadOptions.HtmlDefault;
            var htmlData = htmlOptions.Encoding.GetBytes(stringWriter.ToString());

            using (var htmlStream = new MemoryStream(htmlData))
            {
                // Load HTML into Excel file.
                var workbook = ExcelFile.Load(htmlStream, htmlOptions);

                // Rename Excel sheet.
                var worksheet = workbook.Worksheets[0];
                worksheet.Name = "StyledDataSheet";

                // Delete Excel column that has Delete and Edit buttons.
                worksheet.Columns.Remove(0);

                // Stream Excel file to client's browser.
                workbook.Save(this.Response, "Styled Report." + this.RadioButtonList1.SelectedValue);
            }
        }

        // Override verification to successfully call GridView1.RenderControl method.
        public override void VerifyRenderingInServerForm(Control control)
        { }

        private void LoadDataFromFile(string fileName)
        {
            var people = (DataTable)Session["people"];

            // Load Excel file.
            var workbook = ExcelFile.Load(fileName);
            var worksheet = workbook.Worksheets[0];

            // Import Excel data into DataTable that's used as GridView data source.
            worksheet.ExtractToDataTable(people, new ExtractToDataTableOptions("A1", worksheet.Rows.Count));
        }

        private void SetDataBinding()
        {
            var people = (DataTable)Session["people"];
            var peopleDataView = people.DefaultView;
            peopleDataView.AllowDelete = true;

            this.GridView1.DataSource = peopleDataView;
            this.GridView1.DataBind();
        }

        protected void GridView1_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            var people = (DataTable)Session["people"];
            people.Rows[e.RowIndex].Delete();
            this.SetDataBinding();
        }

        protected void GridView1_RowUpdating(object sender, GridViewUpdateEventArgs e)
        {
            var people = (DataTable)Session["people"];

            for (int i = 1; i <= people.Columns.Count; i++)
            {
                var editTextBox = this.GridView1.Rows[e.RowIndex].Cells[i].Controls[0] as TextBox;
                if (editTextBox != null)
                    people.Rows[e.RowIndex][i - 1] = editTextBox.Text;
            }

            this.GridView1.EditIndex = -1;
            this.SetDataBinding();
        }

        protected void GridView1_RowEditing(object sender, GridViewEditEventArgs e)
        {
            this.GridView1.EditIndex = e.NewEditIndex;
            this.SetDataBinding();
        }

        protected void GridView1_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        {
            this.GridView1.EditIndex = -1;
            this.SetDataBinding();
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/GridView in ASP.NET Web Forms/Default.aspx.designer.cs:
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated. 
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediumTrust
{


    public partial class _Default
    {

        /// <summary>
        /// form1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.HtmlControls.HtmlForm form1;

        /// <summary>
        /// GridView1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.GridView GridView1;

        /// <summary>
        /// RadioButtonList1 control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.RadioButtonList RadioButtonList1;

        /// <summary>
        /// ExportData control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button ExportData;

        /// <summary>
        /// ExportDataAndFormatting control.
        /// </summary>
        /// <remarks>
        /// Auto-generated field.
        /// To modify move field declaration from designer file to code-behind file.
        /// </remarks>
        protected global::System.Web.UI.WebControls.Button ExportDataAndFormatting;
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/GridView in ASP.NET Web Forms/Properties/AssemblyInfo.cs:
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("MediumTrust")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("GemBox Ltd.")]
[assembly: AssemblyProduct("MediumTrust")]
[assembly: AssemblyCopyright("Copyright © GemBox Ltd.")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("46ddde6e-a2a6-4769-bc35-36fab66ffdd7")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Export in WPF/App.xaml.cs:
using System.Windows;

partial class App : Application
{
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Export in WPF/MainWindow.xaml.cs:
using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Xps.Packaging;
using GemBox.Spreadsheet;
using Microsoft.Win32;

partial class MainWindow : Window
{
    private ExcelFile workbook;
    private XpsDocument xpsDocument;
    private ImageSource imageSource;

    private Action updateSourceAction;

    public MainWindow()
    {
        this.InitializeComponent();

        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        this.updateSourceAction = this.SetImageSource;

        this.InitExcelFile();
        this.updateSourceAction();
    }

    private void InitExcelFile()
    {
        this.workbook = new ExcelFile();
        var worksheet = this.workbook.Worksheets.Add("Sheet1");

        worksheet.Cells[0, 0].Value = "English:";
        worksheet.Cells[0, 1].Value = "Hello";

        worksheet.Cells[1, 0].Value = "Russian:";
        worksheet.Cells[1, 1].Value = new string(new char[] { '\u0417', '\u0434', '\u0440', '\u0430', '\u0432', '\u0441', '\u0442', '\u0432', '\u0443', '\u0439', '\u0442', '\u0435' });

        worksheet.Cells[2, 0].Value = "Chinese:";
        worksheet.Cells[2, 1].Value = new string(new char[] { '\u4f60', '\u597d' });

        worksheet.Cells[4, 0].Value = "In order to see Russian and Chinese characters you need to have appropriate fonts on your PC.";
        worksheet.Cells.GetSubrangeAbsolute(4, 0, 4, 7).Merged = true;

        worksheet.HeadersFooters.DefaultPage.Header.CenterSection.Content = "Export To ImageSource / Image Control Example";

        worksheet.PrintOptions.PrintGridlines = true;
    }

    private void SetImageSource()
    {
        if (this.imageSource == null)
            this.imageSource = this.workbook.ConvertToImageSource(SaveOptions.ImageDefault);

        this.DocumentViewer.Document = null;
        this.ImageControl.Source = this.imageSource;

        this.DocumentViewer.Visibility = Visibility.Collapsed;
        this.ImageScrollViewer.Visibility = Visibility.Visible;
    }

    private void SetDocumentViewerSource()
    {
        // XpsDocument needs to stay referenced so that DocumentViewer can access additional required resources.
        // Otherwise, GC will collect/dispose XpsDocument and DocumentViewer will not work.
        if (this.xpsDocument == null)
            this.xpsDocument = this.workbook.ConvertToXpsDocument(SaveOptions.XpsDefault);

        this.ImageControl.Source = null;
        this.DocumentViewer.Document = this.xpsDocument.GetFixedDocumentSequence();

        this.ImageScrollViewer.Visibility = Visibility.Collapsed;
        this.DocumentViewer.Visibility = Visibility.Visible;
    }

    private void BtnOpenFile_Click(object sender, RoutedEventArgs e)
    {
        var openFileDialog = new OpenFileDialog
        {
            Filter = "Excel Files|*.xls;*.xlsx;*.xlsm"
        };
        if (openFileDialog.ShowDialog() != true)
            return;

        this.workbook = ExcelFile.Load(openFileDialog.FileName);
        this.xpsDocument = null;
        this.imageSource = null;
        this.updateSourceAction();
    }

    private void BtnShowAsImage_Click(object sender, RoutedEventArgs e)
    {
        this.updateSourceAction = this.SetImageSource;
        this.updateSourceAction();
    }

    private void BtnShowAsDocument_Click(object sender, RoutedEventArgs e)
    {
        this.updateSourceAction = this.SetDocumentViewerSource;
        this.updateSourceAction();
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Platforms/Export in WPF/Properties/AssemblyInfo.cs:
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("WpfExport")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("GemBox Ltd.")]
[assembly: AssemblyProduct("WpfExport")]
[assembly: AssemblyCopyright("Copyright © GemBox Ltd.")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

//In order to begin building localizable applications, set 
//<UICulture>CultureYouAreCodingWith</UICulture> in your .csproj file
//inside a <PropertyGroup>.  For example, if you are using US english
//in your source files, set the <UICulture> to en-US.  Then uncomment
//the NeutralResourceLanguage attribute below.  Update the "en-US" in
//the line below to match the UICulture setting in the project file.

//[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.Satellite)]


[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
    //(used if a resource is not found in the page, 
    // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
    //(used if a resource is not found in the page, 
    // app, or any theme specific resource dictionaries)
)]


// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Reading/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
        Example3();
    }

    static void Example1()
    {
        // Load Excel workbook from file's path.
        ExcelFile workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        // Iterate through all worksheets in a workbook.
        foreach (ExcelWorksheet worksheet in workbook.Worksheets)
        {
            // Display sheet's name.
            Console.WriteLine("{1} {0} {1}\n", worksheet.Name, new string('#', 30));

            // Iterate through all rows in a worksheet.
            foreach (ExcelRow row in worksheet.Rows)
            {
                // Iterate through all allocated cells in a row.
                foreach (ExcelCell cell in row.AllocatedCells)
                {
                    // Read cell's data.
                    string value = cell.Value?.ToString() ?? "EMPTY";

                    // For merged cells, read only the first cell's data.
                    if (cell.MergedRange != null && cell.MergedRange[0] != cell)
                        value = "MERGED";

                    // Display cell's value and type.
                    value = value.Length > 15 ? value.Remove(15) + "…" : value;
                    Console.Write($"{value} [{cell.ValueType}]".PadRight(30));
                }

                Console.WriteLine();
            }
        }
    }

    static void Example2()
    {
        ExcelFile workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        for (int sheetIndex = 0; sheetIndex < workbook.Worksheets.Count; sheetIndex++)
        {
            // Get Excel worksheet using zero-based index.
            ExcelWorksheet worksheet = workbook.Worksheets[sheetIndex];
            Console.WriteLine($"Sheet name: \"{worksheet.Name}\"");
            Console.WriteLine($"Sheet index: {worksheet.Index}\n");

            for (int rowIndex = 0; rowIndex < worksheet.Rows.Count; rowIndex++)
            {
                // Get Excel row using zero-based index.
                ExcelRow row = worksheet.Rows[rowIndex];
                Console.WriteLine($"Row name: \"{row.Name}\"");
                Console.WriteLine($"Row index: {row.Index}");

                Console.Write("Cell names:");
                for (int columnIndex = 0; columnIndex < row.AllocatedCells.Count; columnIndex++)
                {
                    // Get Excel cell using zero-based index.
                    ExcelCell cell = row.Cells[columnIndex];
                    Console.Write($" \"{cell.Name}\",");
                }
                Console.WriteLine("\n");
            }
        }
    }

    static void Example3()
    {
        ExcelFile workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        foreach (ExcelWorksheet worksheet in workbook.Worksheets)
        {
            CellRangeEnumerator enumerator = worksheet.Cells.GetReadEnumerator();
            while (enumerator.MoveNext())
            {
                ExcelCell cell = enumerator.Current;
                Console.WriteLine($"Cell \"{cell.Name}\" [{cell.Row.Index}, {cell.Column.Index}]: {cell.Value}");
            }
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Getting Started/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        ExcelFile workbook = new ExcelFile();
        ExcelWorksheet worksheet = workbook.Worksheets.Add("Sheet1");
        ExcelCell cell = worksheet.Cells["A1"];

        cell.Value = "Hello World!";

        workbook.Save("HelloWorld.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Preservation/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // Load Excel workbook, preservation feature is enabled by default.
        var workbook = ExcelFile.Load("Preservation.xlsx");
        var worksheet = workbook.Worksheets[0];

        // Modify the worksheet.
        worksheet.Cells["C6"].Value = 8500;
        worksheet.Cells["C7"].Value = 10000;

        // Save Excel worksheet to an output file of the same format together with
        // preserved information (unsupported features) from the input file.
        workbook.Save("PreservedOutput.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Printing/Print in Console/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // Load Excel workbook from file's path.
        ExcelFile workbook = ExcelFile.Load("CombinedTemplate.xlsx");

        // Set sheets print options.
        foreach (ExcelWorksheet worksheet in workbook.Worksheets)
        {
            ExcelPrintOptions sheetPrintOptions = worksheet.PrintOptions;

            sheetPrintOptions.Portrait = false;
            sheetPrintOptions.HorizontalCentered = true;
            sheetPrintOptions.VerticalCentered = true;

            sheetPrintOptions.PrintHeadings = true;
            sheetPrintOptions.PrintGridlines = true;
        }

        // Create spreadsheet's print options. 
        PrintOptions printOptions = new PrintOptions();
        printOptions.SelectionType = SelectionType.EntireFile;

        // Print Excel workbook to default printer (e.g. 'Microsoft Print to Pdf').
        string printerName = null;
        workbook.Print(printerName, printOptions);
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Printing/Print in WinForms/Form1.cs:
﻿using System;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;
using System.Windows.Forms;
using GemBox.Spreadsheet;

public partial class Form1 : Form
{
    private ExcelFile workbook;

    public Form1()
    {
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        InitializeComponent();
    }

    private void LoadFileMenuItem_Click(object sender, EventArgs e)
    {
        OpenFileDialog openFileDialog = new OpenFileDialog();
        openFileDialog.Filter =
            "XLSX files (*.xlsx, *.xltx, *.xlsm, *.xltm)|*.xlsx;*.xltx;*.xlsm;*.xltm" +
            "|XLS files (*.xls, *.xlt)|*.xls;*.xlt" +
            "|ODS files (*.ods, *.ots)|*.ods;*.ots" +
            "|CSV files (*.csv, *.tsv)|*.csv;*.tsv" +
            "|HTML files (*.html, *.htm)|*.html;*.htm";

        if (openFileDialog.ShowDialog() == DialogResult.OK)
        {
            this.workbook = ExcelFile.Load(openFileDialog.FileName);
            this.ShowPrintPreview();
        }
    }

    private void PrintFileMenuItem_Click(object sender, EventArgs e)
    {
        if (this.workbook == null)
            return;

        PrintDialog printDialog = new PrintDialog() { AllowSomePages = true };
        if (printDialog.ShowDialog() == DialogResult.OK)
        {
            PrinterSettings printerSettings = printDialog.PrinterSettings;
            PrintOptions printOptions = new PrintOptions() { SelectionType = SelectionType.EntireFile };

            // Set PrintOptions properties based on PrinterSettings properties.
            printOptions.CopyCount = printerSettings.Copies;
            printOptions.FromPage = printerSettings.FromPage == 0 ? 0 : printerSettings.FromPage - 1;
            printOptions.ToPage = printerSettings.ToPage == 0 ? int.MaxValue : printerSettings.ToPage - 1;

            this.workbook.Print(printerSettings.PrinterName, printOptions);
        }
    }

    private void ShowPrintPreview()
    {
        // Create image for each Excel workbook's page.
        Image[] images = this.CreatePrintPreviewImages();
        int imageIndex = 0;

        // Draw each page's image on PrintDocument for print preview.
        var printDocument = new PrintDocument();
        printDocument.PrintPage += (sender, e) =>
        {
            using (Image image = images[imageIndex])
            {
                var graphics = e.Graphics;
                var region = graphics.VisibleClipBounds;

                // Rotate image if it has landscape orientation.
                if (image.Width > image.Height)
                    image.RotateFlip(RotateFlipType.Rotate270FlipNone);

                graphics.DrawImage(image, 0, 0, region.Width, region.Height);
            }

            ++imageIndex;
            e.HasMorePages = imageIndex < images.Length;
        };

        this.PageUpDown.Value = 1;
        this.PageUpDown.Maximum = images.Length;
        this.PrintPreviewControl.Document = printDocument;
    }

    private Image[] CreatePrintPreviewImages()
    {
        var paginatorOptions = new PaginatorOptions { SelectionType = SelectionType.EntireFile };
        var pages = this.workbook.GetPaginator(paginatorOptions).Pages;

        var images = new Image[pages.Count];
        var imageOptions = new ImageSaveOptions();

        for (int pageIndex = 0; pageIndex < pages.Count; ++pageIndex)
        {
            var imageStream = new MemoryStream();
            pages[pageIndex].Save(imageStream, imageOptions);
            images[pageIndex] = Image.FromStream(imageStream);
        }

        return images;
    }

    private void PageUpDown_ValueChanged(object sender, EventArgs e)
    {
        this.PrintPreviewControl.StartPage = (int)this.PageUpDown.Value - 1;
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Printing/Print in WinForms/Form1.Designer.cs:
﻿partial class Form1
{
    /// <summary>
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary>
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
        if (disposing && (components != null))
        {
            components.Dispose();
        }
        base.Dispose(disposing);
    }

    #region Windows Form Designer generated code

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
            this.MenuStrip = new System.Windows.Forms.MenuStrip();
            this.LoadFileMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.PrintFileMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.PrintPreviewControl = new System.Windows.Forms.PrintPreviewControl();
            this.PageLb = new System.Windows.Forms.Label();
            this.PageUpDown = new System.Windows.Forms.NumericUpDown();
            this.MenuStrip.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.PageUpDown)).BeginInit();
            this.SuspendLayout();
            // 
            // MenuStrip
            // 
            this.MenuStrip.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.LoadFileMenuItem,
            this.PrintFileMenuItem});
            this.MenuStrip.Location = new System.Drawing.Point(0, 0);
            this.MenuStrip.Name = "MenuStrip";
            this.MenuStrip.RenderMode = System.Windows.Forms.ToolStripRenderMode.System;
            this.MenuStrip.Size = new System.Drawing.Size(784, 24);
            this.MenuStrip.TabIndex = 0;
            this.MenuStrip.Text = "MenuStrip";
            // 
            // LoadFileMenuItem
            // 
            this.LoadFileMenuItem.Name = "LoadFileMenuItem";
            this.LoadFileMenuItem.Size = new System.Drawing.Size(45, 20);
            this.LoadFileMenuItem.Text = "Load";
            this.LoadFileMenuItem.Click += new System.EventHandler(this.LoadFileMenuItem_Click);
            // 
            // PrintFileMenuItem
            // 
            this.PrintFileMenuItem.Name = "PrintFileMenuItem";
            this.PrintFileMenuItem.Size = new System.Drawing.Size(44, 20);
            this.PrintFileMenuItem.Text = "Print";
            this.PrintFileMenuItem.Click += new System.EventHandler(this.PrintFileMenuItem_Click);
            // 
            // PrintPreviewControl
            // 
            this.PrintPreviewControl.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.PrintPreviewControl.Location = new System.Drawing.Point(0, 53);
            this.PrintPreviewControl.Name = "PrintPreviewControl";
            this.PrintPreviewControl.Size = new System.Drawing.Size(784, 358);
            this.PrintPreviewControl.TabIndex = 1;
            // 
            // PageLb
            // 
            this.PageLb.AutoSize = true;
            this.PageLb.Location = new System.Drawing.Point(12, 33);
            this.PageLb.Name = "PageLb";
            this.PageLb.Size = new System.Drawing.Size(35, 13);
            this.PageLb.TabIndex = 2;
            this.PageLb.Text = "Page:";
            // 
            // PageUpDown
            // 
            this.PageUpDown.Location = new System.Drawing.Point(53, 29);
            this.PageUpDown.Minimum = new decimal(new int[] {
            1,
            0,
            0,
            0});
            this.PageUpDown.Name = "PageUpDown";
            this.PageUpDown.Size = new System.Drawing.Size(40, 20);
            this.PageUpDown.TabIndex = 3;
            this.PageUpDown.Value = new decimal(new int[] {
            1,
            0,
            0,
            0});
            this.PageUpDown.ValueChanged += new System.EventHandler(this.PageUpDown_ValueChanged);
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(784, 411);
            this.Controls.Add(this.PageUpDown);
            this.Controls.Add(this.PageLb);
            this.Controls.Add(this.PrintPreviewControl);
            this.Controls.Add(this.MenuStrip);
            this.Name = "Form1";
            this.Text = "Printing in Windows Forms application";
            this.MenuStrip.ResumeLayout(false);
            this.MenuStrip.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.PageUpDown)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

    }

    #endregion

    private System.Windows.Forms.MenuStrip MenuStrip;
    private System.Windows.Forms.ToolStripMenuItem LoadFileMenuItem;
    private System.Windows.Forms.ToolStripMenuItem PrintFileMenuItem;
    private System.Windows.Forms.PrintPreviewControl PrintPreviewControl;
    private System.Windows.Forms.Label PageLb;
    private System.Windows.Forms.NumericUpDown PageUpDown;
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Printing/Print in WinForms/Program.cs:
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace PrintInWinForms
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Printing/Print in WPF/App.xaml.cs:
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Windows;

namespace PrintInWpfCs
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Printing/Print in WPF/MainWindow.xaml.cs:
﻿using System.Windows;
using System.Windows.Controls;
using System.Windows.Xps.Packaging;
using Microsoft.Win32;
using GemBox.Spreadsheet;

public partial class MainWindow : Window
{
    private ExcelFile workbook;

    public MainWindow()
    {
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        InitializeComponent();
    }

    private void LoadFileBtn_Click(object sender, RoutedEventArgs e)
    {
        OpenFileDialog openFileDialog = new OpenFileDialog();
        openFileDialog.Filter =
            "XLSX files (*.xlsx, *.xltx, *.xlsm, *.xltm)|*.xlsx;*.xltx;*.xlsm;*.xltm" +
            "|XLS files (*.xls, *.xlt)|*.xls;*.xlt" +
            "|ODS files (*.ods, *.ots)|*.ods;*.ots" +
            "|CSV files (*.csv, *.tsv)|*.csv;*.tsv" +
            "|HTML files (*.html, *.htm)|*.html;*.htm";

        if (openFileDialog.ShowDialog() == true)
        {
            this.workbook = ExcelFile.Load(openFileDialog.FileName);
            this.ShowPrintPreview();
        }
    }

    private void PrintFileBtn_Click(object sender, RoutedEventArgs e)
    {
        if (this.workbook == null)
            return;

        PrintDialog printDialog = new PrintDialog() { UserPageRangeEnabled = true };
        if (printDialog.ShowDialog() == true)
        {
            PrintOptions printOptions = new PrintOptions(printDialog.PrintTicket.GetXmlStream())
            {
                SelectionType = SelectionType.EntireFile
            };

            printOptions.FromPage = printDialog.PageRange.PageFrom - 1;
            printOptions.ToPage = printDialog.PageRange.PageTo == 0 ? int.MaxValue : printDialog.PageRange.PageTo - 1;

            this.workbook.Print(printDialog.PrintQueue.FullName, printOptions);
        }
    }

    private void ShowPrintPreview()
    {
        XpsDocument xpsDocument = this.workbook.ConvertToXpsDocument(
            new XpsSaveOptions() { SelectionType = SelectionType.EntireFile });

        // Note, XpsDocument must stay referenced so that DocumentViewer can access additional resources from it.
        // Otherwise, GC will collect/dispose XpsDocument and DocumentViewer will no longer work.
        this.DocViewer.Tag = xpsDocument;
        this.DocViewer.Document = xpsDocument.GetFixedDocumentSequence();
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Printing/Print in WPF/AssemblyInfo.cs:
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
                                     //(used if a resource is not found in the page,
                                     // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
                                              //(used if a resource is not found in the page,
                                              // app, or any theme specific resource dictionaries)
)]

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Data Types/Program.cs:
using System;
using System.IO;
using System.Text;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Types");

        worksheet.Rows[0].Style = workbook.Styles[BuiltInCellStyleName.Heading1];
        worksheet.Columns[0].Width = 25 * 256;
        worksheet.Columns[1].Width = 25 * 256;
        worksheet.Columns[2].Width = 25 * 256;

        worksheet.Cells[0, 0].Value = "Value";
        worksheet.Cells[0, 1].Value = ".NET Value Type";
        worksheet.Cells[0, 2].Value = "Cell Value Type";

        // Sample data values.
        object[] values =
        {
            DBNull.Value,
            byte.MaxValue,
            sbyte.MinValue,
            short.MinValue,
            ushort.MaxValue,
            1000,
            (uint)2000,
            long.MinValue,
            ulong.MaxValue,
            float.MaxValue,
            double.MaxValue,
            3000.45m,
            true,
            DateTime.Now,
            'a',
            "Sample text.",
            new StringBuilder("Sample text."),
        };

        // Write data and data type to Excel cells.
        for (int i = 0; i < values.Length; i++)
        {
            object value = values[i];

            worksheet.Cells[i + 1, 0].Value = value;
            worksheet.Cells[i + 1, 1].Value = value.GetType().ToString();
        }

        // Save to Excel file and load it back as ExcelFile object.
        using (var stream = new MemoryStream())
        {
            workbook.Save(stream, SaveOptions.XlsxDefault);
            workbook = ExcelFile.Load(stream, LoadOptions.XlsxDefault);
            worksheet = workbook.Worksheets[0];
        }

        // Write cell type to Excel cells.
        for (int i = 0; i < values.Length; i++)
            worksheet.Cells[i + 1, 2].Value = worksheet.Cells[i + 1, 0].ValueType.ToString();

        workbook.Save("Data Types.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Merged Cells/Program.cs:
using System.Linq;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Sheet1");

        // Get the cell range.
        var range = worksheet.Cells.GetSubrange("B2:E5");

        // Merge cells in the current range.
        range.Merged = true;

        // Set the value of the merged range.
        range.Value = "Merged";

        // Set the style of the merged range.
        range.Style.VerticalAlignment = VerticalAlignmentStyle.Center;

        // Set the style of the merged range using a cell within.
        worksheet.Cells["C3"].Style.Borders
            .SetBorders(MultipleBorders.All, SpreadsheetColor.FromName(ColorName.Red), LineStyle.Double);

        workbook.Save("Merged Cells.xlsx");
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("Merged Cells.xlsx");
        var worksheet = workbook.Worksheets[0];

        // Get the first merged range.
        var mergedRange = worksheet.Rows
            .SelectMany(row => row.AllocatedCells)
            .Select(cell => cell.MergedRange)
            .FirstOrDefault(range => range != null);

        if (mergedRange != null)
        {
            // Important, you cannot unmerge the ExcelCell.MergedRange property.
            // In other words, the following is not allowed:  mergedRange.Merged = false;

            // Instead, you need to retrieve the same CellRange from the ExcelWorksheet and then unmerge it.
            // This kind of implementation was chosen for performance reasons.
            worksheet.Cells.GetSubrange(mergedRange.Name).Merged = false;

            worksheet.Cells[mergedRange.StartPosition].Value = "Unmerged";
        }

        workbook.Save("Unmerged Cells.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Cell Referencing/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Referencing");

        // Referencing cells from sheet using cell names and indexes.
        worksheet.Cells["A1"].Value = "Cell A1.";
        worksheet.Cells[1, 0].Value = "Cell in 2nd row and 1st column [A2].";

        // Referencing cells from row using cell names and indexes.
        worksheet.Rows["4"].Cells["B"].Value = "Cell in row 4 and column B [B4].";
        worksheet.Rows[4].Cells[1].Value = "Cell in 5th row and 2nd column [B5].";

        // Referencing cells from column using cell names and indexes.
        worksheet.Columns["C"].Cells["7"].Value = "Cell in column C and row 7 [C7].";
        worksheet.Columns[2].Cells[7].Value = "Cell in 3rd column and 8th row [C8].";

        // Referencing cell range using A1 notation [G2:N12].
        var range = worksheet.Cells.GetSubrange("G2:N12");
        range[0].Value = $"From {range.StartPosition} to {range.EndPosition}";
        range[1, 0].Value = $"From ({range.FirstRowIndex},{range.FirstColumnIndex}) to ({range.LastRowIndex},{range.LastColumnIndex})";
        range.Style.Borders.SetBorders(MultipleBorders.Outside,
            SpreadsheetColor.FromName(ColorName.Red),
            LineStyle.Thick);

        // Referencing cell range using absolute position [I5:M11].
        range = range.GetSubrangeAbsolute(4, 8, 10, 12);
        range[0].Value = $"From {range.StartPosition} to {range.EndPosition}";
        range[1, 0].Value = $"From ({range.FirstRowIndex},{range.FirstColumnIndex}) to ({range.LastRowIndex},{range.LastColumnIndex})";
        range.Style.Borders.SetBorders(MultipleBorders.Outside,
            SpreadsheetColor.FromName(ColorName.Green),
            LineStyle.Medium);

        // Referencing cell range using relative position [K8:L10].
        range = range.GetSubrangeRelative(3, 2, 2, 2);
        range[0].Value = $"From {range.StartPosition} to {range.EndPosition}";
        range[1, 0].Value = $"From ({range.FirstRowIndex},{range.FirstColumnIndex}) to ({range.LastRowIndex},{range.LastColumnIndex})";
        range.Style.Borders.SetBorders(MultipleBorders.Outside,
            SpreadsheetColor.FromName(ColorName.Blue),
            LineStyle.Thin);

        workbook.Save("Cell Referencing.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Templates/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        int numberOfItems = 10;
        var startDate = DateTime.Today.AddDays(-numberOfItems);
        var endDate = DateTime.Today;

        // Load an Excel template.
        var workbook = ExcelFile.Load("Template.xlsx");

        // Get template sheet.
        var worksheet = workbook.Worksheets[0];

        // Find cells with placeholder text and set their values.
        int row, column;
        if (worksheet.Cells.FindText("[Company Name]", out row, out column))
            worksheet.Cells[row, column].Value = "ACME Corp";
        if (worksheet.Cells.FindText("[Company Address]", out row, out column))
            worksheet.Cells[row, column].Value = "240 Old Country Road, Springfield, IL";
        if (worksheet.Cells.FindText("[Start Date]", out row, out column))
            worksheet.Cells[row, column].Value = startDate;
        if (worksheet.Cells.FindText("[End Date]", out row, out column))
            worksheet.Cells[row, column].Value = endDate;

        // Copy template row.
        row = 17;
        worksheet.Rows.InsertCopy(row + 1, numberOfItems - 1, worksheet.Rows[row]);

        // Fill copied rows with sample data.
        var random = new Random();
        for (int i = 0; i < numberOfItems; i++)
        {
            var currentRow = worksheet.Rows[row + i];
            currentRow.Cells[1].SetValue(startDate.AddDays(i));
            currentRow.Cells[2].SetValue(random.Next(1, 12));
        }

        // Calculate formulas in a sheet.
        worksheet.Calculate();

        // Save the modified Excel template to output file.
        workbook.Save("Output.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Performance/Program.cs:
using System.Collections.Generic;
using System.IO;
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Engines;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Running;
using GemBox.Spreadsheet;

[SimpleJob(RuntimeMoniker.Net70)]
[SimpleJob(RuntimeMoniker.Net48)]
public class Program
{
    private ExcelFile workbook;
    private readonly Consumer consumer = new Consumer();

    public static void Main()
    {
        BenchmarkRunner.Run<Program>();
    }

    [GlobalSetup]
    public void SetLicense()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // If using Free version and example exceeds its limitations, use Trial or Time Limited version:
        // https://www.gemboxsoftware.com/spreadsheet/examples/free-trial-professional-modes/1001

        this.workbook = ExcelFile.Load("RandomSheets.xlsx");
    }

    [Benchmark]
    public ExcelFile Reading()
    {
        return ExcelFile.Load("RandomSheets.xlsx");
    }

    [Benchmark]
    public void Writing()
    {
        using (var stream = new MemoryStream())
            this.workbook.Save(stream, new XlsxSaveOptions());
    }

    [Benchmark]
    public void Iterating()
    {
        this.LoopThroughAllCells().Consume(this.consumer);
    }

    public IEnumerable<object> LoopThroughAllCells()
    {
        foreach (var worksheet in this.workbook.Worksheets)
            foreach (var row in worksheet.Rows)
                foreach (var cell in row.AllocatedCells)
                    yield return cell.Value;
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Formulas/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Formulas");

        worksheet.Rows[0].Style = workbook.Styles[BuiltInCellStyleName.Heading1];
        worksheet.Columns[0].Width = 9 * 256;
        worksheet.Columns[1].Width = 36 * 256;
        worksheet.Columns[2].Width = 18 * 256;

        worksheet.Cells[0, 0].Value = "Data";
        worksheet.Cells[0, 1].Value = "Formula";
        worksheet.Cells[0, 2].Value = "Result";

        // Add sample data values.
        worksheet.Cells["A2"].Value = 3;
        worksheet.Cells["A3"].Value = 4.1;
        worksheet.Cells["A4"].Value = 5.2;
        worksheet.Cells["A5"].Value = 6;
        worksheet.Cells["A6"].Value = 7;

        // Add named range.
        worksheet.NamedRanges.Add("MyRange1", worksheet.Cells.GetSubrange("A2:A6"));

        // Sample formulas.
        string[] formulas =
        {
            "=NOW()+123",
            "=MINUTE(0.5)-1343/35",
            "=HOUR(56)-23/35",
            "=YEAR(DATE(2020,1,1)) + 12",
            "=MONTH(3)-2342/235345",
            "=RAND()",
            "=TEXT(\"text\", \"$d\")",
            "=VAR(1,2)",
            "=MOD(1,2)",
            "=NOT(FALSE)",
            "=AND(TRUE)",
            "=TRUE()",
            "=VALUE(3)",
            "=LEN(\"hello\")",
            "=MID(\"hello\",1,1)",
            "=ROUND(1,2)",
            "=SIGN(-2)",
            "=INT(3)",
            "=ABS(-3)",
            "=LN(2)",
            "=EXP(4)",
            "=SQRT(2)",
            "=PI()",
            "=COS(4)",
            "=MAX(1,2)",
            "=MIN(1,2)",
            "=AVERAGE(1,2)",
            "=SUM(1,3)",
            "=IF(1,2,3)",
            "=COUNT(1,2,3)",
            "=SUBTOTAL(1,A2:A4)",                           // Function with cells range.
            "=SUM(MyRange1)",                               // Function with named range.
            "=COUNT(1,  ,  ,,,2, 23,,,,,, 34,,,54,,,,  ,)", // Function with miss argument.
            "=cOs( 1 )",                                    // Functions with different letters case.
            "=+++5",                                        // Unary operators.
            "=(1)-(2)+(3/2+34)/2+12232-32-4",               // Binary operators.
            "=TRUE",                                        // Operand tokens, bool.
            "=20",                                          // Operand tokens, int.
            "=2235.5132",                                   // Operand tokens, num.
            "=\"hello world!\"",                            // Operand tokens, str.
            "=#NULL!"                                       // Operand tokens, error.
        };

        // Write formulas to Excel cells.
        for (int i = 0; i < formulas.Length; i++)
        {
            string formula = formulas[i];
            worksheet.Cells[i + 1, 1].Value = formula;
            worksheet.Cells[i + 1, 2].Formula = formula;
        }

        workbook.Save("Formulas.xlsx");
    }

    static void Example2()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Formulas");

        worksheet.Cells["A1"].Value = 4;
        worksheet.Cells["A2"].Value = 9;
        worksheet.Cells["A3"].Value = 16;
        worksheet.Cells["A4"].Value = 25;
        worksheet.Cells["A5"].Value = 36;
            
        // Set dynamic array formula
        worksheet.Cells["B1"].SetDynamicArrayFormula("=SQRT(A1:A5)");
            
        // Set legacy array formula to C1:C5 range
        worksheet.Cells.GetSubrange("C1:C5").SetArrayFormula("=SQRT(A1:A5)");
            
        // Set dynamic array formula with a single result
        worksheet.Cells["D1"].SetDynamicArrayFormula("=SUM(SQRT(A1:A5))");
            
        // Set normal formula which will use intersection operator
        worksheet.Cells["E1"].Formula = "=SUM(SQRT(A1:A5))";
            
        worksheet.Calculate();
            
        workbook.Save("ArrayFormulas.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Introduction/Writing/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        // Create new empty workbook.
        var workbook = new ExcelFile();

        // Add new sheet.
        var worksheet = workbook.Worksheets.Add("Skyscrapers");

        // Write title to Excel cell.
        worksheet.Cells["A1"].Value = "List of tallest buildings (2021):";

        // Tabular sample data for writing into an Excel file.
        var skyscrapers = new object[,]
        {
             { "Rank", "Building", "City", "Country", "Metric", "Imperial", "Floors", "Built (Year)" },
             { 1, "Burj Khalifa", "Dubai", "United Arab Emirates", 828, 2717, 163, 2010 },
             { 2, "Shanghai Tower", "Shanghai", "China", 632, 2073, 128, 2015 },
             { 3, "Abraj Al-Bait Clock Tower", "Mecca", "Saudi Arabia", 601, 1971, 120, 2012 },
             { 4, "Ping An Finance Centre", "Shenzhen", "China", 599, 1965, 115, 2017 },
             { 5, "Lotte World Tower", "Seoul", "South Korea", 554.5, 1819, 123, 2016 },
             { 6, "One World Trade Center", "New York City", "United States", 541.3, 1776, 104, 2014 },
             { 7, "Guangzhou CTF Finance Centre", "Guangzhou", "China", 530, 1739, 111, 2016 },
             { 7, "Tianjin CTF Finance Centre", "Tianjin", "China", 530, 1739, 98, 2019 },
             { 9, "China Zun", "Beijing", "China", 528, 1732, 108, 2018 },
             { 10, "Taipei 101", "Taipei", "Taiwan", 508, 1667, 101, 2004 },
             { 11, "Shanghai World Financial Center", "Shanghai", "China", 492, 1614, 101, 2008 },
             { 12, "International Commerce Centre", "Hong Kong", "China", 484, 1588, 118, 2010 },
             { 13, "Central Park Tower", "New York City", "United States", 472, 1550, 98, 2020 },
             { 14, "Lakhta Center", "St. Petersburg", "Russia", 462, 1516, 86, 2019 },
             { 15, "Landmark 81", "Ho Chi Minh City", "Vietnam", 461.2, 1513, 81, 2018 },
             { 16, "Changsha IFS Tower T1", "Changsha", "China", 452.1, 1483, 88, 2018 },
             { 17, "Petronas Tower 1", "Kuala Lumpur", "Malaysia", 451.9, 1483, 88, 1998 },
             { 17, "Petronas Tower 2", "Kuala Lumpur", "Malaysia", 451.9, 1483, 88, 1998 },
             { 19, "Zifeng Tower", "Nanjing", "China", 450, 1476, 89, 2010 },
             { 19, "Suzhou IFS", "Suzhou", "China", 450, 1476, 98, 2019 }
        };

        // Set row formatting.
        worksheet.Rows["1"].Style = workbook.Styles[BuiltInCellStyleName.Heading1];

        // Set columns width.
        worksheet.Columns["A"].SetWidth(8, LengthUnit.CharacterWidth);  // Rank
        worksheet.Columns["B"].SetWidth(30, LengthUnit.CharacterWidth); // Building
        worksheet.Columns["C"].SetWidth(16, LengthUnit.CharacterWidth); // City
        worksheet.Columns["D"].SetWidth(20, LengthUnit.CharacterWidth); // Country
        worksheet.Columns["E"].SetWidth(9, LengthUnit.CharacterWidth);  // Metric
        worksheet.Columns["F"].SetWidth(11, LengthUnit.CharacterWidth); // Imperial
        worksheet.Columns["G"].SetWidth(9, LengthUnit.CharacterWidth);  // Floors
        worksheet.Columns["H"].SetWidth(9, LengthUnit.CharacterWidth);  // Built (Year)
        worksheet.Columns["I"].SetWidth(4, LengthUnit.CharacterWidth);  // Top 10
        worksheet.Columns["J"].SetWidth(5, LengthUnit.CharacterWidth);  // Top 20

        // Write header data to Excel cells.
        for (int col = 0; col < skyscrapers.GetLength(1); col++)
            worksheet.Cells[3, col].Value = skyscrapers[0, col];
        worksheet.Cells["E3"].Value = "Height";

        worksheet.Cells.GetSubrange("A3:A4").Merged = true;  // Rank
        worksheet.Cells.GetSubrange("B3:B4").Merged = true;  // Building
        worksheet.Cells.GetSubrange("C3:C4").Merged = true;  // City
        worksheet.Cells.GetSubrange("D3:D4").Merged = true;  // Country
        worksheet.Cells.GetSubrange("E3:F3").Merged = true;  // Height
        worksheet.Cells.GetSubrange("G3:G4").Merged = true;  // Floors
        worksheet.Cells.GetSubrange("H3:H4").Merged = true;  // Built (Year)

        // Set header cells formatting.
        var style = new CellStyle();
        style.HorizontalAlignment = HorizontalAlignmentStyle.Center;
        style.VerticalAlignment = VerticalAlignmentStyle.Center;
        style.FillPattern.SetSolid(SpreadsheetColor.FromArgb(237, 125, 49));
        style.Font.Weight = ExcelFont.BoldWeight;
        style.Font.Color = SpreadsheetColor.FromName(ColorName.White);
        style.WrapText = true;
        style.Borders.SetBorders(MultipleBorders.Right | MultipleBorders.Top, SpreadsheetColor.FromName(ColorName.Black), LineStyle.Thin);
        worksheet.Cells.GetSubrange("A3:H4").Style = style;

        // Write "Top 10" cells.
        style = new CellStyle();
        style.HorizontalAlignment = HorizontalAlignmentStyle.Center;
        style.VerticalAlignment = VerticalAlignmentStyle.Center;
        style.Font.Weight = ExcelFont.BoldWeight;
        var mergedRange = worksheet.Cells.GetSubrange("I5:I14");
        mergedRange.Merged = true;
        mergedRange.Value = "T o p   1 0";
        style.Rotation = -90;
        style.FillPattern.SetSolid(SpreadsheetColor.FromArgb(198, 239, 206));
        mergedRange.Style = style;

        // Write "Top 20" cells.
        mergedRange = worksheet.Cells.GetSubrange("J5:J24");
        mergedRange.Merged = true;
        mergedRange.Value = "T o p   2 0";
        style.IsTextVertical = true;
        style.FillPattern.SetSolid(SpreadsheetColor.FromArgb(255, 235, 156));
        mergedRange.Style = style;
        mergedRange = worksheet.Cells.GetSubrange("I15:I24");
        mergedRange.Merged = true;
        mergedRange.Style = style;

        // Write sample data and formatting to Excel cells.
        for (int row = 0; row < skyscrapers.GetLength(0) - 1; row++)
        {
            for (int col = 0; col < skyscrapers.GetLength(1); col++)
            {
                var cell = worksheet.Cells[row + 4, col];
                cell.Value = skyscrapers[row + 1, col];

                cell.Style.Borders[IndividualBorder.Right].LineStyle = LineStyle.Thin;

                if (row % 2 == 0)
                    cell.Style.FillPattern.SetSolid(SpreadsheetColor.FromArgb(221, 235, 247));

                if (col == 0)
                    cell.Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;
                if (col > 3)
                    cell.Style.Font.Name = "Courier New";
                if (col == 4)
                    cell.Style.NumberFormat = "#\" m\"";
                if (col == 5)
                    cell.Style.NumberFormat = "#\" ft\"";
            }
        }

        worksheet.Cells.GetSubrange("A5", "J24").Style.Borders.SetBorders(
            MultipleBorders.Outside, SpreadsheetColor.FromName(ColorName.Black), LineStyle.Medium);
        worksheet.Cells.GetSubrange("A3", "H4").Style.Borders.SetBorders(
            MultipleBorders.Vertical | MultipleBorders.Top, SpreadsheetColor.FromName(ColorName.Black), LineStyle.Medium);
        worksheet.Cells.GetSubrange("A5", "I14").Style.Borders.SetBorders(
            MultipleBorders.Bottom | MultipleBorders.Right, SpreadsheetColor.FromName(ColorName.Black), LineStyle.Medium);

        worksheet.PrintOptions.FitWorksheetWidthToPages = 1;

        // Save workbook as an Excel file.
        workbook.Save("Writing1.xlsx");
    }

    static void Example2()
    {
        // Create new empty workbook.
        var workbook = new ExcelFile();

        // Add new sheet.
        var worksheet = workbook.Worksheets.Add("Sheet1");

        worksheet.Columns["B"].SetWidth(400, LengthUnit.Pixel);

        // Add plain text to cell.
        worksheet.Cells["B2"].Value = "This is a plain text.";

        // Add rich formatted text to cell.
        worksheet.Cells["B4"].Value = "This is a rich formatted text.";
        worksheet.Cells["B4"].Style.Font.Color = SpreadsheetColor.FromArgb(255, 128, 64);
        worksheet.Cells["B4"].GetCharacters(10, 19).Font.Name = "Arial Black";
        worksheet.Cells["B4"].GetCharacters(15, 9).Font.Size = 14 * 20;
        worksheet.Cells["B4"].GetCharacters(25, 5).Font.Size = 18 * 20;

        // Add HTML formatted text to cell.
        string html = @"<td style='
            font-family: Arial Narrow;
            color: royalblue;
            border: solid black;
            background: #FFF2CC'>This is another rich formatted text.</p>";
        worksheet.Cells["B6"].SetValue(html, LoadOptions.HtmlDefault);

        // Save workbook as an Excel file.
        workbook.Save("Writing2.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WindowsForms/Form1.cs:
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using GemBox.Spreadsheet;

public partial class MainForm : Form
{
    public MainForm()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        // Use Trial Mode
        SpreadsheetInfo.FreeLimitReached += (eventSender, args) => args.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;
        InitializeComponent();
    }

    private async void loadButton_Click(object sender, EventArgs e)
    {
        // Capture the current context on UI thread
        var context = SynchronizationContext.Current;

        // Create load options
        var loadOptions = new XlsxLoadOptions();
        loadOptions.ProgressChanged += (eventSender, args) =>
        {
            var percentage = args.ProgressPercentage;
            // Invoke on UI thread
            context.Post(progressPercentage =>
            {
                // Update UI
                this.progressBar.Value = (int)progressPercentage;
                this.percentageLabel.Text = progressPercentage.ToString() + "%";
            }, percentage);
        };

        this.percentageLabel.Text = "0%";
        // Use tasks to run the load operation in a new thread.
        var file = await Task.Run(() => ExcelFile.Load("LargeFile.xlsx", loadOptions));
    }
}


--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WindowsForms/Form1.Designer.cs:
﻿partial class MainForm
{
    /// <summary>
    /// Required designer variable.
    /// </summary>
    private System.ComponentModel.IContainer components = null;

    /// <summary>
    /// Clean up any resources being used.
    /// </summary>
    /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    protected override void Dispose(bool disposing)
    {
        if (disposing && (components != null))
        {
            components.Dispose();
        }
        base.Dispose(disposing);
    }

    #region Windows Form Designer generated code

    /// <summary>
    /// Required method for Designer support - do not modify
    /// the contents of this method with the code editor.
    /// </summary>
    private void InitializeComponent()
    {
            this.progressBar = new System.Windows.Forms.ProgressBar();
            this.loadButton = new System.Windows.Forms.Button();
            this.percentageLabel = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // 
            // progressBar
            // 
            this.progressBar.Location = new System.Drawing.Point(49, 105);
            this.progressBar.Name = "progressBar";
            this.progressBar.Size = new System.Drawing.Size(279, 30);
            this.progressBar.TabIndex = 0;
            // 
            // loadButton
            // 
            this.loadButton.Location = new System.Drawing.Point(49, 31);
            this.loadButton.Name = "loadButton";
            this.loadButton.Size = new System.Drawing.Size(321, 47);
            this.loadButton.TabIndex = 1;
            this.loadButton.Text = "Load";
            this.loadButton.UseVisualStyleBackColor = true;
            this.loadButton.Click += new System.EventHandler(this.loadButton_Click);
            // 
            // percentageLabel
            // 
            this.percentageLabel.AutoSize = true;
            this.percentageLabel.Location = new System.Drawing.Point(341, 110);
            this.percentageLabel.Name = "percentageLabel";
            this.percentageLabel.Size = new System.Drawing.Size(21, 20);
            this.percentageLabel.TabIndex = 2;
            // 
            // MainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(9F, 20F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(417, 164);
            this.Controls.Add(this.percentageLabel);
            this.Controls.Add(this.loadButton);
            this.Controls.Add(this.progressBar);
            this.Name = "MainForm";
            this.Text = "Progress reporting in Windows Forms";
            this.ResumeLayout(false);
            this.PerformLayout();

    }

    #endregion

    private System.Windows.Forms.ProgressBar progressBar;
    private System.Windows.Forms.Button loadButton;
    private System.Windows.Forms.Label percentageLabel;
}


--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WindowsForms/Program.cs:
﻿using System;
using System.Windows.Forms;

static class Program
{
    /// <summary>
    /// The main entry point for the application.
    /// </summary>
    [STAThread]
    static void Main()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);
        Application.Run(new MainForm());
    }
}


--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WindowsForms/Properties/AssemblyInfo.cs:
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("ProgressReportingInWindowsForms")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("GemBox Ltd.")]
[assembly: AssemblyProduct("ProgressReportingInWindowsForms")]
[assembly: AssemblyCopyright("Copyright © GemBox Ltd.")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("fe6e9a0a-da26-4ba5-b64d-325a96aa55e1")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WindowsForms/Properties/Settings.Designer.cs:
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProgressReportingInWindowsForms.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WindowsForms/Properties/Resources.Designer.cs:
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProgressReportingInWindowsForms.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ProgressReportingInWindowsForms.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in Console/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        // Use Trial Mode
        SpreadsheetInfo.FreeLimitReached += (eventSender, args) => args.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;

        Console.WriteLine("Creating file");

        // Create large workbook
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("sheet");
        for (int i = 0; i < 1000000; i++)
            worksheet.Cells[i, 0].Value = i;

        // Create save options
        var saveOptions = new XlsxSaveOptions();
        saveOptions.ProgressChanged += (eventSender, args) =>
        {
            Console.WriteLine($"Progress changed - {args.ProgressPercentage}%");
        };

        // Save file
        workbook.Save("file.xlsx", saveOptions);
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WPF/App.xaml.cs:
﻿using System.Windows;

public partial class App : Application
{
}


--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WPF/MainWindow.xaml.cs:
using System.Windows;
using System.Threading;
using System.Threading.Tasks;
using GemBox.Spreadsheet;

public partial class MainWindow : Window
{
    public MainWindow()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        // Use Trial Mode
        SpreadsheetInfo.FreeLimitReached += (eventSender, args) => args.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;
        InitializeComponent();
    }

    private async void loadButton_Click(object sender, RoutedEventArgs e)
    {
        // Capture the current context on UI thread
        var context = SynchronizationContext.Current;

        // Create load options
        var loadOptions = new XlsxLoadOptions();
        loadOptions.ProgressChanged += (eventSender, args) =>
        {
            var percentage = args.ProgressPercentage;
            // Invoke on UI thread
            context.Post(progressPercentage =>
            {
                // Update UI
                this.progressBar.Value = (int)progressPercentage;
                this.percentageLabel.Content = progressPercentage.ToString() + "%";
            }, percentage);
        };

        this.percentageLabel.Content = "0%";
        // Use tasks to run the load operation in a new thread.
        var file = await Task.Run(() => ExcelFile.Load("LargeFile.xlsx", loadOptions));
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WPF/Properties/AssemblyInfo.cs:
﻿using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("ProgressReportingInWpf")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("GemBox Ltd.")]
[assembly: AssemblyProduct("ProgressReportingInWpf")]
[assembly: AssemblyCopyright("Copyright © GemBox Ltd.")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

//In order to begin building localizable applications, set
//<UICulture>CultureYouAreCodingWith</UICulture> in your .csproj file
//inside a <PropertyGroup>.  For example, if you are using US english
//in your source files, set the <UICulture> to en-US.  Then uncomment
//the NeutralResourceLanguage attribute below.  Update the "en-US" in
//the line below to match the UICulture setting in the project file.

//[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.Satellite)]


[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
                                     //(used if a resource is not found in the page,
                                     // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
                                              //(used if a resource is not found in the page,
                                              // app, or any theme specific resource dictionaries)
)]


// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WPF/Properties/Settings.Designer.cs:
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProgressReportingInWpf.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Progress Reporting in WPF/Properties/Resources.Designer.cs:
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProgressReportingInWpf.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ProgressReportingInWpf.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Cancellation in Console/Program.cs:
using System;
using System.Diagnostics;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        // Use Trial Mode
        SpreadsheetInfo.FreeLimitReached += (eventSender, args) => args.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;

        // Create workbook
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("sheet");
        for (int i = 0; i < 1000000; i++)
            worksheet.Cells[i, 0].Value = i;

        var stopwatch = new Stopwatch();
        stopwatch.Start();

        // Create save options
        var saveOptions = new XlsxSaveOptions();
        saveOptions.ProgressChanged += (sender, args) =>
        {
            // Cancel operation after five seconds
            if (stopwatch.Elapsed.Seconds >= 5)
                args.CancelOperation();
        };

        try
        {
            workbook.Save("Cancellation.xlsx", saveOptions);
            Console.WriteLine("Operation fully finished");
        } 
        catch(OperationCanceledException)
        {
            Console.WriteLine("Operation was cancelled");
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Cancellation in WPF/App.xaml.cs:
﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;


public partial class App : Application
{
}


--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Cancellation in WPF/MainWindow.xaml.cs:
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using GemBox.Spreadsheet;

public partial class MainWindow : Window
{
    private volatile bool cancellationRequested;

    public MainWindow()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        // Use Trial Mode
        SpreadsheetInfo.FreeLimitReached += (eventSender, args) => args.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;
        InitializeComponent();
    }

    private async void loadButton_Click(object sender, RoutedEventArgs e)
    {
        // Capture the current context on UI thread
        var context = SynchronizationContext.Current;

        var loadOptions = new XlsxLoadOptions();
        loadOptions.ProgressChanged += (eventSender, args) =>
        {
            // Show progress
            context.Post(progressPercentage => this.progressBar.Value = (int)progressPercentage, args.ProgressPercentage);

            // Cancel if requested
            if (this.cancellationRequested)
                args.CancelOperation();
        };

        try
        {
            var file = await Task.Run(() => ExcelFile.Load("LargeFile.xlsx", loadOptions));
        }
        catch (OperationCanceledException)
        {
            // Operation cancelled
        }
    }

    private void cancelButton_Click(object sender, RoutedEventArgs e)
    {
        this.cancellationRequested = true;
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Cancellation in WPF/Properties/AssemblyInfo.cs:
﻿using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("CancellationInWpf")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("GemBox Ltd.")]
[assembly: AssemblyProduct("CancellationInWpf")]
[assembly: AssemblyCopyright("Copyright © GemBox Ltd.")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

//In order to begin building localizable applications, set
//<UICulture>CultureYouAreCodingWith</UICulture> in your .csproj file
//inside a <PropertyGroup>.  For example, if you are using US english
//in your source files, set the <UICulture> to en-US.  Then uncomment
//the NeutralResourceLanguage attribute below.  Update the "en-US" in
//the line below to match the UICulture setting in the project file.

//[assembly: NeutralResourcesLanguage("en-US", UltimateResourceFallbackLocation.Satellite)]


[assembly: ThemeInfo(
    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located
                                     //(used if a resource is not found in the page,
                                     // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located
                                              //(used if a resource is not found in the page,
                                              // app, or any theme specific resource dictionaries)
)]


// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Cancellation in WPF/Properties/Settings.Designer.cs:
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CancellationInWpf.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.3.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Progress Reporting and Cancellation/Cancellation in WPF/Properties/Resources.Designer.cs:
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CancellationInWpf.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CancellationInWpf.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Row and Column AutoFit/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        var worksheet = workbook.Worksheets.ActiveWorksheet;

        int columnCount = worksheet.CalculateMaxUsedColumns();
        for (int i = 0; i < columnCount; i++)
            worksheet.Columns[i].AutoFit(1, worksheet.Rows[1], worksheet.Rows[worksheet.Rows.Count - 1]);

        workbook.Save("Row_Column AutoFit.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Print Titles and Area/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();

        // Always print 1st row.
        var worksheet1 = workbook.Worksheets.Add("Sheet1");
        worksheet1.NamedRanges.SetPrintTitles(worksheet1.Rows[0], 1);

        // Set print area (from A1 to I120):
        worksheet1.NamedRanges.SetPrintArea(worksheet1.Cells.GetSubrange("A1", "I120"));

        // Always print columns from A to F.
        var worksheet2 = workbook.Worksheets.Add("Sheet2");
        worksheet2.NamedRanges.SetPrintTitles(worksheet2.Columns[0], 6);

        // Always print columns from A to F and first row.
        var worksheet3 = workbook.Worksheets.Add("Sheet3");
        worksheet3.NamedRanges.SetPrintTitles(worksheet3.Rows[0], 1, worksheet3.Columns[0], 6);

        // Fill Sheet1 with some data.
        for (int i = 0; i < 9; i++)
            worksheet1.Cells[0, i].Value = "Column " + ExcelColumnCollection.ColumnIndexToName(i);

        for (int i = 1; i < 120; i++)
            for (int j = 0; j < 9; j++)
                worksheet1.Cells[i, j].SetValue(i + j);

        workbook.Save("Print Titles and Area.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Unit Conversion/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("Template.xlsx");
        var worksheet = workbook.Worksheets[0];
        var cell = worksheet.Cells["A1"];

        double widthInPoints = cell.Column.GetWidth(LengthUnit.Point);
        double heightInPoints = cell.Row.GetHeight(LengthUnit.Point);

        Console.WriteLine("A1 cell's size in different units:");

        foreach (LengthUnit unit in Enum.GetValues(typeof(LengthUnit)))
        {
            // The CharacterWidth should not be used with LengthUnitConverter, see:
            // https://www.gemboxsoftware.com/spreadsheet/docs/GemBox.Spreadsheet.LengthUnit.html
            if (unit == LengthUnit.CharacterWidth)
                continue;

            double convertedWidth = LengthUnitConverter.Convert(widthInPoints, LengthUnit.Point, unit);
            double convertedHeight = LengthUnitConverter.Convert(heightInPoints, LengthUnit.Point, unit);
            Console.WriteLine($"{convertedWidth:0.###} x {convertedHeight:0.###} {unit}");
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Find and Replace/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");
        var worksheet = workbook.Worksheets.ActiveWorksheet;

        var searchText = "Apollo";
        foreach (var cell in worksheet.Cells.FindAllText(searchText))
            Console.WriteLine($"Text was found in cell '{cell.Name}' (\"{cell.StringValue}\").");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Private Fonts/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Private Fonts");

        // Current directory contains a font file.
        FontSettings.FontsBaseDirectory = ".";

        worksheet.Parent.Styles.Normal.Font.Name = "Almonte Snow";
        worksheet.Parent.Styles.Normal.Font.Size = 48 * 20;

        worksheet.Cells[0, 0].Value = "Hello World!";

        workbook.Save("Private Fonts.pdf");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Filtering/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // If using the Professional version, remove this FreeLimitReached event handler.
        SpreadsheetInfo.FreeLimitReached += (sender, e) => e.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;

        var workbook = ExcelFile.Load("SampleData.xlsx");
        var worksheet = workbook.Worksheets["Data"];
        int rowCount = worksheet.Rows.Count;

        // Specify range which will be filtered.
        var filterRange = worksheet.Cells.GetSubrangeAbsolute(0, 0, rowCount, 4);

        // Show only rows which satisfy following conditions:
        // - 'Departments' value is either "Legal" or "Marketing" or "Finance" and
        // - 'Names' value contains letter 'e' and
        // - 'Salaries' value is in the top 20 percent of all 'Salaries' values and
        // - 'Deadlines' value is today's date.
        // Shown rows are then sorted by 'Salaries' values in the descending order.
        filterRange.Filter()
            .ByValues(0, "Legal", "Marketing", "Finance")
            .ByCustom(1, FilterOperator.Equal, "*e*")
            .ByTop10(3, true, true, 20)
            .ByDynamic(4, DynamicFilterType.Today)
            .SortBy(3, true)
            .Apply();

        workbook.Save("Filtering.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Right to Left Text/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("RightToLeft.xlsx");
        var worksheet = workbook.Worksheets[0];

        // Show columns from the right side of the page.
        worksheet.ViewOptions.ShowColumnsFromRightToLeft = true;

        worksheet.Cells["A8"].Value = "200 جديدة";
        // Set the reading order of the cell as right-to-left.
        worksheet.Cells["A8"].Style.TextDirection = TextDirection.RightToLeft;

        workbook.Save("RightToLeft.pdf");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Grouping and Outlining/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Grouping");

        worksheet.Cells[0].Value = "Cell grouping examples:";

        // Vertical grouping.
        worksheet.Cells[2, 0].Value = "GroupA Start";
        worksheet.Rows[2].OutlineLevel = 1;
        worksheet.Cells[3, 0].Value = "A";
        worksheet.Rows[3].OutlineLevel = 1;
        worksheet.Cells[4, 1].Value = "GroupB Start";
        worksheet.Rows[4].OutlineLevel = 2;
        worksheet.Cells[5, 1].Value = "B";
        worksheet.Rows[5].OutlineLevel = 2;
        worksheet.Cells[6, 1].Value = "GroupB End";
        worksheet.Rows[6].OutlineLevel = 2;
        worksheet.Cells[7, 0].Value = "GroupA End";
        worksheet.Rows[7].OutlineLevel = 1;
        // Put outline row buttons above groups.
        worksheet.ViewOptions.OutlineRowButtonsBelow = false;

        // Horizontal grouping (collapsed).
        worksheet.Cells["E2"].Value = "Gr.C Start";
        worksheet.Columns["E"].OutlineLevel = 1;
        worksheet.Columns["E"].Hidden = true;
        worksheet.Cells["F2"].Value = "C";
        worksheet.Columns["F"].OutlineLevel = 1;
        worksheet.Columns["F"].Hidden = true;
        worksheet.Cells["G2"].Value = "Gr.C End";
        worksheet.Columns["G"].OutlineLevel = 1;
        worksheet.Columns["G"].Hidden = true;
        worksheet.Columns["H"].Collapsed = true;

        workbook.Save("Grouping.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Print and View Options/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Print and View Options");

        worksheet.Cells["M1"].Value = "This worksheet shows how to set various print related and view related options.";
        worksheet.Cells["M2"].Value = "To see results of print options, go to Print and Page Setup dialogs in MS Excel.";
        worksheet.Cells["M3"].Value = "Notice that print and view options are worksheet based, not workbook based.";

        // Print options:
        var printOptions = worksheet.PrintOptions;
        printOptions.PrintGridlines = true;
        printOptions.PrintHeadings = true;
        printOptions.Portrait = false;
        printOptions.PaperType = PaperType.A3;
        printOptions.NumberOfCopies = 5;

        // View options:
        worksheet.ViewOptions.FirstVisibleColumn = 3;
        worksheet.ViewOptions.ShowColumnsFromRightToLeft = true;
        worksheet.ViewOptions.Zoom = 123;

        // Set print area.
        worksheet.NamedRanges.SetPrintArea(worksheet.Cells.GetSubrange("E1", "U7"));

        workbook.Save("Print and View Options.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Sorting/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Sorting");

        var random = new Random();

        worksheet.Cells[0, 0].Value = "Sorted numbers";
        for (int i = 1; i < 10; i++)
            worksheet.Cells[i, 0].SetValue(random.Next(1, 100));

        worksheet.Cells.GetSubrangeAbsolute(1, 0, 10, 0).Sort(false).By(0).Apply();

        worksheet.Cells[0, 2].Value = "Sorted strings";
        worksheet.Cells[1, 2].Value = "John";
        worksheet.Cells[2, 2].Value = "Jennifer";
        worksheet.Cells[3, 2].Value = "Toby";
        worksheet.Cells[4, 2].Value = "Chloe";

        worksheet.Cells.GetSubrangeAbsolute(1, 2, 4, 2).Sort(false).By(0).Apply();

        worksheet.Cells[0, 4].Value = "Sorted by column E and after that by column F";
        for (int i = 1; i < 10; i++)
        {
            worksheet.Cells[i, 4].SetValue(random.Next(1, 4));
            worksheet.Cells[i, 5].SetValue(random.Next(0, 10));
        }

        // Sort by column E ascending and then by column F descending.
        // These sort settings will be saved to output XLSX file because they are active (parameter value is true).
        worksheet.Cells.GetSubrangeAbsolute(1, 4, 10, 5).Sort(true).By(0).By(1, true).Apply();

        workbook.Save("Sorting.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Data Validation/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Data Validation");

        worksheet.Cells[0, 0].Value = "Data validation examples:";

        worksheet.Cells[2, 1].Value = "Decimal greater than 3.14 (on entire row 4):";
        worksheet.DataValidations.Add(new DataValidation(worksheet.Rows[3].Cells)
        {
            Type = DataValidationType.Decimal,
            Operator = DataValidationOperator.GreaterThan,
            Formula1 = 3.14,
            InputMessageTitle = "Enter a decimal",
            InputMessage = "Decimal should be greater than 3.14.",
            ErrorTitle = "Invalid decimal",
            ErrorMessage = "Value should be a decimal greater than 3.14."
        });
        worksheet.Cells.GetSubrange("A4", "J4").Value = 3.15;

        worksheet.Cells[7, 1].Value = "List from B9 to B12 (on cell C8):";
        worksheet.Cells[8, 1].Value = "John";
        worksheet.Cells[9, 1].Value = "Fred";
        worksheet.Cells[10, 1].Value = "Hans";
        worksheet.Cells[11, 1].Value = "Ivan";
        worksheet.DataValidations.Add(new DataValidation(worksheet, "C8")
        {
            Type = DataValidationType.List,
            Formula1 = "=B9:B12",
            InputMessageTitle = "Enter a name",
            InputMessage = "Name should be from the list: John, Fred, Hans, Ivan.",
            ErrorStyle = DataValidationErrorStyle.Warning,
            ErrorTitle = "Invalid name",
            ErrorMessage = "Value should be a name from the list: John, Fred, Hans, Ivan."
        });
        worksheet.Cells["C8"].Value = "John";

        worksheet.Cells[13, 1].Value = "Date between 2011-01-01 and 2011-12-31 (on cell range C14:E15):";
        worksheet.DataValidations.Add(new DataValidation(worksheet.Cells.GetSubrange("C14", "E15"))
        {
            Type = DataValidationType.Date,
            Operator = DataValidationOperator.Between,
            Formula1 = new DateTime(2011, 1, 1),
            Formula2 = new DateTime(2011, 12, 31),
            InputMessageTitle = "Enter a date",
            InputMessage = "Date should be between 2011-01-01 and 2011-12-31.",
            ErrorStyle = DataValidationErrorStyle.Information,
            ErrorTitle = "Invalid date",
            ErrorMessage = "Value should be a date between 2011-01-01 and 2011-12-31."
        });
        worksheet.Cells.GetSubrange("C14", "E15").Value = new DateTime(2011, 1, 1);

        // Column width of 8, 55 and 15 characters.
        worksheet.Columns[0].Width = 8 * 256;
        worksheet.Columns[1].Width = 55 * 256;
        worksheet.Columns[2].Width = 15 * 256;
        worksheet.Columns[3].Width = 15 * 256;
        worksheet.Columns[4].Width = 15 * 256;

        workbook.Save("Data Validation.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Features/Sheet Copying and Deleting/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = ExcelFile.Load("Template.xlsx");

        // Get template sheet.
        var templateSheet = workbook.Worksheets[0];

        // Copy template sheet.
        for (int i = 0; i < 4; i++)
            workbook.Worksheets.AddCopy("Invoice " + (i + 1), templateSheet);

        // Delete template sheet.
        workbook.Worksheets.Remove(0);

        var random = new Random();

        // For each sheet.
        for (int i = 0; i < 4; i++)
        {
            // Get sheet.
            var worksheet = workbook.Worksheets[i];

            // Write sheet's cells.
            worksheet.Cells["C6"].Value = "ACME Corp";
            worksheet.Cells["C7"].Value = "240 Old Country Road, Springfield, IL";

            DateTime startDate = DateTime.Today;
            int itemsCount = random.Next(5, 20);
            worksheet.Cells["C11"].SetValue(startDate);
            worksheet.Cells["C12"].SetValue(startDate.AddDays(itemsCount - 1));

            // Copy template row.
            int row = 17;
            worksheet.Rows.InsertCopy(row + 1, itemsCount - 1, worksheet.Rows[row]);

            // Write row's cells.
            for (int j = 0; j < itemsCount; j++)
            {
                var currentRow = worksheet.Rows[row + j];
                currentRow.Cells[1].SetValue(startDate.AddDays(j));
                currentRow.Cells[2].SetValue(random.Next(6, 9));
            }
        }

        workbook.Save("Sheet Copying_Deleting.xlsx");
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("CellRanges.xlsx");
        var worksheet = workbook.Worksheets[0];

        // Copy cells including all the data, like pictures, data validations, and conditional formattings.
        var range = worksheet.Cells.GetSubrange("B3:D12");
        range.CopyTo("F3");
        range.CopyTo("J3");

        // Copy cells with specified copy options.
        range = worksheet.Cells.GetSubrange("B7:D8");
        range.CopyTo("J15", new CopyOptions()
        {
            CopyTypes = CopyTypes.Values | CopyTypes.Formulas,
            Transpose = true
        });

        // Delete cells and shift remaining cells to the left.
        range = worksheet.Cells.GetSubrange("B14:D23");
        range.Remove(RemoveShiftDirection.Left);

        workbook.Save("CellRanges Copied and Deleted.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Charts/Chart Sheet/Program.cs:
using System;
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Charts;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Data");

        // Add data which will be used by the Excel chart.
        worksheet.Cells["A1"].Value = "Name";
        worksheet.Cells["A2"].Value = "John Doe";
        worksheet.Cells["A3"].Value = "Fred Nurk";
        worksheet.Cells["A4"].Value = "Hans Meier";
        worksheet.Cells["A5"].Value = "Ivan Horvat";

        worksheet.Cells["B1"].Value = "Salary";
        worksheet.Cells["B2"].Value = 3600;
        worksheet.Cells["B3"].Value = 2580;
        worksheet.Cells["B4"].Value = 3200;
        worksheet.Cells["B5"].Value = 4100;

        // Set header row and formatting.
        worksheet.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
        worksheet.Columns[0].SetWidth(3, LengthUnit.Centimeter);
        worksheet.Columns[1].Style.NumberFormat = "\"$\"#,##0";

        // Make entire sheet print on a single page.
        worksheet.PrintOptions.FitWorksheetWidthToPages = 1;
        worksheet.PrintOptions.FitWorksheetHeightToPages = 1;

        // Create Excel chart sheet.
        var chartsheet = workbook.Worksheets.Add(SheetType.Chart, "Chart");
        workbook.Worksheets.ActiveWorksheet = chartsheet;

        // Create Excel chart and select data for it.
        // You cannot set the size of the chart area when the chart is located on a chart sheet, it will snap to maximum size on the chart sheet.
        var chart = chartsheet.Charts.Add(ChartType.Pie, 0, 0, 0, 0, LengthUnit.Centimeter);
        chart.SelectData(worksheet.Cells.GetSubrangeAbsolute(0, 0, 4, 1), true);

        workbook.Save("Chart Sheet.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Charts/Chart/Program.cs:
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Charts;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
        Example3();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Chart");

        // Add data which will be used by the Excel chart.
        worksheet.Cells["A1"].Value = "Name";
        worksheet.Cells["A2"].Value = "John Doe";
        worksheet.Cells["A3"].Value = "Fred Nurk";
        worksheet.Cells["A4"].Value = "Hans Meier";
        worksheet.Cells["A5"].Value = "Ivan Horvat";

        worksheet.Cells["B1"].Value = "Salary";
        worksheet.Cells["B2"].Value = 3600;
        worksheet.Cells["B3"].Value = 2580;
        worksheet.Cells["B4"].Value = 3200;
        worksheet.Cells["B5"].Value = 4100;

        // Set header row and formatting.
        worksheet.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
        worksheet.Columns[0].SetWidth(3, LengthUnit.Centimeter);
        worksheet.Columns[1].Style.NumberFormat = "\"$\"#,##0";

        // Make entire sheet print on a single page.
        worksheet.PrintOptions.FitWorksheetWidthToPages = 1;
        worksheet.PrintOptions.FitWorksheetHeightToPages = 1;

        // Create Excel chart and select data for it.
        var chart = worksheet.Charts.Add(ChartType.Bar, "D2", "M25");
        chart.SelectData(worksheet.Cells.GetSubrangeAbsolute(0, 0, 4, 1), true);

        workbook.Save("Chart.xlsx");
    }

    static void Example2()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Chart");

        // Add data which will be used by the Excel chart.
        worksheet.Cells["A1"].Value = "Name";
        worksheet.Cells["A2"].Value = "John Doe";
        worksheet.Cells["A3"].Value = "Fred Nurk";
        worksheet.Cells["A4"].Value = "Hans Meier";
        worksheet.Cells["A5"].Value = "Ivan Horvat";

        worksheet.Cells["B1"].Value = "Salary";
        worksheet.Cells["B2"].Value = 4023;
        worksheet.Cells["B3"].Value = 3263;
        worksheet.Cells["B4"].Value = 2851;
        worksheet.Cells["B5"].Value = 4694;

        worksheet.Cells["C1"].Value = "Max";
        worksheet.Cells["C2"].Value = 4500;
        worksheet.Cells["C3"].Value = 4300;
        worksheet.Cells["C4"].Value = 4000;
        worksheet.Cells["C5"].Value = 4900;

        worksheet.Cells["D1"].Value = "Min";
        worksheet.Cells["D2"].Value = 3000;
        worksheet.Cells["D3"].Value = 2800;
        worksheet.Cells["D4"].Value = 2500;
        worksheet.Cells["D5"].Value = 3400;

        // Set header row and formatting.
        worksheet.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
        worksheet.Columns[0].SetWidth(3, LengthUnit.Centimeter);

        // Set value cells number formatting.
        foreach (var cell in worksheet.Cells.GetSubrange("B2", "D5"))
            cell.Style.NumberFormat = "\"$\"#,##0";

        // Make entire sheet print on a single page.
        worksheet.PrintOptions.FitWorksheetWidthToPages = 1;
        worksheet.PrintOptions.FitWorksheetHeightToPages = 1;

        // Create Excel combo chart and set category labels reference.
        var comboChart = worksheet.Charts.Add<ComboChart>("F2", "O25");
        comboChart.CategoryLabelsReference = "Chart!A2:A5";

        // Make chart legend visible.
        comboChart.Legend.IsVisible = true;
        comboChart.Legend.Position = ChartLegendPosition.Top;

        // Add column chart for displaying salary series.
        var salaryChart = comboChart.Add(ChartType.Column);
        salaryChart.Series.Add("=Chart!B1", "Chart!B2:B5");

        // Add line chart for displaying min and max series.
        var minMaxChart = comboChart.Add(ChartType.Line);
        minMaxChart.Series.Add("=Chart!C1", "Chart!C2:C5");
        minMaxChart.Series.Add("=Chart!D1", "Chart!D2:D5");

        workbook.Save("Combo Chart.xlsx");
    }

    static void Example3()
    {
        var workbook = ExcelFile.Load("Combo.xlsx");
        var worksheet = workbook.Worksheets["Chart"];
        var comboChart = worksheet.Charts[0] as ComboChart;

        // Update existing series.
        // When setting the values directly the ValuesReference will end up as null.
        var salarySeries = comboChart.Series[0];
        salarySeries.SetValues(3000, 3500, 4000, 4500);

        // Add new data.
        worksheet.Cells["Q1"].Value = "Average";
        foreach (var cell in worksheet.Cells.GetSubrange("Q2:Q5"))
        {
            string row = cell.Row.Name;
            cell.Formula = $"=AVERAGE(C{row},D{row})";
            cell.Style.NumberFormat = "\"$\"#,##0";
        }
        worksheet.Calculate();

        // Add new series.
        var lineChart = comboChart[1] as LineChart;
        var avgSeries = lineChart.Series.Add("=Chart!Q1", "Chart!Q2:Q5");
        avgSeries.Marker.MarkerType = MarkerType.Diamond;
        avgSeries.Marker.Size = 10;

        workbook.Save("Updated Combo.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Charts/Chart Components/Program.cs:
using System;
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Charts;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Chart");

        int numberOfYears = 4;

        // Add data which is used by the chart.
        worksheet.Cells["A1"].Value = "Name";
        worksheet.Cells["A2"].Value = "John Doe";
        worksheet.Cells["A3"].Value = "Fred Nurk";
        worksheet.Cells["A4"].Value = "Hans Meier";
        worksheet.Cells["A5"].Value = "Ivan Horvat";

        // Generate column titles.
        for (int i = 0; i < numberOfYears; i++)
            worksheet.Cells[0, i + 1].Value = DateTime.Now.Year - numberOfYears + i;

        var random = new Random();
        var range = worksheet.Cells.GetSubrangeAbsolute(1, 1, 4, numberOfYears);

        // Fill the values.
        foreach (var cell in range)
        {
            cell.SetValue(random.Next(1000, 5000));
            cell.Style.NumberFormat = "\"$\"#,##0";
        }

        // Set header row and formatting.
        worksheet.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
        worksheet.Rows[0].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;
        worksheet.Columns[0].SetWidth(3, LengthUnit.Centimeter);

        // Create chart and select data for it.
        var chart = worksheet.Charts.Add<ColumnChart>(ChartGrouping.Clustered, "B7", "O27");
        chart.SelectData(worksheet.Cells.GetSubrangeAbsolute(0, 0, 4, numberOfYears));

        // Set chart title.
        chart.Title.Text = "Column Chart";

        // Set chart legend.
        chart.Legend.IsVisible = true;
        chart.Legend.Position = ChartLegendPosition.Right;

        // Set axis titles.
        chart.Axes.Horizontal.Title.Text = "Years";
        chart.Axes.Vertical.Title.Text = "Salaries";

        // Set value axis scaling, units, gridlines and tick marks.
        var valueAxis = chart.Axes.VerticalValue;
        valueAxis.Minimum = 0;
        valueAxis.Maximum = 6000;
        valueAxis.MajorUnit = 1000;
        valueAxis.MinorUnit = 500;
        valueAxis.MajorGridlines.IsVisible = true;
        valueAxis.MinorGridlines.IsVisible = true;
        valueAxis.MajorTickMarkType = TickMarkType.Outside;
        valueAxis.MinorTickMarkType = TickMarkType.Cross;

        // Make entire sheet print horizontally centered on a single page with headings and gridlines.
        var printOptions = worksheet.PrintOptions;
        printOptions.HorizontalCentered = true;
        printOptions.PrintHeadings = true;
        printOptions.PrintGridlines = true;
        printOptions.FitWorksheetWidthToPages = 1;
        printOptions.FitWorksheetHeightToPages = 1;

        workbook.Save("Chart Components.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Charts/Chart Formatting/Program.cs:
using System;
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Charts;
using GemBox.Spreadsheet.Drawing;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Chart");

        // Add data which will be used by the Excel chart.
        worksheet.Cells["A1"].Value = "Month";
        worksheet.Cells["A2"].Value = "January";
        worksheet.Cells["A3"].Value = "February";
        worksheet.Cells["A4"].Value = "March";
        worksheet.Cells["A5"].Value = "April";
        worksheet.Cells["A6"].Value = "May";
        worksheet.Cells["A7"].Value = "June";
        worksheet.Cells["A8"].Value = "July";
        worksheet.Cells["A9"].Value = "August";
        worksheet.Cells["A10"].Value = "September";
        worksheet.Cells["A11"].Value = "October";
        worksheet.Cells["A12"].Value = "November";
        worksheet.Cells["A13"].Value = "December";

        // Fill the values.
        worksheet.Cells["B1"].Value = "Sales";
        var random = new Random();

        for (int i = 1; i <= 12; i++)
            worksheet.Cells[i, 1].SetValue(random.Next(2000, 5000));

        // Set header row and formatting.
        worksheet.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
        worksheet.Columns[0].SetWidth(3, LengthUnit.Centimeter);
        worksheet.Columns[1].Style.NumberFormat = "\"$\"#,##0";

        // Make entire sheet print on a single page.
        worksheet.PrintOptions.FitWorksheetWidthToPages = 1;
        worksheet.PrintOptions.FitWorksheetHeightToPages = 1;

        // Create Excel chart and select data for it.
        var chart = worksheet.Charts.Add<LineChart>("D2", "P25");
        chart.SelectData(worksheet.Cells.GetSubrangeAbsolute(0, 0, 12, 1), true);

        // Define colors.
        var backgroundColor = DrawingColor.FromName(DrawingColorName.RoyalBlue);
        var seriesColor = DrawingColor.FromName(DrawingColorName.Green);
        var textColor = DrawingColor.FromName(DrawingColorName.White);
        var borderColor = DrawingColor.FromName(DrawingColorName.Black);

        // Format chart.
        chart.Fill.SetSolid(backgroundColor);

        var outline = chart.Outline;
        outline.Width = Length.From(2, LengthUnit.Point);
        outline.Fill.SetSolid(borderColor);

        // Format plot area.
        chart.PlotArea.Fill.SetSolid(DrawingColor.FromName(DrawingColorName.White));

        outline = chart.PlotArea.Outline;
        outline.Width = Length.From(1.5, LengthUnit.Point);
        outline.Fill.SetSolid(borderColor);

        // Format chart title.
        var textFormat = chart.Title.TextFormat;
        textFormat.Size = Length.From(20, LengthUnit.Point);
        textFormat.Font = "Arial";
        textFormat.Fill.SetSolid(textColor);

        // Format vertical axis.
        textFormat = chart.Axes.Vertical.TextFormat;
        textFormat.Fill.SetSolid(textColor);
        textFormat.Italic = true;

        // Format horizontal axis.
        textFormat = chart.Axes.Horizontal.TextFormat;
        textFormat.Fill.SetSolid(textColor);
        textFormat.Size = Length.From(12, LengthUnit.Point);
        textFormat.Bold = true;

        // Format vertical major gridlines.
        chart.Axes.Vertical.MajorGridlines.Outline.Width = Length.From(0.5, LengthUnit.Point);

        // Format series.
        var series = chart.Series[0];
        outline = series.Outline;
        outline.Width = Length.From(3, LengthUnit.Point);
        outline.Fill.SetSolid(seriesColor);

        // Format series markers.
        series.Marker.MarkerType = MarkerType.Circle;
        series.Marker.Size = 10;
        series.Marker.Fill.SetSolid(textColor);
        series.Marker.Outline.Fill.SetSolid(seriesColor);

        workbook.Save("Chart Formatting.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Freeze and Split Panes/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        
        var workbook = new ExcelFile();

        // Frozen Rows (first 2 rows are frozen).
        var worksheet1 = workbook.Worksheets.Add("Frozen rows");
        worksheet1.Panes = new WorksheetPanes(2, 0);

        // Frozen Columns (first column is frozen).
        var worksheet2 = workbook.Worksheets.Add("Frozen columns");
        worksheet2.Panes = new WorksheetPanes(0, 1);

        // Frozen Rows and Columns (first 2 rows and first 3 columns are frozen).
        var worksheet3 = workbook.Worksheets.Add("Frozen rows and columns");
        worksheet3.Panes = new WorksheetPanes(2, 3);

        // Split pane.
        var worksheet4 = workbook.Worksheets.Add("Split pane");
        worksheet4.Panes = new WorksheetPanes(PanesState.Split, 2310, 1500, "D7", PanePosition.BottomRight);

        workbook.Save("Freeze or Split Panes.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Comments/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Comments");

        // Add hidden comments (hover over an indicator to view it).
        ExcelCell cell = worksheet.Cells["B2"];
        cell.Value = "Hidden comment";
        ExcelComment comment = cell.Comment;
        comment.Text = "Comment with hidden text.";

        comment = worksheet.Cells["B4"].Comment;
        comment.Text = "Another comment with hidden text.";

        // Add visible comments.
        cell = worksheet.Cells["B6"];
        cell.Value = "Visible comment";
        comment = cell.Comment;
        comment.Text = "Comment with specified position and size.";
        comment.IsVisible = true;
        comment.TopLeftCell = new AnchorCell(worksheet.Cells["D5"], true);
        comment.BottomRightCell = new AnchorCell(worksheet.Cells["E12"], false);

        comment = worksheet.Cells["B8"].Comment;
        comment.Text = "Comment with specified start position.";
        comment.IsVisible = true;
        comment.TopLeftCell = new AnchorCell(worksheet.Columns["A"], worksheet.Rows["10"], 20, 10, LengthUnit.Pixel);

        // Add visible comment with formatted individual characters.
        comment = worksheet.Cells["F3"].Comment;
        comment.Text = "Comment with rich formatted text.\nComment is:\n a) multiline,\n b) large,\n c) visible, \n d) formatted, and \n e) autofitted.";
        comment.IsVisible = true;
        var characters = comment.GetCharacters(0, 33);
        characters.Font.Color = SpreadsheetColor.FromName(ColorName.Orange);
        characters.Font.Weight = ExcelFont.BoldWeight;
        characters.Font.Size = 300;
        comment.GetCharacters(13, 4).Font.Color = SpreadsheetColor.FromName(ColorName.Blue);
        comment.AutoFit();

        // Read and update comment.
        cell = worksheet.Cells["B8"];
        if (cell.Comment.Exists)
        {
            cell.Comment.Text = cell.Comment.Text.Replace(".", " and modified text.");
            cell.Value = "Updated comment.";
        }

        // Delete comment.
        cell = worksheet.Cells["B4"];
        cell.Comment = null;
        cell.Value = "Deleted comment.";

        workbook.Save("Cell Comments.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Tables/Program.cs:
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Tables;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Tables");

        // Add some data.
        var data = new object[5, 3]
        {
            { "Worker", "Hours", "Price" },
            { "John Doe", 25, 35.0 },
            { "Jane Doe", 27, 35.0 },
            { "Jack White", 18, 32.0 },
            { "George Black", 31, 35.0 }
        };

        for (int i = 0; i < 5; i++)
            for (int j = 0; j < 3; j++)
                worksheet.Cells[i, j].Value = data[i, j];

        // Set column widths.
        worksheet.Columns[0].SetWidth(100, LengthUnit.Pixel);
        worksheet.Columns[1].SetWidth(70, LengthUnit.Pixel);
        worksheet.Columns[2].SetWidth(70, LengthUnit.Pixel);
        worksheet.Columns[3].SetWidth(70, LengthUnit.Pixel);
        worksheet.Columns[2].Style.NumberFormat = "\"$\"#,##0.00";
        worksheet.Columns[3].Style.NumberFormat = "\"$\"#,##0.00";

        // Create table and enable totals row.
        var table = worksheet.Tables.Add("Table1", "A1:C5", true);
        table.HasTotalsRow = true;

        // Add new column.
        var column = table.Columns.Add();
        column.Name = "Total";

        // Populate column.
        foreach (var cell in column.DataRange)
            cell.Formula = "=Table1[Hours] * Table1[Price]";

        // Set totals row function for newly added column and calculate it.
        column.TotalsRowFunction = TotalsRowFunction.Sum;
        column.Range.Calculate();

        // Set table style.
        table.BuiltInStyle = BuiltInTableStyleName.TableStyleMedium2;

        workbook.Save("Tables.xlsx");
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("Tables.xlsx");
        var worksheet = workbook.Worksheets["Tables"];
        var table = worksheet.Tables["Table1"];

        // Remove existing table row.
        table.Rows.RemoveAt(0);

        // Update existing table row.
        var tableRow = table.Rows[0];
        tableRow.DataRange[0].Value = "Jane Updated";
        tableRow.DataRange[1].Value = 30;
        tableRow.DataRange[2].Value = 40.0;

        // Sample data for writing into a table.
        var data = new[]
        {
            new object[]{ "Fred Nurk", 22, 35.0 },
            new object[]{ "Hans Meier", 16, 20.0 },
            new object[]{ "Ivan Horvat", 24, 34.0 }
        };

        foreach (object[] items in data)
        {
            // Add new table row by adding cell values directly.
            tableRow = table.Rows.Add(items);
            tableRow.DataRange[3].Formula = "=Table1[Hours] * Table1[Price]";
        }

        table.Columns["Total"].Range.Calculate();

        workbook.Save("Tables Updated.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Defined Names/Program.cs:
using System;
using System.IO;
using System.Text;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Names");

        // Create a defined name for a constant value with a global scope.
        workbook.DefinedNames.AddDefinedName("Tax", "0.2", -1);

        // Retrieve defined name.
        DefinedName taxConstant = workbook.DefinedNames["Tax"];

        // Use defined name with formula.
        worksheet.Cells["A1"].Value = taxConstant.Name;
        worksheet.Cells["B1"].Formula = "=Tax";
        worksheet.Cells["B1"].Style.NumberFormat = "0%";

        // Create a named range for cell "A3" with a local scope.
        worksheet.Cells["A2"].Value = "Price";
        worksheet.Cells["A3"].Value = 240;
        worksheet.Cells["A4"].Value = 180;
        worksheet.Cells["A5"].Value = 210;
        worksheet.NamedRanges.Add("Prices", worksheet.Cells.GetSubrange("A3"));

        // Retrieve named range.
        NamedRange priceRange = worksheet.NamedRanges["Prices"];

        // Modify named range's cell reference to cells "A3:A5".
        priceRange.Range = worksheet.Cells.GetSubrange("A3:A5");

        // Use named range with formulas.
        worksheet.Cells["B2"].Value = "Total";
        worksheet.Cells["B3"].Formula = "=Prices * (Tax + 1)";
        worksheet.Cells["B4"].Formula = "=Prices * (Tax + 1)";
        worksheet.Cells["B5"].Formula = "=Prices * (Tax + 1)";

        workbook.Save("Defined Names.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/VBA Macros/Program.cs:
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Vba;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Sheet1");

        // Create the module.
        VbaModule vbaModule = workbook.VbaProject.Modules.Add(worksheet);
        vbaModule.Code =
@"Sub Button1_Click()
    MsgBox ""Hello World!""
End Sub";

        // Create a button to assign macro.
        var button = worksheet.FormControls.AddButton("Click Me!", "B2", 100, 15, LengthUnit.Point);
        // Assign the macro.
        button.SetMacro(vbaModule, "Button1_Click");

        // Save the workbook as macro-enabled Excel file.
        workbook.Save("AddVbaModule.xlsm");
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("SampleVba.xlsm");

        // Get the module.
        VbaModule vbaModule = workbook.VbaProject.Modules["Module1"];
        // Update text for the popup message.
        vbaModule.Code = vbaModule.Code.Replace("Hello world!", "Hello from GemBox.Spreadsheet!");

        workbook.Save("UpdateVbaModule.xlsm");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Images/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Images");

        // Add small BMP image with specified rectangle position.
        worksheet.Pictures.Add("SmallImage.bmp", 50, 50, 48, 48, LengthUnit.Pixel);

        // Add large JPG image with specified top-left cell.
        worksheet.Pictures.Add("FragonardReader.jpg", "B9");

        // Add PNG image with specified top-left and bottom-right cells.
        worksheet.Pictures.Add("Dices.png", "J16", "K20");

        // Add GIF image using anchors.
        var picture = worksheet.Pictures.Add("Zahnrad.gif",
            new AnchorCell(worksheet.Columns[9], worksheet.Rows[21], 100000, 100000),
            new AnchorCell(worksheet.Columns[10], worksheet.Rows[23], 50000, 50000));

        // Set picture's position mode.
        picture.Position.Mode = PositioningMode.Move;

        // Add SVG image with specified top-left cell and size.
        picture = worksheet.Pictures.Add("Graphics1.svg", "J9", 250, 100, LengthUnit.Pixel);

        // Set picture's metadata.
        picture.Metadata.Name = "SVG Image";

        workbook.Save("Images.xlsx");
    }

    static void Example2()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Smileys");

        // Create a sheet with specified columns width and rows height.
        for (int i = 0; i < 6; i++)
        {
            worksheet.Columns[i].SetWidth(10 * (i + 1), LengthUnit.Point);
            worksheet.Rows[i].SetHeight(10 * (i + 1), LengthUnit.Point);
        }

        // Add images that fit inside a single cell.
        foreach (var cell in worksheet.Cells.GetSubrange("A1:F6"))
        {
            var picture = worksheet.Pictures.Add("SmilingFace.png", cell.Name);
            var position = picture.Position;

            double maxWidth = cell.Column.GetWidth(LengthUnit.Point);
            double maxHeight = cell.Row.GetHeight(LengthUnit.Point);

            var ratioX = maxWidth / position.Width;
            var ratioY = maxHeight / position.Height;
            var ratio = Math.Min(ratioX, ratioY);

            if (ratio < 1)
            {
                position.Width *= ratio;
                position.Height *= ratio;
            }
        }

        workbook.Save("CellsImages.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Text Boxes/Program.cs:
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Drawing;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Text Boxes");

        // Create the first shape.
        var shape = worksheet.Shapes.Add(ShapeType.Rectangle, "B2", "D8");

        // Get the shape's text content.
        var textBox = shape.Text;

        // Create the first paragraph with bold, red run element.
        var run = textBox.Paragraphs.Add().Elements.AddRun("Shows how to use text boxes with GemBox.Spreadsheet component.");
        run.Format.Bold = true;
        run.Format.Fill.SetSolid(DrawingColor.FromName(DrawingColorName.Orange));

        // Create an empty paragraph.
        textBox.Paragraphs.Add();

        // Create a right-aligned (multi-line) paragraph.
        var paragraph = textBox.Paragraphs.Add();
        paragraph.Format.Alignment = HorizontalAlignment.Right;

        // Create and add a run element.
        run = paragraph.Elements.AddRun("This is a ...");
        var lineBreak = paragraph.Elements.AddLineBreak();
        run = paragraph.Elements.AddRun("... multi-line paragraph.");

        // Create the second shape.
        shape = worksheet.Shapes.Add(ShapeType.Oval, 200, 50, 150, 150, LengthUnit.Point);
        shape.Fill.SetSolid(DrawingColor.FromName(DrawingColorName.DarkOliveGreen));
        shape.Outline.Fill.SetNone();
        textBox = shape.Text;
        textBox.Format.VerticalAlignment = VerticalAlignment.Middle;

        // Create a list.
        paragraph = textBox.Paragraphs.Add();
        paragraph.Elements.AddRun("This is a paragraph list:");

        paragraph = textBox.Paragraphs.Add();
        paragraph.Format.List.NumberType = ListNumberType.DecimalPeriod;
        run = paragraph.Elements.AddRun("First list item");

        paragraph = textBox.Paragraphs.Add();
        paragraph.Format.List.NumberType = ListNumberType.DecimalPeriod;
        run = paragraph.Elements.AddRun("Second list item");

        paragraph = textBox.Paragraphs.Add();
        paragraph.Format.List.NumberType = ListNumberType.DecimalPeriod;
        run = paragraph.Elements.AddRun("Third list item");

        workbook.Save("Text Boxes.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Shapes/Program.cs:
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Drawing;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Shapes");

        var shape = worksheet.Shapes.Add(ShapeType.Oval, 100, 100, 200, 150, LengthUnit.Point);
        shape.Fill.SetSolid(DrawingColor.FromName(DrawingColorName.GreenYellow));
        shape.Outline.Fill.SetSolid(DrawingColor.FromName(DrawingColorName.DarkBlue));
        shape.Outline.Width = Length.From(3, LengthUnit.Point);

        var roundedRectangle = worksheet.Shapes.Add(ShapeType.RoundedRectangle, "B2", "D4");
        // Radius of the corners is 35% of the rounded rectangle height (since it is smaller than width).
        roundedRectangle.AdjustValues["adj"] = 35000;

        var rightArrow = worksheet.Shapes.Add(ShapeType.RightArrow, "B6", 100, 40, LengthUnit.Point);
        rightArrow.Fill.SetNone();
        rightArrow.Outline.Fill.SetSolid(DrawingColor.FromRgb(250, 30, 20));
        rightArrow.Outline.Width = Length.From(2, LengthUnit.Point);

        var line = worksheet.Shapes.Add(ShapeType.Line, "B12", "B15");
        line.Outline.Width = Length.From(10, LengthUnit.Pixel);

        workbook.Save("Shapes.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Hyperlinks/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Hyperlinks");
        var hyperlinkStyle = workbook.Styles[BuiltInCellStyleName.Hyperlink];

        var cell = worksheet.Cells["B1"];
        cell.Value = "Link to GemBox homepage";
        cell.Style = hyperlinkStyle;
        cell.Hyperlink.Location = "https://www.gemboxsoftware.com";
        cell.Hyperlink.IsExternal = true;

        cell = worksheet.Cells["B3"];
        cell.Value = "Jump";
        cell.Style = hyperlinkStyle;
        cell.Hyperlink.ToolTip = "This is tool tip! This hyperlink jumps to E1.";
        cell.Hyperlink.Location = worksheet.Name + "!E3";

        worksheet.Cells["E3"].Value = "Jump destination";

        cell = worksheet.Cells["B5"];
        cell.Formula = "=HYPERLINK(\"https://www.gemboxsoftware.com/spreadsheet/examples/excel-cell-hyperlinks/207\", \"Link to Hyperlinks example\")";
        cell.Style = hyperlinkStyle;

        workbook.Save("Hyperlinks.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Form Controls/Program.cs:
using System;
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Drawing;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Form Controls");

        var checkBox = worksheet.FormControls.AddCheckBox("Simple check box", "B2", 100, 15, LengthUnit.Point);
        checkBox.CellLink = worksheet.Cells["A2"];
        checkBox.Checked = true;

        worksheet.Cells["A4"].Value = "VALUE A";
        worksheet.Cells["A5"].Value = "VALUE B";
        worksheet.Cells["A6"].Value = "VALUE C";
        worksheet.Cells["A7"].Value = "VALUE D";
        var comboBox = worksheet.FormControls.AddComboBox("B4", 100, 20, LengthUnit.Point);
        comboBox.InputRange = worksheet.Cells.GetSubrange("A4:A7");
        comboBox.SelectedIndex = 2;

        var scrollBar = worksheet.FormControls.AddScrollBar("B9", 100, 20, LengthUnit.Point);
        scrollBar.CellLink = worksheet.Cells["A9"];
        scrollBar.MinimumValue = 10;
        scrollBar.MaximumValue = 50;
        scrollBar.CurrentValue = 20;

        workbook.Save("Form Controls.xlsx");
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("FormControls.xlsx");
        var worksheet = workbook.Worksheets[0];

        // Update CheckBox control.
        var checkBox = worksheet.FormControls[0] as CheckBox;
        checkBox.Checked = false;

        // Read CheckBox control.
        Console.WriteLine("CheckBox checked: " + checkBox.Checked);
        Console.WriteLine("Linked cell value: " + checkBox.CellLink?.Value);
        Console.WriteLine();

        // Update ComboBox control.
        var comboBox = worksheet.FormControls[1] as ComboBox;
        comboBox.SelectedIndex = 1;

        // Read ComboBox control.
        Console.WriteLine("ComboBox range: " + comboBox.InputRange?.Name);
        Console.WriteLine("ComboBox selected: " + comboBox.SelectedValue);
        Console.WriteLine();

        // Update ScrollBar control.
        var scrollBar = worksheet.FormControls[2] as ScrollBar;
        scrollBar.CurrentValue = 33;

        // Read ScrollBar control.
        Console.WriteLine("ScrollBar current: " + scrollBar.CurrentValue);
        Console.WriteLine("Linked cell value: " + scrollBar.CellLink?.Value);
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Headers and Footers/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("HeadersFooters");

        SheetHeaderFooter sheetHeadersFooters = worksheet.HeadersFooters;

        HeaderFooterPage firstHeaderFooter = sheetHeadersFooters.FirstPage;
        HeaderFooterPage defaultHeaderFooter = sheetHeadersFooters.DefaultPage;

        // Set title text on the center of the first page header.
        firstHeaderFooter.Header.CenterSection
            .Append("Title on the first page",
                new ExcelFont() { Name = "Arial Black", Size = 18 * 20 });

        // Set image on the left of the first and default page headers.
        firstHeaderFooter.Header.LeftSection
            .AppendPicture("Dices.png", 40, 30);
        defaultHeaderFooter.Header.LeftSection = firstHeaderFooter.Header.LeftSection;

        // Set page number on the right of the first and default page footer.
        firstHeaderFooter.Footer.RightSection
            .Append("Page ")
            .Append(HeaderFooterFieldType.PageNumber)
            .Append(" of ")
            .Append(HeaderFooterFieldType.NumberOfPages);
        defaultHeaderFooter.Footer = firstHeaderFooter.Footer;

        worksheet.Cells[0, 0].Value = "First page";
        worksheet.Cells[0, 5].Value = "Second page";
        worksheet.Cells[0, 10].Value = "Third page";

        worksheet.VerticalPageBreaks.Add(5);
        worksheet.VerticalPageBreaks.Add(10);

        workbook.Save("Headers and Footers.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Document Properties/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        
        var workbook = ExcelFile.Load("ComplexTemplate.xlsx");
        var properties = workbook.DocumentProperties;

        Console.WriteLine("# Built-in document properties:");

        // Write built-in document properties.
        properties.BuiltIn[BuiltInDocumentProperties.Title] = "My Spreadsheet Title";
        properties.BuiltIn[BuiltInDocumentProperties.DateLastSaved] = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ");

        // Read built-in document properties.
        foreach (var builtinProperty in properties.BuiltIn)
            Console.WriteLine($"{builtinProperty.Key,20}: {builtinProperty.Value}");

        Console.WriteLine();
        Console.WriteLine("# Custom document properties:");

        // Write custom document properties.
        properties.Custom["My Custom Property 1"] = "My Custom Value";
        properties.Custom["My Custom Property 2"] = 123.4;

        // Read custom document properties.
        foreach (var customProperty in properties.Custom)
            Console.WriteLine($"{customProperty.Key,20}: {customProperty.Value,-20} [{customProperty.Value.GetType()}]");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Elements/Pivot Tables/Program.cs:
using System;
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.PivotTables;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet1 = workbook.Worksheets.Add("SourceSheet");

        // Specify sheet formatting.
        worksheet1.Rows[0].Style.Font.Weight = ExcelFont.BoldWeight;
        worksheet1.Columns[0].SetWidth(3, LengthUnit.Centimeter);
        worksheet1.Columns[1].SetWidth(3, LengthUnit.Centimeter);
        worksheet1.Columns[2].SetWidth(3, LengthUnit.Centimeter);
        worksheet1.Columns[3].SetWidth(3, LengthUnit.Centimeter);
        worksheet1.Columns[3].Style.NumberFormat = "[$$-409]#,##0.00";

        var cells = worksheet1.Cells;

        // Specify header row.
        cells[0, 0].Value = "Departments";
        cells[0, 1].Value = "Names";
        cells[0, 2].Value = "Years of Service";
        cells[0, 3].Value = "Salaries";

        // Insert random data to sheet.
        var random = new Random();
        var departments = new string[] { "Legal", "Marketing", "Finance", "Planning", "Purchasing" };
        var names = new string[] { "John Doe", "Fred Nurk", "Hans Meier", "Ivan Horvat" };
        var years = new string[] { "1-10", "11-20", "21-30", "over 30" };
        for (int i = 0; i < 100; ++i)
        {
            cells[i + 1, 0].Value = departments[random.Next(departments.Length)];
            cells[i + 1, 1].Value = names[random.Next(names.Length)] + ' ' + (i + 1).ToString();
            cells[i + 1, 2].Value = years[random.Next(years.Length)];
            cells[i + 1, 3].SetValue(random.Next(10, 101) * 100);
        }

        // Create pivot cache from cell range "SourceSheet!A1:D100".
        var cache = workbook.PivotCaches.AddWorksheetSource("SourceSheet!A1:D100");

        // Create new sheet for pivot table.
        var worksheet2 = workbook.Worksheets.Add("PivotSheet");

        // Create pivot table "Company Profile" using the specified pivot cache and add it to the worksheet at the cell location 'A1'.
        var table = worksheet2.PivotTables.Add(cache, "Company Profile", "A1");

        // Aggregate 'Names' values into count value and show it as a percentage of row.
        var field = table.DataFields.Add("Names");
        field.Function = PivotFieldCalculationType.Count;
        field.ShowDataAs = PivotFieldDisplayFormat.PercentageOfRow;
        field.Name = "% of Empl.";

        // Aggregate 'Salaries' values into average value.
        field = table.DataFields.Add("Salaries");
        field.Function = PivotFieldCalculationType.Average;
        field.Name = "Avg. Salary";
        field.NumberFormat = "[$$-409]#,##0.00";

        // Group rows into 'Departments'.
        table.RowFields.Add("Departments");

        // Group columns first into 'Years of Service' and then into 'Values' (count 'Names' and average 'Salaries').
        table.ColumnFields.Add("Years of Service");
        table.ColumnFields.Add(table.DataPivotField);

        // Specify the string to be displayed in row and column header.
        table.RowHeaderCaption = "Departments";
        table.ColumnHeaderCaption = "Years of Service";

        // Do not show grand totals for rows.
        table.RowGrandTotals = false;

        // Set pivot table style.
        table.BuiltInStyle = BuiltInPivotStyleName.PivotStyleMedium10;

        workbook.Save("Pivot Tables.xlsx");
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("PivotTableSource.xlsx");
        var sourceSheet = workbook.Worksheets["SourceSheet"];
        var pivotSheet = workbook.Worksheets["PivotSheet"];
        var pivotTable = pivotSheet.PivotTables[0];

        // Calculate the pivot table with existing values in the pivot cache.
        pivotTable.Calculate();

        Console.WriteLine("Pivot table values before:");
        foreach (var row in pivotSheet.Rows)
        {
            foreach (var cell in row.AllocatedCells)
                Console.Write(cell.GetFormattedValue().PadRight(30));
            Console.WriteLine();
        }

        // Change the values in the source sheet.
        sourceSheet.Cells["D2"].Value = 15300;
        sourceSheet.Cells["D4"].Value = 13300;
        sourceSheet.Cells["D7"].Value = 18500;

        // Refresh the pivot cache.
        pivotTable.PivotCache.Refresh();
        // Calculate the pivot table.
        pivotTable.Calculate();

        Console.WriteLine("-------------------------------------");
        Console.WriteLine("Pivot table values after:");
        foreach (var row in pivotSheet.Rows)
        {
            foreach (var cell in row.AllocatedCells)
                Console.Write(cell.GetFormattedValue().PadRight(30));
            Console.WriteLine();
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Protection/PDF Encryption/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        var password = "pass";
        var ownerPassword = "";

        var options = new PdfSaveOptions()
        {
            DocumentOpenPassword = password,
            PermissionsPassword = ownerPassword,
            Permissions = PdfPermissions.None
        };

        workbook.Save("PDF Encryption.pdf", options);
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Protection/Sheet Protection/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Sheet Protection");

        worksheet.Cells[0, 2].Value = "Only cells from A1 to A10 are editable.";

        for (int i = 0; i < 10; i++)
        {
            var cell = worksheet.Cells[i, 0];
            cell.SetValue(i);
            cell.Style.Locked = false;
        }

        worksheet.Protected = true;

        worksheet.Cells[2, 2].Value = "Inserting columns is allowed (only supported for XLSX file format).";
        var protectionSettings = worksheet.ProtectionSettings;
        protectionSettings.AllowInsertingColumns = true;

        worksheet.Cells[3, 2].Value = "Sheet password is 123 (only supported for XLSX file format).";
        protectionSettings.SetPassword("123");

        workbook.Save("Sheet Protection.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Protection/PDF Digital Signature/Program.cs:
using GemBox.Pdf.Forms;
using GemBox.Pdf.Security;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        PAdES_B_B();

        PAdES_B_LTA();
    }

    static void PAdES_B_B()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        // Create visual representation of digital signature at the beginning of the worksheet.
        var signature = workbook.Worksheets[0].Pictures.Add("GemBoxSignature.png", "B2");

        var options = new PdfSaveOptions()
        {
            DigitalSignature =
            {
                CertificatePath = "GemBoxECDsa521.pfx",
                CertificatePassword = "GemBoxPassword",
                Signature = signature,
                IsAdvancedElectronicSignature = true
            }
        };

        workbook.Save("PDF Digital Signature.pdf", options);
    }

    static void PAdES_B_LTA()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        // Create visual representation of digital signature at the beginning of the first worksheet.
        var signature = workbook.Worksheets[0].Pictures.Add("GemBoxSignature.png", "B2");

        // If using the Professional version, put your serial key below.
        GemBox.Pdf.ComponentInfo.SetLicense("FREE-LIMITED-KEY");

        // Get a digital ID from PKCS#12/PFX file.
        var digitalId = new PdfDigitalId("GemBoxECDsa521.pfx", "GemBoxPassword");

        // Create a PDF signer that will create PAdES B-LTA level signature.
        var signer = new PdfSigner(digitalId);

        // PdfSigner should create CAdES-equivalent signature.
        signer.SignatureFormat = PdfSignatureFormat.CAdES;

        // PdfSigner will embed a timestamp created by freeTSA.org Time Stamp Authority in the signature.
        signer.Timestamper = new PdfTimestamper("https://freetsa.org/tsr");

        // Make sure that all properties specified on PdfSigner are according to PAdES B-LTA level.
        signer.SignatureLevel = PdfSignatureLevel.PAdES_B_LTA;

        // Inject PdfSigner from GemBox.Pdf into
        // PdfDigitalSignatureSaveOptions from GemBox.Spreadsheet.
        var signatureOptions = PdfDigitalSignatureSaveOptions.FromSigner(
            () => signer.SignatureFormat.ToString(),
            () => signer.EstimatedSignatureContentsLength,
            signer.ComputeSignature);

        signatureOptions.Signature = signature;

        var options = new PdfSaveOptions()
        {
            DigitalSignature = signatureOptions
        };

        workbook.Save("PAdES B-LTA.pdf", options);

        using (var pdfDocument = GemBox.Pdf.PdfDocument.Load("PAdES B-LTA.pdf"))
        {
            var signatureField = (PdfSignatureField)pdfDocument.Form.Fields[0];

            // Download validation-related information for the signature and the signature's timestamp and embed it in the PDF file.
            // This will make the signature "LTV enabled".
            pdfDocument.SecurityStore.AddValidationInfo(signatureField.Value);

            // Add an invisible signature field to the PDF document that will hold the document timestamp.
            var timestampField = pdfDocument.Form.Fields.AddSignature();

            // Initiate timestamping of a PDF file with the specified timestamper.
            timestampField.Timestamp(signer.Timestamper);

            // Save any changes done to the PDF file that were done since the last time Save was called and
            // finish timestamping of a PDF file.
            pdfDocument.Save();
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Protection/XLSX Encryption/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var inputPassword = "inpass";
        var outputPassword = "outpass";

        var workbook = ExcelFile.Load("XlsxEncryption.xlsx",
            new XlsxLoadOptions() { Password = inputPassword });

        workbook.Save("XLSX Encryption.xlsx",
            new XlsxSaveOptions() { Password = outputPassword });
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Protection/Workbook Protection/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Workbook Protection");

        var protectionSettings = workbook.ProtectionSettings;
        protectionSettings.ProtectStructure = true;

        worksheet.Cells[0, 0].Value = "Workbook password is 123 (only supported for XLSX file format).";
        protectionSettings.SetPassword("123");

        workbook.Save("Workbook Protection.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Protection/XLSX Digital Signature/Program.cs:
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.Security;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        var saveOptions = new XlsxSaveOptions();
        saveOptions.DigitalSignatures.Add(new XlsxDigitalSignatureSaveOptions()
        {
            CertificatePath = "GemBoxECDsa521.pfx",
            CertificatePassword = "GemBoxPassword"
        });

        workbook.Save("XLSX Digital Signature.xlsx", saveOptions);
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        var signature1 = new XlsxDigitalSignatureSaveOptions()
        {
            CertificatePath = "GemBoxECDsa521.pfx",
            CertificatePassword = "GemBoxPassword",
            CommitmentType = DigitalSignatureCommitmentType.Created,
            SignerRole = "Developer"
        };
        // Embed intermediate certificate.
        signature1.Certificates.Add(new Certificate("GemBoxECDsa.crt"));

        var signature2 = new XlsxDigitalSignatureSaveOptions()
        {
            CertificatePath = "GemBoxRSA4096.pfx",
            CertificatePassword = "GemBoxPassword",
            CommitmentType = DigitalSignatureCommitmentType.Approved,
            SignerRole = "Manager"
        };
        // Embed intermediate certificate.
        signature2.Certificates.Add(new Certificate("GemBoxRSA.crt"));

        var saveOptions = new XlsxSaveOptions();
        saveOptions.DigitalSignatures.Add(signature1);
        saveOptions.DigitalSignatures.Add(signature2);

        workbook.Save("XLSX Digital Signatures.xlsx", saveOptions);
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Protection/XLS Decryption/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var inputPassword = "inpass";

        var workbook = ExcelFile.Load("XlsDecryption.xls",
            new XlsLoadOptions() { Password = inputPassword });

        workbook.Save("Decrypted File.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Formatting/Styles and Formatting/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Styles");

        worksheet.Rows[0].Style = workbook.Styles[BuiltInCellStyleName.Heading1];
        worksheet.Columns[0].Width = 30 * 256;
        worksheet.Columns[1].Width = 35 * 256;

        worksheet.Cells[0, 0].Value = "Property";
        worksheet.Cells[0, 1].Value = "Result";

        int row = 0;
        worksheet.Cells[row += 2, 0].Value = "Borders";
        worksheet.Cells[row, 1].Style.Borders.SetBorders(
            MultipleBorders.All | MultipleBorders.Diagonal,
            SpreadsheetColor.FromArgb(252, 1, 1),
            LineStyle.Thin);

        worksheet.Cells[row += 2, 0].Value = "FillPattern";
        worksheet.Cells[row, 1].Style.FillPattern.SetPattern(
            FillPatternStyle.ThinHorizontalCrosshatch,
            SpreadsheetColor.FromName(ColorName.Green),
            SpreadsheetColor.FromName(ColorName.Yellow));

        worksheet.Cells[row += 2, 0].Value = "Font.Color";
        worksheet.Cells[row, 1].Value = "Color.Blue";
        worksheet.Cells[row, 1].Style.Font.Color = SpreadsheetColor.FromName(ColorName.Blue);

        worksheet.Cells[row += 2, 0].Value = "Font.Italic";
        worksheet.Cells[row, 1].Value = "true";
        worksheet.Cells[row, 1].Style.Font.Italic = true;

        worksheet.Cells[row += 2, 0].Value = "Font.Name";
        worksheet.Cells[row, 1].Value = "Comic Sans MS";
        worksheet.Cells[row, 1].Style.Font.Name = "Comic Sans MS";

        worksheet.Cells[row += 2, 0].Value = "Font.ScriptPosition";
        worksheet.Cells[row, 1].Value = "ScriptPosition.Superscript";
        worksheet.Cells[row, 1].Style.Font.ScriptPosition = ScriptPosition.Superscript;

        worksheet.Cells[row += 2, 0].Value = "Font.Size";
        worksheet.Cells[row, 1].Value = "18 * 20";
        worksheet.Cells[row, 1].Style.Font.Size = 18 * 20;

        worksheet.Cells[row += 2, 0].Value = "Font.Strikeout";
        worksheet.Cells[row, 1].Value = "true";
        worksheet.Cells[row, 1].Style.Font.Strikeout = true;

        worksheet.Cells[row += 2, 0].Value = "Font.UnderlineStyle";
        worksheet.Cells[row, 1].Value = "UnderlineStyle.Double";
        worksheet.Cells[row, 1].Style.Font.UnderlineStyle = UnderlineStyle.Double;

        worksheet.Cells[row += 2, 0].Value = "Font.Weight";
        worksheet.Cells[row, 1].Value = "ExcelFont.BoldWeight";
        worksheet.Cells[row, 1].Style.Font.Weight = ExcelFont.BoldWeight;

        worksheet.Cells[row += 2, 0].Value = "HorizontalAlignment";
        worksheet.Cells[row, 1].Value = "HorizontalAlignmentStyle.Center";
        worksheet.Cells[row, 1].Style.HorizontalAlignment = HorizontalAlignmentStyle.Center;

        worksheet.Cells[row += 2, 0].Value = "Indent";
        worksheet.Cells[row, 1].Value = "five";
        worksheet.Cells[row, 1].Style.HorizontalAlignment = HorizontalAlignmentStyle.Left;
        worksheet.Cells[row, 1].Style.Indent = 5;

        worksheet.Cells[row += 2, 0].Value = "IsTextVertical";
        worksheet.Cells[row, 1].Value = "true";
        worksheet.Rows[row].Height = 60 * 20;
        worksheet.Cells[row, 1].Style.IsTextVertical = true;

        worksheet.Cells[row += 2, 0].Value = "NumberFormat";
        worksheet.Cells[row, 1].Value = 1234;
        worksheet.Cells[row, 1].Style.NumberFormat = "#.##0,00 [$Krakozhian Money Units]";

        worksheet.Cells[row += 2, 0].Value = "Rotation";
        worksheet.Cells[row, 1].Value = "35 degrees up";
        worksheet.Cells[row, 1].Style.Rotation = 35;

        worksheet.Cells[row += 2, 0].Value = "ShrinkToFit";
        worksheet.Cells[row, 1].Value = "This property is set to true so this text appears shrunk.";
        worksheet.Cells[row, 1].Style.ShrinkToFit = true;

        worksheet.Cells[row += 2, 0].Value = "VerticalAlignment";
        worksheet.Cells[row, 1].Value = "VerticalAlignmentStyle.Top";
        worksheet.Rows[row].Height = 30 * 20;
        worksheet.Cells[row, 1].Style.VerticalAlignment = VerticalAlignmentStyle.Top;

        worksheet.Cells[row += 2, 0].Value = "WrapText";
        worksheet.Cells[row, 1].Value = "This property is set to true so this text appears broken into multiple lines.";
        worksheet.Cells[row, 1].Style.WrapText = true;

        workbook.Save("Styles and Formatting.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Formatting/Inline Text Formatting/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("InlineTextFormatting");

        worksheet.Columns[0].Width = 50 * 256;

        var cell = worksheet.Cells["A1"];
        cell.Value = "This is big and red text!";

        // Apply the size to "big and red" part of the text.
        cell.GetCharacters(8, 11).Font.Size = 400;

        // Apply the color to "red" part of the text.
        cell.GetCharacters(16, 3).Font.Color = SpreadsheetColor.FromName(ColorName.Red);

        cell = worksheet.Cells["A3"];
        cell.Value = "Formatting selected characters with GemBox.Spreadsheet component.";

        // Apply formatting on the whole cell content.
        cell.Style.Font.Color = SpreadsheetColor.FromName(ColorName.Blue);
        cell.Style.Font.Italic = true;
        cell.Style.WrapText = true;

        // Get characters from index 36 to the end of string,
        // e.g. the "GemBox.Spreadsheet component." part of the text.
        var characters = cell.GetCharacters(36);

        // Apply the color and underline to selected characters.
        characters.Font.Color = SpreadsheetColor.FromName(ColorName.Orange);
        characters.Font.UnderlineStyle = UnderlineStyle.Single;

        // Write selected characters.
        worksheet.Cells["A5"].Value = "Selected characters: " + characters.Text;

        workbook.Save("Inline Text Formatting.xlsx");
    }

    static void Example2()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("HtmlTextFormatting");

        worksheet.Columns[0].Width = 50 * 256;

        var htmlOptions = new HtmlLoadOptions();
        var html = "<h1 style='background:#DDEBF7'>HTML formatted text!</h1>";

        worksheet.Cells["A1"].SetValue(html, htmlOptions);

        html = @"<div style='font:11pt Calibri'>
<p>This is <span style='font-size:20pt'>big and <span style='color:red'>red</span></span> text!</p>
<p>This is <sub>subscript</sub>, <sup>superscript</sup>, <strike>strike</strike>, and <u>underline</u> text.</p>
</div>";

        worksheet.Cells["A3"].SetValue(html, htmlOptions);

        workbook.Save("Html Text Formatting.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Formatting/Number Formatting/Program.cs:
using System;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
    }

    public static void Example1()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Formats");

        worksheet.Rows[0].Style = workbook.Styles[BuiltInCellStyleName.Heading1];
        worksheet.Columns[0].Width = 25 * 256;
        worksheet.Columns[1].Width = 35 * 256;
        worksheet.Columns[2].Width = 25 * 256;

        worksheet.Cells[0, 0].Value = "Value & Format";
        worksheet.Cells[0, 1].Value = "Format";
        worksheet.Cells[0, 2].Value = "Type";

        // Sample data with values and formats.
        var data = new (object Value, string Format)[]
        {
            (1.23, "0"),
            (1.23, "0.00"),
            (1.2345, "0.000"),
            (-2.345, @"0.00_);[Red]\(0.00\)"),
            (2.34, @"\$#,##0.00"),
            (2345.67, @"#,##0.00\ [$�-1]"),
            (new DateTime(2012, 11, 9, 0, 0, 0), @"[$-F800]dddd\,\ mmmm\ dd\,\ yyyy"),
            (new DateTime(2012, 12, 5, 0, 0, 0), @"[$-409]mmmm\ d\,\ yyyy;@"),
            (new DateTime(2012, 8, 10, 0, 0, 0), @"yyyy\-mm\-dd\ \(dddd\)"),
            (new DateTime(2012, 8, 12, 0, 13, 0), @"[$-409]m/d/yy\ h:mm\ AM/PM;@"),
            (new DateTime(2012, 8, 1, 21, 10, 0), @"[$-409]h:mm\ AM/PM;@"),
            (new DateTime(1900, 1, 1, 6, 45, 30), "[h]:mm:ss"),
            (0.0123, "0%"),
            (0.0123, "0.00%"),
            (120000, "0.00E+00"),
            (1.25, @"# ?/?"),
            (1.25, @"#\ ?/100"),
            ("Sample text", "@")
        };

        for (int i = 0; i < data.Length; i++)
        {
            var item = data[i];

            // Write value and set number format to a cell.
            worksheet.Cells[i + 1, 0].Value = item.Value;
            worksheet.Cells[i + 1, 0].Style.NumberFormat = item.Format;

            // Write number format as cell's value.
            worksheet.Cells[i + 1, 1].Value = item.Format;

            // Write data type as cell's value.
            worksheet.Cells[i + 1, 2].Value = item.Value.GetType().ToString();
        }

        workbook.Save("Number Formats.xlsx");
    }

    public static void Example2()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("sheet");
        worksheet.Columns[0].SetWidth(200, LengthUnit.Pixel);

        // Show the value as a number with two decimal places and thousands separator.
        worksheet.Cells[0, 0].Style.NumberFormat =
            NumberFormatBuilder.Number(2, useThousandsSeparator: true);
        worksheet.Cells[0, 0].Value = 2500.333;

        // Show the value in Euros and display negative values in parentheses.
        worksheet.Cells[1, 0].Style.NumberFormat =
            NumberFormatBuilder.Currency("�", 2, useParenthesesToDisplayNegativeValue: true);
        worksheet.Cells[1, 0].Value = -50;

        // Show the value in accounting format with three decimal places.
        worksheet.Cells[2, 0].Style.NumberFormat =
            NumberFormatBuilder.Accounting(3, currencySymbol: "$");
        worksheet.Cells[2, 0].Value = -50;

        // Show the value in ISO 8061 date format.
        worksheet.Cells[3, 0].Style.NumberFormat =
            NumberFormatBuilder.DateTimeIso8061();
        worksheet.Cells[3, 0].Value = DateTime.Now;

        // Show the value as percentage.
        worksheet.Cells[4, 0].Style.NumberFormat =
            NumberFormatBuilder.Percentage(2);
        worksheet.Cells[4, 0].Value = 1 / 3d;

        // Show the value as fraction with 100 as a denominator.
        worksheet.Cells[5, 0].Style.NumberFormat =
            NumberFormatBuilder.FractionWithPreciseDenominator(100);
        worksheet.Cells[5, 0].Value = 1 / 3d;

        // Show the value in scientific notation using two decimal places.
        worksheet.Cells[6, 0].Style.NumberFormat =
            NumberFormatBuilder.Scientific(2);
        worksheet.Cells[6, 0].Value = Math.Pow(Math.PI, 10);

        workbook.Save("Number Format Builder.xlsx");
    }
}

--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Formatting/Conditional Formatting/Program.cs:
using GemBox.Spreadsheet;
using GemBox.Spreadsheet.ConditionalFormatting;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // If using the Professional version, remove this FreeLimitReached event handler.
        SpreadsheetInfo.FreeLimitReached += (sender, e) => e.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;

        var workbook = ExcelFile.Load("SampleData.xlsx");
        var worksheet = workbook.Worksheets["Data"];
        int rowCount = worksheet.Rows.Count;

        // Apply shading to alternate rows in a worksheet using 'Formula' based conditional formatting.
        worksheet.ConditionalFormatting.AddFormula(worksheet.Cells.Name, "MOD(ROW(),2)=0")
            .Style.FillPattern.PatternBackgroundColor = SpreadsheetColor.FromName(ColorName.Accent1Lighter40Pct);

        // Apply '2-Color Scale' conditional formatting to 'Years of Service' column.
        worksheet.ConditionalFormatting.Add2ColorScale("C2:C" + (rowCount + 1));

        // Apply '3-Color Scale' conditional formatting to 'Salaries' column.
        worksheet.ConditionalFormatting.Add3ColorScale("D2:D" + (rowCount + 1));

        // Apply 'Data Bar' conditional formatting to 'Salaries' column.
        worksheet.ConditionalFormatting.AddDataBar("D2:D" + (rowCount + 1));

        // Apply 'Icon Set' conditional formatting to 'Years of Service' column.
        worksheet.ConditionalFormatting.AddIconSet("C2:C" + (rowCount + 1)).IconStyle = SpreadsheetIconStyle.FourTrafficLights;

        // Apply green font color to cells in a 'Years of Service' column which have values between 15 and 20.
        worksheet.ConditionalFormatting.AddContainValue("C2:C" + (rowCount + 1), ContainValueOperator.Between, 15, 20)
            .Style.Font.Color = SpreadsheetColor.FromName(ColorName.Green);

        // Apply double red border to cells in a 'Names' column which contain text 'Doe'.
        worksheet.ConditionalFormatting.AddContainText("B2:B" + (rowCount + 1), ContainTextOperator.Contains, "Doe")
            .Style.Borders.SetBorders(MultipleBorders.Outside, SpreadsheetColor.FromName(ColorName.Red), LineStyle.Double);

        // Apply red shading to cells in a 'Deadlines' column which are equal to yesterday's date.
        worksheet.ConditionalFormatting.AddContainDate("E2:E" + (rowCount + 1), ContainDateOperator.Yesterday)
            .Style.FillPattern.PatternBackgroundColor = SpreadsheetColor.FromName(ColorName.Red);

        // Apply bold font weight to cells in a 'Salaries' column which have top 10 values.
        worksheet.ConditionalFormatting.AddTopOrBottomRanked("D2:D" + (rowCount + 1), false, 10)
            .Style.Font.Weight = ExcelFont.BoldWeight;

        // Apply double underline to cells in a 'Years of Service' column which have below average value.
        worksheet.ConditionalFormatting.AddAboveOrBelowAverage("C2:C" + (rowCount + 1), true)
            .Style.Font.UnderlineStyle = UnderlineStyle.Double;

        // Apply italic font style to cells in a 'Departments' column which have duplicate values.
        worksheet.ConditionalFormatting.AddUniqueOrDuplicate("A2:A" + (rowCount + 1), true)
            .Style.Font.Italic = true;

        workbook.Save("Conditional Formatting.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/DataTable to Sheet/Program.cs:
using System.Data;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("DataTable to Sheet");

        var dataTable = new DataTable();

        dataTable.Columns.Add("ID", typeof(int));
        dataTable.Columns.Add("FirstName", typeof(string));
        dataTable.Columns.Add("LastName", typeof(string));

        dataTable.Rows.Add(new object[] { 100, "John", "Doe" });
        dataTable.Rows.Add(new object[] { 101, "Fred", "Nurk" });
        dataTable.Rows.Add(new object[] { 103, "Hans", "Meier" });
        dataTable.Rows.Add(new object[] { 104, "Ivan", "Horvat" });
        dataTable.Rows.Add(new object[] { 105, "Jean", "Dupont" });
        dataTable.Rows.Add(new object[] { 106, "Mario", "Rossi" });

        worksheet.Cells[0, 0].Value = "DataTable insert example:";

        // Insert DataTable to an Excel worksheet.
        worksheet.InsertDataTable(dataTable,
            new InsertDataTableOptions()
            {
                ColumnHeaders = true,
                StartRow = 2
            });

        workbook.Save("DataTable to Sheet.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/Sheet to DataTable/Program.cs:
using System;
using System.Data;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        var workbook = ExcelFile.Load("SimpleTemplate.xlsx");

        // Create DataTable with specified columns.
        var dataTable = new DataTable();
        dataTable.Columns.Add("First_Column", typeof(string));
        dataTable.Columns.Add("Second_Column", typeof(string));
        dataTable.Columns.Add("Third_Column", typeof(int));
        dataTable.Columns.Add("Fourth_Column", typeof(double));

        // Select the first worksheet from the file.
        var worksheet = workbook.Worksheets[0];

        // Extract the data from an Excel worksheet to the DataTable.
        var options = new ExtractToDataTableOptions(0, 0, 20);
        options.ExcelCellToDataTableCellConverting += (sender, e) =>
        {
            if (!e.IsDataTableValueValid)
            {
                // Convert ExcelCell value to string.
                if (e.DataTableColumnType == typeof(string))
                    e.DataTableValue = e.ExcelCell.Value?.ToString();
                else
                    e.DataTableValue = DBNull.Value;
            }
        };
        worksheet.ExtractToDataTable(dataTable, options);

        // Write DataTable columns.
        foreach (DataColumn column in dataTable.Columns)
            Console.Write(column.ColumnName.PadRight(20));
        Console.WriteLine();
        foreach (DataColumn column in dataTable.Columns)
            Console.Write($"[{column.DataType}]".PadRight(20));
        Console.WriteLine();
        foreach (DataColumn column in dataTable.Columns)
            Console.Write(new string('-', column.ColumnName.Length).PadRight(20));
        Console.WriteLine();

        // Write DataTable rows.
        foreach (DataRow row in dataTable.Rows)
        {
            foreach (object item in row.ItemArray)
            {
                string value = item.ToString();
                value = value.Length > 20 ? value.Remove(19) + "…" : value;
                Console.Write(value.PadRight(20));
            }
            Console.WriteLine();
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/Convert to Image/Program.cs:
using System.IO;
using System.IO.Compression;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
        Example3();
    }

    static void Example1()
    {
        // Load an Excel file into the ExcelFile object.
        var workbook = ExcelFile.Load("CombinedTemplate.xlsx");

        // Create image save options.
        var imageOptions = new ImageSaveOptions(ImageSaveFormat.Png)
        {
            PageNumber = 0, // Select the first Excel page.
            Width = 1240, // Set the image width.
            CropToContent = true // Export only the sheet's content.
        };

        // Save the ExcelFile object to a PNG file.
        workbook.Save("Output.png", imageOptions);
    }

    static void Example2()
    {
        // Load an Excel file.
        var workbook = ExcelFile.Load("CombinedTemplate.xlsx");

        // Max integer value indicates that all spreadsheet pages should be saved.
        var imageOptions = new ImageSaveOptions(ImageSaveFormat.Tiff)
        {
            SelectionType = SelectionType.EntireFile,
            PageCount = int.MaxValue
        };

        // Save the TIFF file with multiple frames, each frame represents a single Excel page.
        workbook.Save("Output.tiff", imageOptions);
    }

    static void Example3()
    {
        // Load an Excel file.
        var workbook = ExcelFile.Load("CombinedTemplate.xlsx");

        // Get Excel pages.
        var paginatorOptions = new PaginatorOptions() { SelectionType = SelectionType.EntireFile };
        var pages = workbook.GetPaginator(paginatorOptions).Pages;

        // Create a ZIP file for storing PNG files.
        using (var archiveStream = File.OpenWrite("Output.zip"))
        using (var archive = new ZipArchive(archiveStream, ZipArchiveMode.Create))
        {
            var imageOptions = new ImageSaveOptions();

            // Iterate through the Excel pages.
            for (int pageIndex = 0; pageIndex < pages.Count; pageIndex++)
            {
                ExcelFilePage page = pages[pageIndex];

                // Create a ZIP entry for each spreadsheet page.
                var entry = archive.CreateEntry($"Page {pageIndex + 1}.png");

                // Save each spreadsheet page as a PNG image to the ZIP entry.
                using (var imageStream = new MemoryStream())
                using (var entryStream = entry.Open())
                {
                    page.Save(imageStream, imageOptions);
                    imageStream.CopyTo(entryStream);
                }
            }
        }
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/Csv Import and Export/LargeCsvReader.cs:
using System.IO;
using GemBox.Spreadsheet;

public sealed class LargeCsvReader : TextReader
{
    private const int MaxRow = 1_048_576;
    private readonly TextReader reader;
    private readonly CsvLoadOptions options;

    private int currentRow;
    private bool finished;

    public static ExcelFile ReadFile(string path, CsvLoadOptions options)
    {
        var workbook = new ExcelFile();
        int sheetIndex = 0;

        using (var reader = new LargeCsvReader(path, options))
            while (reader.CanReadNextSheet())
                reader.ReadSheet(workbook, $"Sheet{++sheetIndex}");

        return workbook;
    }

    private LargeCsvReader(string path, CsvLoadOptions options)
    {
        this.reader = File.OpenText(path);
        this.options = options;
    }

    public override string ReadLine()
    {
        if (this.currentRow == MaxRow)
            return null;

        ++this.currentRow;
        string line = this.reader.ReadLine();
        if (line == null)
            this.finished = true;

        return line;
    }

    private void ReadSheet(ExcelFile workbook, string name)
    {
        var worksheet = ExcelFile.Load(this, this.options).Worksheets.ActiveWorksheet;
        workbook.Worksheets.AddCopy(name, worksheet);
    }

    private bool CanReadNextSheet()
    {
        if (this.finished)
            return false;

        this.currentRow = 0;
        return true;
    }

    protected override void Dispose(bool disposing) => this.reader.Dispose();
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/Csv Import and Export/Program.cs:
using System;
using System.IO;
using System.Linq;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // If using the Professional version, remove this FreeLimitReached event handler.
        SpreadsheetInfo.FreeLimitReached += (sender, e) => e.FreeLimitReachedAction = FreeLimitReachedAction.ContinueAsTrial;

        Example1();
        Example2();
        Example3();
        Example4();
        Example5();
    }

    static void Example1()
    {
        // Read CSV file.
        var workbook = ExcelFile.Load("Input.csv", new CsvLoadOptions(CsvType.CommaDelimited));

        // Add new row.
        var worksheet = workbook.Worksheets[0];
        var row = worksheet.Rows[worksheet.Rows.Count];
        row.Cells[0].Value = "Jane Doe";
        row.Cells[1].Value = 3500;
        row.Cells[2].Value = 35;

        // Write CSV file.
        workbook.Save("Output.csv", new CsvSaveOptions(CsvType.CommaDelimited));
    }

    static void Example2()
    {
        var csvOptions = new CsvLoadOptions(CsvType.CommaDelimited)
        {
            AllowNewLineInQuotes = true,
            HasQuotedValues = true,
            HasFormulas = true
        };

        // Read CSV file using specified CsvLoadOptions.
        var workbook = ExcelFile.Load("ArtificalObjectsOnMoon.csv", csvOptions);

        // Calculate Excel formulas from CSV data.
        var worksheet = workbook.Worksheets[0];
        worksheet.Calculate();

        // Iterate through read CSV records.
        foreach (var row in worksheet.Rows)
        {
            // Iterate through read CSV fields.
            foreach (var cell in row.AllocatedCells)
            {
                // Display just the first line of text from Excel cell.
                var value = cell.Value?.ToString() ?? string.Empty;
                Console.Write($"{value.Split('\n')[0],-25}");
            }

            Console.WriteLine();
        }
    }

    static void Example3()
    {
        var workbook = new ExcelFile();
        var worksheet = workbook.Worksheets.Add("Sheet1");

        // Tabular sample data for exporting into a CSV file.
        var skyscrapers = new object[,]
        {
            { "Rank", "Building", "City", "Country", "Height (m)", "Height (ft)", "Floors", "Built" },
            { 1, "Burj Khalifa", "Dubai", "United Arab Emirates", 829.8, 2722, 163, 2010 },
            { 2, "Shanghai Tower", "Shanghai", "China", 632, 2073, 128, 2015 },
            { 3, "Abraj Al-Bait Towers", "Mecca", "Saudi Arabia", 601, 1971, 120, 2012 },
            { 4, "Ping An Finance Center", "Shenzhen", "China", 599, 1965, 115, 2016 },
            { 5, "Lotte World Tower", "Seoul", "South Korea", 555.7, 1823, 123, 2016 },
            { 6, "One World Trade Center", "New York City", "United States", 546.2, 1792, 104, 2014 },
            { 7, "Guangzhou CTF Finance Centre", "Guangzhou", "China", 530, 1739, 111, 2016 },
            { 7, "Tianjin CTF Finance Centre", "Tianjin", "China", 530, 1739, 98, 2018 },
            { 9, "China Zun", "Beijing", "China", 528, 1732, 108, 2018 },
            { 10, "Willis Tower", "Chicago", "United States", 527, 1729, 108, 1974 },
            { 11, "Taipei 101", "Taipei", "Taiwan", 508, 1667, 101, 2004 },
            { 12, "Shanghai World Financial Center", "Shanghai", "China", 494.3, 1622, 101, 2008 },
            { 13, "International Commerce Centre", "Hong Kong", "China", 484, 1588, 118, 2010 },
            { 15, "Central Park Tower", "New York City", "United States", 472.4, 1550, 103, 2020 },
            { 16, "Landmark 81", "Ho Chi Minh City", "Vietnam", 469.5, 1540, 81, 2018 },
            { 17, "Lakhta Center", "St. Petersburg", "Russia", 462, 1516, 86, 2018 },
            { 18, "John Hancock Center", "Chicago", "United States", 456.9, 1499, 100, 1969 },
            { 19, "Changsha IFS Tower T1", "Changsha", "China", 452, 1483, 94, 2017 },
            { 20, "Petronas Tower 1", "Kuala Lumpur", "Malaysia", 451.9, 1483, 88, 1998 },
            { 20, "Petronas Tower 2", "Kuala Lumpur", "Malaysia", 451.9, 1483, 88, 1998 },
            { 22, "Zifeng Tower", "Nanjing", "China", 450, 1476, 89, 2009 },
            { 22, "Suzhou IFS", "Suzhou", "China", 450, 1476, 98, 2017 },
            { 24, "The Exchange 106", "Kuala Lumpur", "Malaysia", 445.1, 1460, 95, 2018 },
            { 25, "Empire State Building", "New York City", "United States", 443.2, 1454, 102, 1931 },
            { 26, "Kingkey 100", "Shenzhen", "China", 442, 1449, 100, 2011 },
            { 27, "Guangzhou International Finance Center", "Guangzhou", "China", 438.6, 1445, 103, 2009 },
            { 28, "Wuhan Center", "Wuhan", "China", 438, 1437, 88, 2017 },
            { 29, "111 West 57th Street", "New York City", "United States", 435.3, 1428, 82, 2019 },
            { 30, "Dongguan International Trade Center 1", "Dongguan", "China", 426.9, 1401, 88, 2019 },
            { 31, "One Vanderbilt", "New York City", "United States", 427, 1401, 58, 2019 },
            { 32, "432 Park Avenue", "New York City", "United States", 425.5, 1396, 85, 2015 },
            { 33, "Marina 101", "Dubai", "United Arab Emirates", 425, 1394, 101, 2017 },
            { 34, "Trump International Hotel and Tower", "Chicago", "United States", 423.2, 1388, 96, 2009 },
            { 35, "Jin Mao Tower", "Shanghai", "China", 421, 1381, 88, 1998 },
            { 36, "Princess Tower", "Dubai", "United Arab Emirates", 414, 1358, 101, 2012 },
            { 37, "Al Hamra Tower", "Kuwait City", "Kuwait", 412.6, 1354, 80, 2010 },
            { 38, "Two International Finance Centre", "Hong Kong", "China", 412, 1352, 88, 2003 },
            { 39, "Haeundae LCT The Sharp Landmark Tower", "Busan", "South Korea", 411.6, 1350, 101, 2019 },
            { 40, "Guangxi China Resources Tower", "Nanning", "China", 402.7, 1321, 85, 2018 },
            { 41, "Guiyang Financial Center Tower 1", "Guiyang", "China", 401, 1316, 79, 2020 }
        };

        // Write data into Excel cells.
        int rowCount = skyscrapers.GetLength(0);
        int columnCount = skyscrapers.GetLength(1);
        for (int row = 0; row < rowCount; row++)
            for (int column = 0; column < columnCount; column++)
                worksheet.Cells[row, column].Value = skyscrapers[row, column];

        // Format Excel columns.
        worksheet.Columns["E"].Style.NumberFormat = @"0.0 \m";
        worksheet.Columns["F"].Style.NumberFormat = @"0,000 \f\t";

        var csvOptions = new CsvSaveOptions(CsvType.CommaDelimited)
        {
            UseFormattedValues = true
        };

        // Write CSV file using specified CsvSaveOptions.
        workbook.Save("Skyscrapers.csv", csvOptions);
    }

    static void Example4()
    {
        // Create large CSV file.
        using (var csv = File.CreateText("large-file.csv"))
            for (int i = 0; i < 5_000_000; i++)
                csv.WriteLine(i);

        // Import all CSV data into multiple sheets.
        var workbook = LargeCsvReader.ReadFile("large-file.csv", LoadOptions.CsvDefault);

        // Display name and rows count of generated sheets.
        foreach (var worksheet in workbook.Worksheets)
            Console.WriteLine($"Name: {worksheet.Name} | Rows: {worksheet.Rows.Count:#,###}");
    }

    static void Example5()
    {
        // Create large ExcelFile.
        ExcelFile workbook = new ExcelFile();
        ExcelWorksheet worksheet = null;

        int max = 1_048_576;
        for (int index = 0; index < 5_000_000; index++)
        {
            int current = index % max;
            if (current == 0)
                worksheet = workbook.Worksheets.Add($"Sheet{index / max}");
            worksheet.Cells[current, 0].SetValue(index);
        }

        // Export multiple sheets into single CSV file.
        var options = SaveOptions.CsvDefault;
        using (var writer = File.CreateText("large-file.csv"))
            foreach (var sheet in workbook.Worksheets)
            {
                workbook.Worksheets.ActiveWorksheet = sheet;
                workbook.Save(writer, options);
            }

        // Display number of lines, or records, in generated CSV file.
        int csvLinesCount = File.ReadLines("large-file.csv").Count();
        Console.WriteLine($"Records: {csvLinesCount:#,###}");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/Fixed Columns Width Text/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        // Define columns width (for input file format).
        var loadOptions = new FixedWidthLoadOptions(
            new FixedWidthColumn(8),
            new FixedWidthColumn(8),
            new FixedWidthColumn(8));

        // Load file.
        var workbook = ExcelFile.Load("FixedColumnsWidthText.prn", loadOptions);

        // Modify file.
        workbook.Worksheets.ActiveWorksheet.GetUsedCellRange(true).Sort(false).By(1).Apply();

        // Define columns width (for output file format).
        var saveOptions = new FixedWidthSaveOptions(
            new FixedWidthColumn(8),
            new FixedWidthColumn(8),
            new FixedWidthColumn(8));

        workbook.Save("Fixed Columns Width Text.prn", saveOptions);
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/Html Import and Export/Program.cs:
using System.Linq;
using System.Xml;
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
        Example3();
    }

    static void Example1()
    {
        var workbook = ExcelFile.Load("HtmlExport.xlsx");

        var worksheet = workbook.Worksheets[0];

        // Set some ExcelPrintOptions properties for HTML export.
        worksheet.PrintOptions.PrintHeadings = true;
        worksheet.PrintOptions.PrintGridlines = true;

        // Specify cell range which should be exported to HTML.
        worksheet.NamedRanges.SetPrintArea(worksheet.Cells.GetSubrange("A1", "J42"));

        var options = new HtmlSaveOptions()
        {
            HtmlType = HtmlType.Html,
            SelectionType = SelectionType.EntireFile
        };

        workbook.Save("HtmlExport.html", options);
    }

    static void Example2()
    {
        var workbook = ExcelFile.Load("HtmlExport.xlsx");

        // Specify exporting of Excel data as an HTML table with embedded images.
        var options = new HtmlSaveOptions()
        {
            EmbedImages = true,
            HtmlType = HtmlType.HtmlTable
        };

        using (var writer = XmlWriter.Create("SingleHtmlExport.html",
            new XmlWriterSettings() { OmitXmlDeclaration = true }))
        {
            writer.WriteStartElement("html");
            writer.WriteStartElement("body");

            // Write Excel sheets to a single HTML file in reverse order.
            foreach (var worksheet in workbook.Worksheets.Reverse())
            {
                if (worksheet.Visibility != SheetVisibility.Visible)
                    continue;

                writer.WriteElementString("h1", worksheet.Name);
                workbook.Worksheets.ActiveWorksheet = worksheet;
                workbook.Save(writer, options);
            }

            writer.WriteEndDocument();
        }
    }

    static void Example3()
    {
        // Load input HTML file.
        var workbook = ExcelFile.Load("HtmlImport.html");

        // Save output XLSX file.
        workbook.Save("HtmlImport.xlsx");
    }
}
--- Example: ../GitHub-GB-examples/GemBox.Spreadsheet.Examples-master/C#/Conversion/Convert to PDF/Program.cs:
using GemBox.Spreadsheet;

class Program
{
    static void Main()
    {
        // If using the Professional version, put your serial key below.
        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");

        Example1();
        Example2();
        Example3();
    }

    static void Example1()
    {
        // In order to convert Excel to PDF, we just need to:
        //   1. Load XLS or XLSX file into ExcelFile object.
        //   2. Save ExcelFile object to PDF file.
        ExcelFile workbook = ExcelFile.Load("ComplexTemplate.xlsx");
        workbook.Save("Convert1.pdf", new PdfSaveOptions() { SelectionType = SelectionType.EntireFile });
    }

    static void Example2()
    {
        // Load Excel file.
        ExcelFile workbook = ExcelFile.Load("ComplexTemplate.xlsx");

        // Get Excel sheet you want to export.
        ExcelWorksheet worksheet = workbook.Worksheets[0];

        // Set targeted sheet as active.
        workbook.Worksheets.ActiveWorksheet = worksheet;

        // Get cell range that you want to export.
        CellRange range = worksheet.Cells.GetSubrange("A5:I14");

        // Set targeted range as print area.
        worksheet.NamedRanges.SetPrintArea(range);

        // Save to PDF file.
        // By default, the SelectionType.ActiveSheet is used.
        workbook.Save("Convert2.pdf");
    }

    static void Example3()
    {
        PdfConformanceLevel conformanceLevel = PdfConformanceLevel.PdfA1a;

        // Load Excel file.
        var workbook = ExcelFile.Load("ComplexTemplate.xlsx");

        // Create PDF save options.
        var options = new PdfSaveOptions()
        {
            ConformanceLevel = conformanceLevel
        };

        // Save to PDF file.
        workbook.Save("Output3.pdf", options);
    }
}
---------------- Total of 121 files processed.

